
m_usbcom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a32c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b68  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c040  0800c040  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c048  0800c048  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c048  0800c048  0001c048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c04c  0800c04c  0001c04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800c050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020144  2**0
                  CONTENTS
 10 .bss          00001e80  20000144  20000144  00020144  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fc4  20001fc4  00020144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c51  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004131  00000000  00000000  00039dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003def8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  0003f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002898c  00000000  00000000  000408f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ea61  00000000  00000000  0006927c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e19aa  00000000  00000000  00087cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00169687  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a54  00000000  00000000  001696d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000144 	.word	0x20000144
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a4c0 	.word	0x0800a4c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000148 	.word	0x20000148
 80001e8:	0800a4c0 	.word	0x0800a4c0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f001 fb95 	bl	8001c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f89d 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f905 	bl	800070c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000502:	f009 fa95 	bl	8009a30 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000506:	f000 fd59 	bl	8000fbc <BSP_LCD_Init>
  //Initial setup LCD display
  BSP_LCD_LayerDefaultInit(1,SDRAM_DEVICE_ADDR);
 800050a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800050e:	2001      	movs	r0, #1
 8000510:	f000 fdd6 	bl	80010c0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000514:	2001      	movs	r0, #1
 8000516:	f000 fe37 	bl	8001188 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn(); //turn on LCD
 800051a:	f000 ffbb 	bl	8001494 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK); //clear the LCD on Black color
 800051e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000522:	f000 fe8d 	bl	8001240 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK); //set background color is yellow
 8000526:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800052a:	f000 fe55 	bl	80011d8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800052e:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000532:	f000 fe39 	bl	80011a8 <BSP_LCD_SetTextColor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint8_t* Buf1= NULL;
 8000536:	2300      	movs	r3, #0
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
	  uint16_t Len1=0;
 800053a:	2300      	movs	r3, #0
 800053c:	847b      	strh	r3, [r7, #34]	; 0x22
	  char *string1 = "Hello STM", *string2 = "Good evening, it's too dark here",
 800053e:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <main+0x138>)
 8000540:	61fb      	str	r3, [r7, #28]
 8000542:	4b3a      	ldr	r3, [pc, #232]	; (800062c <main+0x13c>)
 8000544:	61bb      	str	r3, [r7, #24]
			  *string3 = "Do you want to turn on light?";
 8000546:	4b3a      	ldr	r3, [pc, #232]	; (8000630 <main+0x140>)
 8000548:	617b      	str	r3, [r7, #20]
	  uint8_t *message1 = (uint8_t*)string1;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	613b      	str	r3, [r7, #16]
	  uint8_t *message2 = (uint8_t*)string2;
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	60fb      	str	r3, [r7, #12]
	  uint8_t *message3 = (uint8_t*)string3;
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	60bb      	str	r3, [r7, #8]

	  while((CDC_Transmit_HS(Buf1,Len1)) != *message1)
 8000556:	e005      	b.n	8000564 <main+0x74>
	  {
		  BSP_LCD_DisplayStringAt(100,200,message2,CENTER_MODE);
 8000558:	2301      	movs	r3, #1
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	21c8      	movs	r1, #200	; 0xc8
 800055e:	2064      	movs	r0, #100	; 0x64
 8000560:	f000 feda 	bl	8001318 <BSP_LCD_DisplayStringAt>
	  while((CDC_Transmit_HS(Buf1,Len1)) != *message1)
 8000564:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000566:	4619      	mov	r1, r3
 8000568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800056a:	f009 fb1f 	bl	8009bac <CDC_Transmit_HS>
 800056e:	4603      	mov	r3, r0
 8000570:	461a      	mov	r2, r3
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	d1ee      	bne.n	8000558 <main+0x68>
	  }

	  while(1)
	  {
		  BSP_LCD_DisplayStringAt(100,200,message3,CENTER_MODE);
 800057a:	2301      	movs	r3, #1
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	21c8      	movs	r1, #200	; 0xc8
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 fec9 	bl	8001318 <BSP_LCD_DisplayStringAt>
		  uint8_t* Buf2= NULL;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
		  uint16_t Len2=0;
 800058a:	2300      	movs	r3, #0
 800058c:	807b      	strh	r3, [r7, #2]


		  switch(CDC_Transmit_HS(Buf2,Len2))
 800058e:	887b      	ldrh	r3, [r7, #2]
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f009 fb0a 	bl	8009bac <CDC_Transmit_HS>
 8000598:	4603      	mov	r3, r0
 800059a:	3b01      	subs	r3, #1
 800059c:	2b04      	cmp	r3, #4
 800059e:	d836      	bhi.n	800060e <main+0x11e>
 80005a0:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <main+0xb8>)
 80005a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a6:	bf00      	nop
 80005a8:	080005bd 	.word	0x080005bd
 80005ac:	080005cb 	.word	0x080005cb
 80005b0:	080005d9 	.word	0x080005d9
 80005b4:	080005e7 	.word	0x080005e7
 80005b8:	080005f5 	.word	0x080005f5
		  {
		  	  case 1:
		  		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,1);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	481c      	ldr	r0, [pc, #112]	; (8000634 <main+0x144>)
 80005c4:	f002 fad6 	bl	8002b74 <HAL_GPIO_WritePin>
		  		  break;
 80005c8:	e02d      	b.n	8000626 <main+0x136>
		  	  case 2:
		  		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d0:	4818      	ldr	r0, [pc, #96]	; (8000634 <main+0x144>)
 80005d2:	f002 facf 	bl	8002b74 <HAL_GPIO_WritePin>
		  		  break;
 80005d6:	e026      	b.n	8000626 <main+0x136>
		  	  case 3:
		  		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,1);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005de:	4815      	ldr	r0, [pc, #84]	; (8000634 <main+0x144>)
 80005e0:	f002 fac8 	bl	8002b74 <HAL_GPIO_WritePin>
		  		  break;
 80005e4:	e01f      	b.n	8000626 <main+0x136>
		  	  case 4:
		  		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ec:	4811      	ldr	r0, [pc, #68]	; (8000634 <main+0x144>)
 80005ee:	f002 fac1 	bl	8002b74 <HAL_GPIO_WritePin>
		  		  break;
 80005f2:	e018      	b.n	8000626 <main+0x136>
		  	  case 5:
		  	  {
		  		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fa:	480e      	ldr	r0, [pc, #56]	; (8000634 <main+0x144>)
 80005fc:	f002 faba 	bl	8002b74 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,0);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <main+0x144>)
 8000608:	f002 fab4 	bl	8002b74 <HAL_GPIO_WritePin>
		  		  break;
 800060c:	e00b      	b.n	8000626 <main+0x136>
		  	  }
		  	  default: //default statement
		  	  {
		  		 HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,0);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0x144>)
 8000616:	f002 faad 	bl	8002b74 <HAL_GPIO_WritePin>
		  		 HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,0);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <main+0x144>)
 8000622:	f002 faa7 	bl	8002b74 <HAL_GPIO_WritePin>
	  {
 8000626:	e7a8      	b.n	800057a <main+0x8a>
 8000628:	0800a4d8 	.word	0x0800a4d8
 800062c:	0800a4e4 	.word	0x0800a4e4
 8000630:	0800a508 	.word	0x0800a508
 8000634:	40021800 	.word	0x40021800

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f009 ff32 	bl	800a4b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 ffc9 	bl	8004654 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f880 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fa2a 	bl	8004b44 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f869 	bl	80007cc <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MX_GPIO_Init+0xbc>)
 800079a:	f002 f9eb 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800079e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0xbc>)
 80007b8:	f002 f830 	bl	800281c <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	; 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40021800 	.word	0x40021800

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000874:	f001 fa28 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <OTG_HS_IRQHandler+0x10>)
 8000882:	f002 fdba 	bl	80033fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20001898 	.word	0x20001898

08000890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <SystemInit+0x20>)
 8000896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <SystemInit+0x20>)
 800089c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ba:	490e      	ldr	r1, [pc, #56]	; (80008f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d0:	4c0b      	ldr	r4, [pc, #44]	; (8000900 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008de:	f7ff ffd7 	bl	8000890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f009 fdc1 	bl	800a468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e6:	f7ff fe03 	bl	80004f0 <main>
  bx  lr    
 80008ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 80008f8:	0800c050 	.word	0x0800c050
  ldr r2, =_sbss
 80008fc:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000900:	20001fc4 	.word	0x20001fc4

08000904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC_IRQHandler>

08000906 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800090a:	f000 fa5d 	bl	8000dc8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800090e:	20ca      	movs	r0, #202	; 0xca
 8000910:	f000 f95d 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000914:	20c3      	movs	r0, #195	; 0xc3
 8000916:	f000 f967 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800091a:	2008      	movs	r0, #8
 800091c:	f000 f964 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000920:	2050      	movs	r0, #80	; 0x50
 8000922:	f000 f961 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000926:	20cf      	movs	r0, #207	; 0xcf
 8000928:	f000 f951 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800092c:	2000      	movs	r0, #0
 800092e:	f000 f95b 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000932:	20c1      	movs	r0, #193	; 0xc1
 8000934:	f000 f958 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000938:	2030      	movs	r0, #48	; 0x30
 800093a:	f000 f955 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800093e:	20ed      	movs	r0, #237	; 0xed
 8000940:	f000 f945 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000944:	2064      	movs	r0, #100	; 0x64
 8000946:	f000 f94f 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800094a:	2003      	movs	r0, #3
 800094c:	f000 f94c 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000950:	2012      	movs	r0, #18
 8000952:	f000 f949 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000956:	2081      	movs	r0, #129	; 0x81
 8000958:	f000 f946 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800095c:	20e8      	movs	r0, #232	; 0xe8
 800095e:	f000 f936 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000962:	2085      	movs	r0, #133	; 0x85
 8000964:	f000 f940 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000968:	2000      	movs	r0, #0
 800096a:	f000 f93d 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800096e:	2078      	movs	r0, #120	; 0x78
 8000970:	f000 f93a 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000974:	20cb      	movs	r0, #203	; 0xcb
 8000976:	f000 f92a 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800097a:	2039      	movs	r0, #57	; 0x39
 800097c:	f000 f934 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000980:	202c      	movs	r0, #44	; 0x2c
 8000982:	f000 f931 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f92e 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800098c:	2034      	movs	r0, #52	; 0x34
 800098e:	f000 f92b 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000992:	2002      	movs	r0, #2
 8000994:	f000 f928 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000998:	20f7      	movs	r0, #247	; 0xf7
 800099a:	f000 f918 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800099e:	2020      	movs	r0, #32
 80009a0:	f000 f922 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80009a4:	20ea      	movs	r0, #234	; 0xea
 80009a6:	f000 f912 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 f91c 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f919 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80009b6:	20b1      	movs	r0, #177	; 0xb1
 80009b8:	f000 f909 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f913 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80009c2:	201b      	movs	r0, #27
 80009c4:	f000 f910 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80009c8:	20b6      	movs	r0, #182	; 0xb6
 80009ca:	f000 f900 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f000 f90a 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80009d4:	20a2      	movs	r0, #162	; 0xa2
 80009d6:	f000 f907 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80009da:	20c0      	movs	r0, #192	; 0xc0
 80009dc:	f000 f8f7 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80009e0:	2010      	movs	r0, #16
 80009e2:	f000 f901 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80009e6:	20c1      	movs	r0, #193	; 0xc1
 80009e8:	f000 f8f1 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80009ec:	2010      	movs	r0, #16
 80009ee:	f000 f8fb 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80009f2:	20c5      	movs	r0, #197	; 0xc5
 80009f4:	f000 f8eb 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80009f8:	2045      	movs	r0, #69	; 0x45
 80009fa:	f000 f8f5 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80009fe:	2015      	movs	r0, #21
 8000a00:	f000 f8f2 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000a04:	20c7      	movs	r0, #199	; 0xc7
 8000a06:	f000 f8e2 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000a0a:	2090      	movs	r0, #144	; 0x90
 8000a0c:	f000 f8ec 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000a10:	2036      	movs	r0, #54	; 0x36
 8000a12:	f000 f8dc 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000a16:	20c8      	movs	r0, #200	; 0xc8
 8000a18:	f000 f8e6 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000a1c:	20f2      	movs	r0, #242	; 0xf2
 8000a1e:	f000 f8d6 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f8e0 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000a28:	20b0      	movs	r0, #176	; 0xb0
 8000a2a:	f000 f8d0 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000a2e:	20c2      	movs	r0, #194	; 0xc2
 8000a30:	f000 f8da 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000a34:	20b6      	movs	r0, #182	; 0xb6
 8000a36:	f000 f8ca 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f000 f8d4 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000a40:	20a7      	movs	r0, #167	; 0xa7
 8000a42:	f000 f8d1 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000a46:	2027      	movs	r0, #39	; 0x27
 8000a48:	f000 f8ce 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000a4c:	2004      	movs	r0, #4
 8000a4e:	f000 f8cb 	bl	8000be8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000a52:	202a      	movs	r0, #42	; 0x2a
 8000a54:	f000 f8bb 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 f8c5 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 f8c2 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f8bf 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000a6a:	20ef      	movs	r0, #239	; 0xef
 8000a6c:	f000 f8bc 	bl	8000be8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000a70:	202b      	movs	r0, #43	; 0x2b
 8000a72:	f000 f8ac 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f8b6 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 f8b3 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f000 f8b0 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000a88:	203f      	movs	r0, #63	; 0x3f
 8000a8a:	f000 f8ad 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000a8e:	20f6      	movs	r0, #246	; 0xf6
 8000a90:	f000 f89d 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 f8a7 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 f8a4 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000aa0:	2006      	movs	r0, #6
 8000aa2:	f000 f8a1 	bl	8000be8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000aa6:	202c      	movs	r0, #44	; 0x2c
 8000aa8:	f000 f891 	bl	8000bce <ili9341_WriteReg>
  LCD_Delay(200);
 8000aac:	20c8      	movs	r0, #200	; 0xc8
 8000aae:	f000 fa79 	bl	8000fa4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000ab2:	2026      	movs	r0, #38	; 0x26
 8000ab4:	f000 f88b 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 f895 	bl	8000be8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000abe:	20e0      	movs	r0, #224	; 0xe0
 8000ac0:	f000 f885 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000ac4:	200f      	movs	r0, #15
 8000ac6:	f000 f88f 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000aca:	2029      	movs	r0, #41	; 0x29
 8000acc:	f000 f88c 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000ad0:	2024      	movs	r0, #36	; 0x24
 8000ad2:	f000 f889 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000ad6:	200c      	movs	r0, #12
 8000ad8:	f000 f886 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000adc:	200e      	movs	r0, #14
 8000ade:	f000 f883 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000ae2:	2009      	movs	r0, #9
 8000ae4:	f000 f880 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000ae8:	204e      	movs	r0, #78	; 0x4e
 8000aea:	f000 f87d 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000aee:	2078      	movs	r0, #120	; 0x78
 8000af0:	f000 f87a 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000af4:	203c      	movs	r0, #60	; 0x3c
 8000af6:	f000 f877 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000afa:	2009      	movs	r0, #9
 8000afc:	f000 f874 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000b00:	2013      	movs	r0, #19
 8000b02:	f000 f871 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000b06:	2005      	movs	r0, #5
 8000b08:	f000 f86e 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000b0c:	2017      	movs	r0, #23
 8000b0e:	f000 f86b 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000b12:	2011      	movs	r0, #17
 8000b14:	f000 f868 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 f865 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000b1e:	20e1      	movs	r0, #225	; 0xe1
 8000b20:	f000 f855 	bl	8000bce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f85f 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000b2a:	2016      	movs	r0, #22
 8000b2c:	f000 f85c 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000b30:	201b      	movs	r0, #27
 8000b32:	f000 f859 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000b36:	2004      	movs	r0, #4
 8000b38:	f000 f856 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000b3c:	2011      	movs	r0, #17
 8000b3e:	f000 f853 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f000 f850 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000b48:	2031      	movs	r0, #49	; 0x31
 8000b4a:	f000 f84d 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000b4e:	2033      	movs	r0, #51	; 0x33
 8000b50:	f000 f84a 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000b54:	2042      	movs	r0, #66	; 0x42
 8000b56:	f000 f847 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000b5a:	2005      	movs	r0, #5
 8000b5c:	f000 f844 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000b60:	200c      	movs	r0, #12
 8000b62:	f000 f841 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000b66:	200a      	movs	r0, #10
 8000b68:	f000 f83e 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000b6c:	2028      	movs	r0, #40	; 0x28
 8000b6e:	f000 f83b 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000b72:	202f      	movs	r0, #47	; 0x2f
 8000b74:	f000 f838 	bl	8000be8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f000 f835 	bl	8000be8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000b7e:	2011      	movs	r0, #17
 8000b80:	f000 f825 	bl	8000bce <ili9341_WriteReg>
  LCD_Delay(200);
 8000b84:	20c8      	movs	r0, #200	; 0xc8
 8000b86:	f000 fa0d 	bl	8000fa4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000b8a:	2029      	movs	r0, #41	; 0x29
 8000b8c:	f000 f81f 	bl	8000bce <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000b90:	202c      	movs	r0, #44	; 0x2c
 8000b92:	f000 f81c 	bl	8000bce <ili9341_WriteReg>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000b9e:	f000 f913 	bl	8000dc8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	20d3      	movs	r0, #211	; 0xd3
 8000ba6:	f000 f82c 	bl	8000c02 <ili9341_ReadData>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29b      	uxth	r3, r3
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000bb6:	2029      	movs	r0, #41	; 0x29
 8000bb8:	f000 f809 	bl	8000bce <ili9341_WriteReg>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000bc4:	2028      	movs	r0, #40	; 0x28
 8000bc6:	f000 f802 	bl	8000bce <ili9341_WriteReg>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f98e 	bl	8000efc <LCD_IO_WriteReg>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f95f 	bl	8000eb8 <LCD_IO_WriteData>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	460a      	mov	r2, r1
 8000c0c:	80fb      	strh	r3, [r7, #6]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000c12:	797a      	ldrb	r2, [r7, #5]
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f991 	bl	8000f40 <LCD_IO_ReadData>
 8000c1e:	4603      	mov	r3, r0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000c2c:	23f0      	movs	r3, #240	; 0xf0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000c3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000c50:	4819      	ldr	r0, [pc, #100]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c52:	f005 f87e 	bl	8005d52 <HAL_SPI_GetState>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d12b      	bne.n	8000cb4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <SPIx_Init+0x70>)
 8000c60:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c64:	2218      	movs	r2, #24
 8000c66:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c82:	2207      	movs	r2, #7
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <SPIx_Init+0x6c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SPIx_Init+0x6c>)
 8000ca2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <SPIx_Init+0x6c>)
 8000caa:	f000 f853 	bl	8000d54 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000cae:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <SPIx_Init+0x6c>)
 8000cb0:	f004 fb9b 	bl	80053ea <HAL_SPI_Init>
  } 
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000160 	.word	0x20000160
 8000cbc:	40015000 	.word	0x40015000

08000cc0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <SPIx_Read+0x38>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f107 0108 	add.w	r1, r7, #8
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <SPIx_Read+0x3c>)
 8000cdc:	f004 fd86 	bl	80057ec <HAL_SPI_Receive>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000cea:	f000 f827 	bl	8000d3c <SPIx_Error>
  }
  
  return readvalue;
 8000cee:	68bb      	ldr	r3, [r7, #8]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000003c 	.word	0x2000003c
 8000cfc:	20000160 	.word	0x20000160

08000d00 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <SPIx_Write+0x34>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	1db9      	adds	r1, r7, #6
 8000d14:	2201      	movs	r2, #1
 8000d16:	4808      	ldr	r0, [pc, #32]	; (8000d38 <SPIx_Write+0x38>)
 8000d18:	f004 fc2c 	bl	8005574 <HAL_SPI_Transmit>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000d26:	f000 f809 	bl	8000d3c <SPIx_Error>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000003c 	.word	0x2000003c
 8000d38:	20000160 	.word	0x20000160

08000d3c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <SPIx_Error+0x14>)
 8000d42:	f004 fbdb 	bl	80054fc <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000d46:	f7ff ff81 	bl	8000c4c <SPIx_Init>
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000160 	.word	0x20000160

08000d54 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <SPIx_MspInit+0x6c>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <SPIx_MspInit+0x6c>)
 8000d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <SPIx_MspInit+0x6c>)
 8000d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <SPIx_MspInit+0x6c>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <SPIx_MspInit+0x6c>)
 8000d82:	f043 0320 	orr.w	r3, r3, #32
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <SPIx_MspInit+0x6c>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0320 	and.w	r3, r3, #32
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000d94:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000da2:	2301      	movs	r3, #1
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000da6:	2305      	movs	r3, #5
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <SPIx_MspInit+0x70>)
 8000db2:	f001 fd33 	bl	800281c <HAL_GPIO_Init>
}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40021400 	.word	0x40021400

08000dc8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <LCD_IO_Init+0xe0>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d164      	bne.n	8000ea0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8000dd6:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <LCD_IO_Init+0xe0>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <LCD_IO_Init+0xe4>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a31      	ldr	r2, [pc, #196]	; (8000eac <LCD_IO_Init+0xe4>)
 8000de6:	f043 0308 	orr.w	r3, r3, #8
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <LCD_IO_Init+0xe4>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4827      	ldr	r0, [pc, #156]	; (8000eb0 <LCD_IO_Init+0xe8>)
 8000e12:	f001 fd03 	bl	800281c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b24      	ldr	r3, [pc, #144]	; (8000eac <LCD_IO_Init+0xe4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a23      	ldr	r2, [pc, #140]	; (8000eac <LCD_IO_Init+0xe4>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <LCD_IO_Init+0xe4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <LCD_IO_Init+0xe8>)
 8000e4c:	f001 fce6 	bl	800281c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <LCD_IO_Init+0xe4>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <LCD_IO_Init+0xe4>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <LCD_IO_Init+0xe4>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <LCD_IO_Init+0xec>)
 8000e84:	f001 fcca 	bl	800281c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <LCD_IO_Init+0xec>)
 8000e8e:	f001 fe71 	bl	8002b74 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000e92:	2201      	movs	r2, #1
 8000e94:	2104      	movs	r1, #4
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <LCD_IO_Init+0xec>)
 8000e98:	f001 fe6c 	bl	8002b74 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000e9c:	f7ff fed6 	bl	8000c4c <SPIx_Init>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200001b8 	.word	0x200001b8
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40020800 	.word	0x40020800

08000eb8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <LCD_IO_WriteData+0x3c>)
 8000eca:	f001 fe53 	bl	8002b74 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <LCD_IO_WriteData+0x40>)
 8000ed4:	f001 fe4e 	bl	8002b74 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff10 	bl	8000d00 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <LCD_IO_WriteData+0x40>)
 8000ee6:	f001 fe45 	bl	8002b74 <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40020800 	.word	0x40020800

08000efc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <LCD_IO_WriteReg+0x3c>)
 8000f0e:	f001 fe31 	bl	8002b74 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000f12:	2200      	movs	r2, #0
 8000f14:	2104      	movs	r1, #4
 8000f16:	4809      	ldr	r0, [pc, #36]	; (8000f3c <LCD_IO_WriteReg+0x40>)
 8000f18:	f001 fe2c 	bl	8002b74 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff feed 	bl	8000d00 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f26:	2201      	movs	r2, #1
 8000f28:	2104      	movs	r1, #4
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <LCD_IO_WriteReg+0x40>)
 8000f2c:	f001 fe22 	bl	8002b74 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40020800 	.word	0x40020800

08000f40 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	80fb      	strh	r3, [r7, #6]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000f54:	2200      	movs	r2, #0
 8000f56:	2104      	movs	r1, #4
 8000f58:	4810      	ldr	r0, [pc, #64]	; (8000f9c <LCD_IO_ReadData+0x5c>)
 8000f5a:	f001 fe0b 	bl	8002b74 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f64:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <LCD_IO_ReadData+0x60>)
 8000f66:	f001 fe05 	bl	8002b74 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fec7 	bl	8000d00 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000f72:	797b      	ldrb	r3, [r7, #5]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fea3 	bl	8000cc0 <SPIx_Read>
 8000f7a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <LCD_IO_ReadData+0x60>)
 8000f84:	f001 fdf6 	bl	8002b74 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <LCD_IO_ReadData+0x5c>)
 8000f8e:	f001 fdf1 	bl	8002b74 <HAL_GPIO_WritePin>
  
  return readvalue;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020c00 	.word	0x40020c00

08000fa4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 feab 	bl	8001d08 <HAL_Delay>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <BSP_LCD_Init+0xbc>)
 8000fc2:	4a2e      	ldr	r2, [pc, #184]	; (800107c <BSP_LCD_Init+0xc0>)
 8000fc4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <BSP_LCD_Init+0xbc>)
 8000fc8:	2209      	movs	r2, #9
 8000fca:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <BSP_LCD_Init+0xbc>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <BSP_LCD_Init+0xbc>)
 8000fd4:	221d      	movs	r2, #29
 8000fd6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <BSP_LCD_Init+0xbc>)
 8000fda:	2203      	movs	r2, #3
 8000fdc:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <BSP_LCD_Init+0xbc>)
 8000fe0:	f240 120d 	movw	r2, #269	; 0x10d
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <BSP_LCD_Init+0xbc>)
 8000fe8:	f240 1243 	movw	r2, #323	; 0x143
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <BSP_LCD_Init+0xbc>)
 8000ff0:	f240 1217 	movw	r2, #279	; 0x117
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <BSP_LCD_Init+0xbc>)
 8000ff8:	f240 1247 	movw	r2, #327	; 0x147
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <BSP_LCD_Init+0xbc>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <BSP_LCD_Init+0xbc>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <BSP_LCD_Init+0xbc>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <BSP_LCD_Init+0xc4>)
 8001018:	2208      	movs	r2, #8
 800101a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <BSP_LCD_Init+0xc4>)
 800101e:	22c0      	movs	r2, #192	; 0xc0
 8001020:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <BSP_LCD_Init+0xc4>)
 8001024:	2204      	movs	r2, #4
 8001026:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <BSP_LCD_Init+0xc4>)
 800102a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <BSP_LCD_Init+0xc4>)
 8001032:	f003 ff7f 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <BSP_LCD_Init+0xbc>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <BSP_LCD_Init+0xbc>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <BSP_LCD_Init+0xbc>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <BSP_LCD_Init+0xbc>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800104e:	f000 fa31 	bl	80014b4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <BSP_LCD_Init+0xbc>)
 8001054:	f001 fda8 	bl	8002ba8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <BSP_LCD_Init+0xc8>)
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <BSP_LCD_Init+0xcc>)
 800105c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <BSP_LCD_Init+0xc8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001066:	f000 fc13 	bl	8001890 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <BSP_LCD_Init+0xd0>)
 800106c:	f000 f8ce 	bl	800120c <BSP_LCD_SetFont>

  return LCD_OK;
 8001070:	2300      	movs	r3, #0
}  
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200001bc 	.word	0x200001bc
 800107c:	40016800 	.word	0x40016800
 8001080:	200002a4 	.word	0x200002a4
 8001084:	200002f0 	.word	0x200002f0
 8001088:	20000004 	.word	0x20000004
 800108c:	20000040 	.word	0x20000040

08001090 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <BSP_LCD_GetXSize+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	4798      	blx	r3
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200002f0 	.word	0x200002f0

080010a8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <BSP_LCD_GetYSize+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b2:	4798      	blx	r3
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200002f0 	.word	0x200002f0

080010c0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b090      	sub	sp, #64	; 0x40
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80010d0:	f7ff ffde 	bl	8001090 <BSP_LCD_GetXSize>
 80010d4:	4603      	mov	r3, r0
 80010d6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80010dc:	f7ff ffe4 	bl	80010a8 <BSP_LCD_GetYSize>
 80010e0:	4603      	mov	r3, r0
 80010e2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80010ec:	23ff      	movs	r3, #255	; 0xff
 80010ee:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001106:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800110c:	2307      	movs	r3, #7
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001110:	f7ff ffbe 	bl	8001090 <BSP_LCD_GetXSize>
 8001114:	4603      	mov	r3, r0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001118:	f7ff ffc6 	bl	80010a8 <BSP_LCD_GetYSize>
 800111c:	4603      	mov	r3, r0
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001120:	88fa      	ldrh	r2, [r7, #6]
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	4814      	ldr	r0, [pc, #80]	; (800117c <BSP_LCD_LayerDefaultInit+0xbc>)
 800112a:	f001 fe17 	bl	8002d5c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	4913      	ldr	r1, [pc, #76]	; (8001180 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	3304      	adds	r3, #4
 800113e:	f04f 32ff 	mov.w	r2, #4294967295
 8001142:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001144:	88fa      	ldrh	r2, [r7, #6]
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3308      	adds	r3, #8
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001156:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001158:	88fa      	ldrh	r2, [r7, #6]
 800115a:	4909      	ldr	r1, [pc, #36]	; (8001180 <BSP_LCD_LayerDefaultInit+0xc0>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800116a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <BSP_LCD_LayerDefaultInit+0xbc>)
 800116e:	f001 fe33 	bl	8002dd8 <HAL_LTDC_EnableDither>
}
 8001172:	bf00      	nop
 8001174:	3740      	adds	r7, #64	; 0x40
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200001bc 	.word	0x200001bc
 8001180:	200002d8 	.word	0x200002d8
 8001184:	20000040 	.word	0x20000040

08001188 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <BSP_LCD_SelectLayer+0x1c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200002d4 	.word	0x200002d4

080011a8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <BSP_LCD_SetTextColor+0x28>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <BSP_LCD_SetTextColor+0x2c>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	200002d4 	.word	0x200002d4
 80011d4:	200002d8 	.word	0x200002d8

080011d8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <BSP_LCD_SetBackColor+0x2c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4908      	ldr	r1, [pc, #32]	; (8001208 <BSP_LCD_SetBackColor+0x30>)
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	3304      	adds	r3, #4
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200002d4 	.word	0x200002d4
 8001208:	200002d8 	.word	0x200002d8

0800120c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <BSP_LCD_SetFont+0x2c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4908      	ldr	r1, [pc, #32]	; (800123c <BSP_LCD_SetFont+0x30>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	3308      	adds	r3, #8
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200002d4 	.word	0x200002d4
 800123c:	200002d8 	.word	0x200002d8

08001240 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af02      	add	r7, sp, #8
 8001246:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <BSP_LCD_Clear+0x48>)
 800124a:	681c      	ldr	r4, [r3, #0]
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <BSP_LCD_Clear+0x48>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <BSP_LCD_Clear+0x4c>)
 8001252:	2134      	movs	r1, #52	; 0x34
 8001254:	fb01 f303 	mul.w	r3, r1, r3
 8001258:	4413      	add	r3, r2
 800125a:	335c      	adds	r3, #92	; 0x5c
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461e      	mov	r6, r3
 8001260:	f7ff ff16 	bl	8001090 <BSP_LCD_GetXSize>
 8001264:	4605      	mov	r5, r0
 8001266:	f7ff ff1f 	bl	80010a8 <BSP_LCD_GetYSize>
 800126a:	4602      	mov	r2, r0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2300      	movs	r3, #0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	462a      	mov	r2, r5
 8001278:	4631      	mov	r1, r6
 800127a:	4620      	mov	r0, r4
 800127c:	f000 fad0 	bl	8001820 <FillBuffer>
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001288:	200002d4 	.word	0x200002d4
 800128c:	200001bc 	.word	0x200001bc

08001290 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	460b      	mov	r3, r1
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <BSP_LCD_DisplayChar+0x80>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	491b      	ldr	r1, [pc, #108]	; (8001314 <BSP_LCD_DisplayChar+0x84>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	3308      	adds	r3, #8
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <BSP_LCD_DisplayChar+0x80>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4c14      	ldr	r4, [pc, #80]	; (8001314 <BSP_LCD_DisplayChar+0x84>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4423      	add	r3, r4
 80012ce:	3308      	adds	r3, #8
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012d4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <BSP_LCD_DisplayChar+0x80>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4c0d      	ldr	r4, [pc, #52]	; (8001314 <BSP_LCD_DisplayChar+0x84>)
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4423      	add	r3, r4
 80012e8:	3308      	adds	r3, #8
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	3307      	adds	r3, #7
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da00      	bge.n	80012f6 <BSP_LCD_DisplayChar+0x66>
 80012f4:	3307      	adds	r3, #7
 80012f6:	10db      	asrs	r3, r3, #3
 80012f8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012fc:	18ca      	adds	r2, r1, r3
 80012fe:	88b9      	ldrh	r1, [r7, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f9d2 	bl	80016ac <DrawChar>
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	200002d4 	.word	0x200002d4
 8001314:	200002d8 	.word	0x200002d8

08001318 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	461a      	mov	r2, r3
 8001322:	4603      	mov	r3, r0
 8001324:	81fb      	strh	r3, [r7, #14]
 8001326:	460b      	mov	r3, r1
 8001328:	81bb      	strh	r3, [r7, #12]
 800132a:	4613      	mov	r3, r2
 800132c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800132e:	2301      	movs	r3, #1
 8001330:	83fb      	strh	r3, [r7, #30]
 8001332:	2300      	movs	r3, #0
 8001334:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001342:	e002      	b.n	800134a <BSP_LCD_DisplayStringAt+0x32>
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	3301      	adds	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	617a      	str	r2, [r7, #20]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f6      	bne.n	8001344 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001356:	f7ff fe9b 	bl	8001090 <BSP_LCD_GetXSize>
 800135a:	4601      	mov	r1, r0
 800135c:	4b4b      	ldr	r3, [pc, #300]	; (800148c <BSP_LCD_DisplayStringAt+0x174>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	484b      	ldr	r0, [pc, #300]	; (8001490 <BSP_LCD_DisplayStringAt+0x178>)
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4403      	add	r3, r0
 800136c:	3308      	adds	r3, #8
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	889b      	ldrh	r3, [r3, #4]
 8001372:	fbb1 f3f3 	udiv	r3, r1, r3
 8001376:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d01c      	beq.n	80013b8 <BSP_LCD_DisplayStringAt+0xa0>
 800137e:	2b03      	cmp	r3, #3
 8001380:	dc33      	bgt.n	80013ea <BSP_LCD_DisplayStringAt+0xd2>
 8001382:	2b01      	cmp	r3, #1
 8001384:	d002      	beq.n	800138c <BSP_LCD_DisplayStringAt+0x74>
 8001386:	2b02      	cmp	r3, #2
 8001388:	d019      	beq.n	80013be <BSP_LCD_DisplayStringAt+0xa6>
 800138a:	e02e      	b.n	80013ea <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad1      	subs	r1, r2, r3
 8001392:	4b3e      	ldr	r3, [pc, #248]	; (800148c <BSP_LCD_DisplayStringAt+0x174>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	483e      	ldr	r0, [pc, #248]	; (8001490 <BSP_LCD_DisplayStringAt+0x178>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4403      	add	r3, r0
 80013a2:	3308      	adds	r3, #8
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	889b      	ldrh	r3, [r3, #4]
 80013a8:	fb01 f303 	mul.w	r3, r1, r3
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	4413      	add	r3, r2
 80013b4:	83fb      	strh	r3, [r7, #30]
      break;
 80013b6:	e01b      	b.n	80013f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	83fb      	strh	r3, [r7, #30]
      break;
 80013bc:	e018      	b.n	80013f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b299      	uxth	r1, r3
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <BSP_LCD_DisplayStringAt+0x174>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4831      	ldr	r0, [pc, #196]	; (8001490 <BSP_LCD_DisplayStringAt+0x178>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4403      	add	r3, r0
 80013d6:	3308      	adds	r3, #8
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	889b      	ldrh	r3, [r3, #4]
 80013dc:	fb11 f303 	smulbb	r3, r1, r3
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	89fb      	ldrh	r3, [r7, #14]
 80013e4:	4413      	add	r3, r2
 80013e6:	83fb      	strh	r3, [r7, #30]
      break;
 80013e8:	e002      	b.n	80013f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	83fb      	strh	r3, [r7, #30]
      break;
 80013ee:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80013f0:	e01a      	b.n	8001428 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	89b9      	ldrh	r1, [r7, #12]
 80013f8:	8bfb      	ldrh	r3, [r7, #30]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff48 	bl	8001290 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <BSP_LCD_DisplayStringAt+0x174>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4922      	ldr	r1, [pc, #136]	; (8001490 <BSP_LCD_DisplayStringAt+0x178>)
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	3308      	adds	r3, #8
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	889a      	ldrh	r2, [r3, #4]
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	4413      	add	r3, r2
 800141a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3301      	adds	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
    i++;
 8001422:	8bbb      	ldrh	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf14      	ite	ne
 8001430:	2301      	movne	r3, #1
 8001432:	2300      	moveq	r3, #0
 8001434:	b2dc      	uxtb	r4, r3
 8001436:	f7ff fe2b 	bl	8001090 <BSP_LCD_GetXSize>
 800143a:	8bb9      	ldrh	r1, [r7, #28]
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <BSP_LCD_DisplayStringAt+0x174>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4d13      	ldr	r5, [pc, #76]	; (8001490 <BSP_LCD_DisplayStringAt+0x178>)
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	442b      	add	r3, r5
 800144c:	3308      	adds	r3, #8
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	889b      	ldrh	r3, [r3, #4]
 8001452:	fb01 f303 	mul.w	r3, r1, r3
 8001456:	1ac3      	subs	r3, r0, r3
 8001458:	b299      	uxth	r1, r3
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <BSP_LCD_DisplayStringAt+0x174>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <BSP_LCD_DisplayStringAt+0x178>)
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4403      	add	r3, r0
 800146a:	3308      	adds	r3, #8
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	889b      	ldrh	r3, [r3, #4]
 8001470:	4299      	cmp	r1, r3
 8001472:	bf2c      	ite	cs
 8001474:	2301      	movcs	r3, #1
 8001476:	2300      	movcc	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4023      	ands	r3, r4
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1b7      	bne.n	80013f2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bdb0      	pop	{r4, r5, r7, pc}
 800148c:	200002d4 	.word	0x200002d4
 8001490:	200002d8 	.word	0x200002d8

08001494 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <BSP_LCD_DisplayOn+0x1c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <BSP_LCD_DisplayOn+0x1c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4798      	blx	r3
  }
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200002f0 	.word	0x200002f0

080014b4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	; 0x38
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
 80014be:	4b61      	ldr	r3, [pc, #388]	; (8001644 <BSP_LCD_MspInit+0x190>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a60      	ldr	r2, [pc, #384]	; (8001644 <BSP_LCD_MspInit+0x190>)
 80014c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b5e      	ldr	r3, [pc, #376]	; (8001644 <BSP_LCD_MspInit+0x190>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	4b5a      	ldr	r3, [pc, #360]	; (8001644 <BSP_LCD_MspInit+0x190>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a59      	ldr	r2, [pc, #356]	; (8001644 <BSP_LCD_MspInit+0x190>)
 80014e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b57      	ldr	r3, [pc, #348]	; (8001644 <BSP_LCD_MspInit+0x190>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	4b53      	ldr	r3, [pc, #332]	; (8001644 <BSP_LCD_MspInit+0x190>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a52      	ldr	r2, [pc, #328]	; (8001644 <BSP_LCD_MspInit+0x190>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b50      	ldr	r3, [pc, #320]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b45      	ldr	r3, [pc, #276]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a44      	ldr	r2, [pc, #272]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <BSP_LCD_MspInit+0x190>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <BSP_LCD_MspInit+0x190>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a3d      	ldr	r2, [pc, #244]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a36      	ldr	r2, [pc, #216]	; (8001644 <BSP_LCD_MspInit+0x190>)
 800156c:	f043 0320 	orr.w	r3, r3, #32
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <BSP_LCD_MspInit+0x190>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800159a:	f641 0358 	movw	r3, #6232	; 0x1858
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80015a8:	2302      	movs	r3, #2
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80015ac:	230e      	movs	r3, #14
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	4824      	ldr	r0, [pc, #144]	; (8001648 <BSP_LCD_MspInit+0x194>)
 80015b8:	f001 f930 	bl	800281c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80015bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4820      	ldr	r0, [pc, #128]	; (800164c <BSP_LCD_MspInit+0x198>)
 80015ca:	f001 f927 	bl	800281c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80015ce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	481d      	ldr	r0, [pc, #116]	; (8001650 <BSP_LCD_MspInit+0x19c>)
 80015dc:	f001 f91e 	bl	800281c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80015e0:	2348      	movs	r3, #72	; 0x48
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	481a      	ldr	r0, [pc, #104]	; (8001654 <BSP_LCD_MspInit+0x1a0>)
 80015ec:	f001 f916 	bl	800281c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80015f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	4816      	ldr	r0, [pc, #88]	; (8001658 <BSP_LCD_MspInit+0x1a4>)
 80015fe:	f001 f90d 	bl	800281c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001602:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <BSP_LCD_MspInit+0x1a8>)
 8001610:	f001 f904 	bl	800281c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001614:	2303      	movs	r3, #3
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001618:	2309      	movs	r3, #9
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	480a      	ldr	r0, [pc, #40]	; (800164c <BSP_LCD_MspInit+0x198>)
 8001624:	f001 f8fa 	bl	800281c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <BSP_LCD_MspInit+0x1a8>)
 8001636:	f001 f8f1 	bl	800281c <HAL_GPIO_Init>
}
 800163a:	bf00      	nop
 800163c:	3738      	adds	r7, #56	; 0x38
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40021400 	.word	0x40021400
 800165c:	40021800 	.word	0x40021800

08001660 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	603a      	str	r2, [r7, #0]
 800166a:	80fb      	strh	r3, [r7, #6]
 800166c:	460b      	mov	r3, r1
 800166e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <BSP_LCD_DrawPixel+0x44>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <BSP_LCD_DrawPixel+0x48>)
 8001676:	2134      	movs	r1, #52	; 0x34
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	335c      	adds	r3, #92	; 0x5c
 8001680:	681c      	ldr	r4, [r3, #0]
 8001682:	88bd      	ldrh	r5, [r7, #4]
 8001684:	f7ff fd04 	bl	8001090 <BSP_LCD_GetXSize>
 8001688:	4603      	mov	r3, r0
 800168a:	fb03 f205 	mul.w	r2, r3, r5
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4423      	add	r3, r4
 8001696:	461a      	mov	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	200002d4 	.word	0x200002d4
 80016a8:	200001bc 	.word	0x200001bc

080016ac <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	603a      	str	r2, [r7, #0]
 80016b6:	80fb      	strh	r3, [r7, #6]
 80016b8:	460b      	mov	r3, r1
 80016ba:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80016c8:	4b53      	ldr	r3, [pc, #332]	; (8001818 <DrawChar+0x16c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4953      	ldr	r1, [pc, #332]	; (800181c <DrawChar+0x170>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	3308      	adds	r3, #8
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	88db      	ldrh	r3, [r3, #6]
 80016de:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80016e0:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <DrawChar+0x16c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	494d      	ldr	r1, [pc, #308]	; (800181c <DrawChar+0x170>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3308      	adds	r3, #8
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	889b      	ldrh	r3, [r3, #4]
 80016f6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80016f8:	8a3b      	ldrh	r3, [r7, #16]
 80016fa:	3307      	adds	r3, #7
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da00      	bge.n	8001702 <DrawChar+0x56>
 8001700:	3307      	adds	r3, #7
 8001702:	10db      	asrs	r3, r3, #3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	b2da      	uxtb	r2, r3
 800170a:	8a3b      	ldrh	r3, [r7, #16]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e076      	b.n	8001806 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001718:	8a3b      	ldrh	r3, [r7, #16]
 800171a:	3307      	adds	r3, #7
 800171c:	2b00      	cmp	r3, #0
 800171e:	da00      	bge.n	8001722 <DrawChar+0x76>
 8001720:	3307      	adds	r3, #7
 8001722:	10db      	asrs	r3, r3, #3
 8001724:	461a      	mov	r2, r3
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	4413      	add	r3, r2
 8001730:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001732:	8a3b      	ldrh	r3, [r7, #16]
 8001734:	3307      	adds	r3, #7
 8001736:	2b00      	cmp	r3, #0
 8001738:	da00      	bge.n	800173c <DrawChar+0x90>
 800173a:	3307      	adds	r3, #7
 800173c:	10db      	asrs	r3, r3, #3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d002      	beq.n	8001748 <DrawChar+0x9c>
 8001742:	2b02      	cmp	r3, #2
 8001744:	d004      	beq.n	8001750 <DrawChar+0xa4>
 8001746:	e00c      	b.n	8001762 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	617b      	str	r3, [r7, #20]
      break;
 800174e:	e016      	b.n	800177e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	3201      	adds	r2, #1
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	4313      	orrs	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
      break;
 8001760:	e00d      	b.n	800177e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	041a      	lsls	r2, r3, #16
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	3301      	adds	r3, #1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	4313      	orrs	r3, r2
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	3202      	adds	r2, #2
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
      break;
 800177c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	e036      	b.n	80017f2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001784:	8a3a      	ldrh	r2, [r7, #16]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	1ad2      	subs	r2, r2, r3
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	4413      	add	r3, r2
 800178e:	3b01      	subs	r3, #1
 8001790:	2201      	movs	r2, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	461a      	mov	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d012      	beq.n	80017c6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	4413      	add	r3, r2
 80017a8:	b298      	uxth	r0, r3
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <DrawChar+0x16c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	491b      	ldr	r1, [pc, #108]	; (800181c <DrawChar+0x170>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff ff4e 	bl	8001660 <BSP_LCD_DrawPixel>
 80017c4:	e012      	b.n	80017ec <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4413      	add	r3, r2
 80017ce:	b298      	uxth	r0, r3
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <DrawChar+0x16c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4911      	ldr	r1, [pc, #68]	; (800181c <DrawChar+0x170>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	3304      	adds	r3, #4
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	88bb      	ldrh	r3, [r7, #4]
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff ff3a 	bl	8001660 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	3301      	adds	r3, #1
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	8a3b      	ldrh	r3, [r7, #16]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3c4      	bcc.n	8001784 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	8a7b      	ldrh	r3, [r7, #18]
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	429a      	cmp	r2, r3
 800180c:	d384      	bcc.n	8001718 <DrawChar+0x6c>
  }
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200002d4 	.word	0x200002d4
 800181c:	200002d8 	.word	0x200002d8

08001820 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <FillBuffer+0x68>)
 8001830:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001834:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <FillBuffer+0x68>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <FillBuffer+0x68>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <FillBuffer+0x68>)
 8001844:	4a11      	ldr	r2, [pc, #68]	; (800188c <FillBuffer+0x6c>)
 8001846:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001848:	480f      	ldr	r0, [pc, #60]	; (8001888 <FillBuffer+0x68>)
 800184a:	f000 fd51 	bl	80022f0 <HAL_DMA2D_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d115      	bne.n	8001880 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <FillBuffer+0x68>)
 8001858:	f000 feb2 	bl	80025c0 <HAL_DMA2D_ConfigLayer>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10e      	bne.n	8001880 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69f9      	ldr	r1, [r7, #28]
 800186c:	4806      	ldr	r0, [pc, #24]	; (8001888 <FillBuffer+0x68>)
 800186e:	f000 fd92 	bl	8002396 <HAL_DMA2D_Start>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d103      	bne.n	8001880 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001878:	210a      	movs	r1, #10
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <FillBuffer+0x68>)
 800187c:	f000 fdb6 	bl	80023ec <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000264 	.word	0x20000264
 800188c:	4002b000 	.word	0x4002b000

08001890 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <BSP_SDRAM_Init+0xac>)
 8001896:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <BSP_SDRAM_Init+0xb0>)
 8001898:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <BSP_SDRAM_Init+0xb4>)
 800189c:	2202      	movs	r2, #2
 800189e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <BSP_SDRAM_Init+0xb4>)
 80018a2:	2207      	movs	r2, #7
 80018a4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <BSP_SDRAM_Init+0xb4>)
 80018a8:	2204      	movs	r2, #4
 80018aa:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <BSP_SDRAM_Init+0xb4>)
 80018ae:	2207      	movs	r2, #7
 80018b0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <BSP_SDRAM_Init+0xb4>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <BSP_SDRAM_Init+0xb4>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <BSP_SDRAM_Init+0xb4>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <BSP_SDRAM_Init+0xac>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <BSP_SDRAM_Init+0xac>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <BSP_SDRAM_Init+0xac>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <BSP_SDRAM_Init+0xac>)
 80018d8:	2210      	movs	r2, #16
 80018da:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <BSP_SDRAM_Init+0xac>)
 80018de:	2240      	movs	r2, #64	; 0x40
 80018e0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <BSP_SDRAM_Init+0xac>)
 80018e4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80018e8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <BSP_SDRAM_Init+0xac>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <BSP_SDRAM_Init+0xac>)
 80018f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <BSP_SDRAM_Init+0xac>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <BSP_SDRAM_Init+0xac>)
 8001900:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001906:	2100      	movs	r1, #0
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <BSP_SDRAM_Init+0xac>)
 800190a:	f000 f87f 	bl	8001a0c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800190e:	490d      	ldr	r1, [pc, #52]	; (8001944 <BSP_SDRAM_Init+0xb4>)
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <BSP_SDRAM_Init+0xac>)
 8001912:	f003 fccf 	bl	80052b4 <HAL_SDRAM_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <BSP_SDRAM_Init+0xb8>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e002      	b.n	800192a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <BSP_SDRAM_Init+0xb8>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800192a:	f240 506a 	movw	r0, #1386	; 0x56a
 800192e:	f000 f80d 	bl	800194c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <BSP_SDRAM_Init+0xb8>)
 8001934:	781b      	ldrb	r3, [r3, #0]
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200002f4 	.word	0x200002f4
 8001940:	a0000140 	.word	0xa0000140
 8001944:	20000328 	.word	0x20000328
 8001948:	20000048 	.word	0x20000048

0800194c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001960:	2208      	movs	r2, #8
 8001962:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001966:	2201      	movs	r2, #1
 8001968:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001974:	4923      	ldr	r1, [pc, #140]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001976:	4824      	ldr	r0, [pc, #144]	; (8001a08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001978:	f003 fcda 	bl	8005330 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800197c:	2001      	movs	r0, #1
 800197e:	f000 f9c3 	bl	8001d08 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001984:	2202      	movs	r2, #2
 8001986:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800198a:	2208      	movs	r2, #8
 800198c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001990:	2201      	movs	r2, #1
 8001992:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800199a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199e:	4919      	ldr	r1, [pc, #100]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019a0:	4819      	ldr	r0, [pc, #100]	; (8001a08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80019a2:	f003 fcc5 	bl	8005330 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019a8:	2203      	movs	r2, #3
 80019aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019ae:	2208      	movs	r2, #8
 80019b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019b4:	2204      	movs	r2, #4
 80019b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80019be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c2:	4910      	ldr	r1, [pc, #64]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019c4:	4810      	ldr	r0, [pc, #64]	; (8001a08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80019c6:	f003 fcb3 	bl	8005330 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80019ca:	f44f 730c 	mov.w	r3, #560	; 0x230
 80019ce:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019d8:	2208      	movs	r2, #8
 80019da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019de:	2201      	movs	r2, #1
 80019e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019e6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80019e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ec:	4905      	ldr	r1, [pc, #20]	; (8001a04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80019f0:	f003 fc9e 	bl	8005330 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80019f8:	f003 fccf 	bl	800539a <HAL_SDRAM_ProgramRefreshRate>
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000344 	.word	0x20000344
 8001a08:	200002f4 	.word	0x200002f4

08001a0c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b090      	sub	sp, #64	; 0x40
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80ec 	beq.w	8001bf6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a22:	4b77      	ldr	r3, [pc, #476]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	4a76      	ldr	r2, [pc, #472]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6393      	str	r3, [r2, #56]	; 0x38
 8001a2e:	4b74      	ldr	r3, [pc, #464]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a6f      	ldr	r2, [pc, #444]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	4b69      	ldr	r3, [pc, #420]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a68      	ldr	r2, [pc, #416]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a61      	ldr	r2, [pc, #388]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b5f      	ldr	r3, [pc, #380]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b58      	ldr	r3, [pc, #352]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	4b54      	ldr	r3, [pc, #336]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a53      	ldr	r2, [pc, #332]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001ab4:	f043 0310 	orr.w	r3, r3, #16
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a4c      	ldr	r2, [pc, #304]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001ad0:	f043 0320 	orr.w	r3, r3, #32
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a45      	ldr	r2, [pc, #276]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <BSP_SDRAM_MspInit+0x1f4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001b02:	2302      	movs	r3, #2
 8001b04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001b0a:	230c      	movs	r3, #12
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001b0e:	2360      	movs	r3, #96	; 0x60
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b16:	4619      	mov	r1, r3
 8001b18:	483a      	ldr	r0, [pc, #232]	; (8001c04 <BSP_SDRAM_MspInit+0x1f8>)
 8001b1a:	f000 fe7f 	bl	800281c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001b1e:	2301      	movs	r3, #1
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b26:	4619      	mov	r1, r3
 8001b28:	4837      	ldr	r0, [pc, #220]	; (8001c08 <BSP_SDRAM_MspInit+0x1fc>)
 8001b2a:	f000 fe77 	bl	800281c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001b2e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4834      	ldr	r0, [pc, #208]	; (8001c0c <BSP_SDRAM_MspInit+0x200>)
 8001b3c:	f000 fe6e 	bl	800281c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001b40:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4830      	ldr	r0, [pc, #192]	; (8001c10 <BSP_SDRAM_MspInit+0x204>)
 8001b4e:	f000 fe65 	bl	800281c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001b52:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482d      	ldr	r0, [pc, #180]	; (8001c14 <BSP_SDRAM_MspInit+0x208>)
 8001b60:	f000 fe5c 	bl	800281c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001b64:	f248 1333 	movw	r3, #33075	; 0x8133
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4829      	ldr	r0, [pc, #164]	; (8001c18 <BSP_SDRAM_MspInit+0x20c>)
 8001b72:	f000 fe53 	bl	800281c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b90:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b92:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b98:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001b9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bae:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001bb8:	2203      	movs	r2, #3
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <BSP_SDRAM_MspInit+0x214>)
 8001bcc:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001bda:	4810      	ldr	r0, [pc, #64]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001bdc:	f000 fa78 	bl	80020d0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001be0:	480e      	ldr	r0, [pc, #56]	; (8001c1c <BSP_SDRAM_MspInit+0x210>)
 8001be2:	f000 f9c7 	bl	8001f74 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	210f      	movs	r1, #15
 8001bea:	2038      	movs	r0, #56	; 0x38
 8001bec:	f000 f98b 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001bf0:	2038      	movs	r0, #56	; 0x38
 8001bf2:	f000 f9a4 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001bf6:	bf00      	nop
 8001bf8:	3740      	adds	r7, #64	; 0x40
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40021400 	.word	0x40021400
 8001c18:	40021800 	.word	0x40021800
 8001c1c:	20000354 	.word	0x20000354
 8001c20:	40026410 	.word	0x40026410

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_Init+0x40>)
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_Init+0x40>)
 8001c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <HAL_Init+0x40>)
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f000 f94f 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c52:	200f      	movs	r0, #15
 8001c54:	f000 f808 	bl	8001c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c58:	f7fe fdbe 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x54>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x58>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f967 	bl	8001f5a <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00e      	b.n	8001cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d80a      	bhi.n	8001cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f000 f92f 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca8:	4a06      	ldr	r2, [pc, #24]	; (8001cc4 <HAL_InitTick+0x5c>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000050 	.word	0x20000050
 8001cc4:	2000004c 	.word	0x2000004c

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000050 	.word	0x20000050
 8001cec:	200003b4 	.word	0x200003b4

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	200003b4 	.word	0x200003b4

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000050 	.word	0x20000050

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff3e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff31 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff feb6 	bl	8001cf0 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e099      	b.n	80020c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb0:	e00f      	b.n	8001fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb2:	f7ff fe9d 	bl	8001cf0 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d908      	bls.n	8001fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e078      	b.n	80020c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e8      	bne.n	8001fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_DMA_Init+0x158>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2b04      	cmp	r3, #4
 800202a:	d107      	bne.n	800203c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4313      	orrs	r3, r2
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2b04      	cmp	r3, #4
 8002064:	d117      	bne.n	8002096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8bd 	bl	80021f8 <DMA_CheckFifoParam>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2240      	movs	r2, #64	; 0x40
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002092:	2301      	movs	r3, #1
 8002094:	e016      	b.n	80020c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f874 	bl	800218c <DMA_CalcBaseAndBitshift>
 80020a4:	4603      	mov	r3, r0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	223f      	movs	r2, #63	; 0x3f
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	f010803f 	.word	0xf010803f

080020d0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e050      	b.n	8002184 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d101      	bne.n	80020f2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	e048      	b.n	8002184 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2221      	movs	r2, #33	; 0x21
 8002130:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f82a 	bl	800218c <DMA_CalcBaseAndBitshift>
 8002138:	4603      	mov	r3, r0
 800213a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	223f      	movs	r2, #63	; 0x3f
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	3b10      	subs	r3, #16
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <DMA_CalcBaseAndBitshift+0x64>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <DMA_CalcBaseAndBitshift+0x68>)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d909      	bls.n	80021ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	1d1a      	adds	r2, r3, #4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58
 80021cc:	e007      	b.n	80021de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021d6:	f023 0303 	bic.w	r3, r3, #3
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	aaaaaaab 	.word	0xaaaaaaab
 80021f4:	0800c038 	.word	0x0800c038

080021f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11f      	bne.n	8002252 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d856      	bhi.n	80022c6 <DMA_CheckFifoParam+0xce>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <DMA_CheckFifoParam+0x28>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002231 	.word	0x08002231
 8002224:	08002243 	.word	0x08002243
 8002228:	08002231 	.word	0x08002231
 800222c:	080022c7 	.word	0x080022c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d046      	beq.n	80022ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002240:	e043      	b.n	80022ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800224a:	d140      	bne.n	80022ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002250:	e03d      	b.n	80022ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225a:	d121      	bne.n	80022a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d837      	bhi.n	80022d2 <DMA_CheckFifoParam+0xda>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <DMA_CheckFifoParam+0x70>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	08002279 	.word	0x08002279
 800226c:	0800227f 	.word	0x0800227f
 8002270:	08002279 	.word	0x08002279
 8002274:	08002291 	.word	0x08002291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e030      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d025      	beq.n	80022d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228e:	e022      	b.n	80022d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002298:	d11f      	bne.n	80022da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800229e:	e01c      	b.n	80022da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d903      	bls.n	80022ae <DMA_CheckFifoParam+0xb6>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d003      	beq.n	80022b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022ac:	e018      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
      break;
 80022b2:	e015      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      break;
 80022c4:	e00b      	b.n	80022de <DMA_CheckFifoParam+0xe6>
      break;
 80022c6:	bf00      	nop
 80022c8:	e00a      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e008      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e006      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e004      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e002      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022da:	bf00      	nop
 80022dc:	e000      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
    }
  } 
  
  return status; 
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop

080022f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e03b      	b.n	800237a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f833 	bl	8002382 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	f023 0107 	bic.w	r1, r3, #7
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800235a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d1      	ldr	r1, [r2, #12]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	430b      	orrs	r3, r1
 8002368:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af02      	add	r7, sp, #8
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_DMA2D_Start+0x1c>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e018      	b.n	80023e4 <HAL_DMA2D_Start+0x4e>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f989 	bl	80026e4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d056      	beq.n	80024b6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002408:	f7ff fc72 	bl	8001cf0 <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800240e:	e04b      	b.n	80024a8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800241e:	2b00      	cmp	r3, #0
 8002420:	d023      	beq.n	800246a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	f043 0202 	orr.w	r2, r3, #2
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2221      	movs	r2, #33	; 0x21
 8002454:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0a5      	b.n	80025b6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d01a      	beq.n	80024a8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002472:	f7ff fc3d 	bl	8001cf0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d302      	bcc.n	8002488 <HAL_DMA2D_PollForTransfer+0x9c>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10f      	bne.n	80024a8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2203      	movs	r2, #3
 8002498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e086      	b.n	80025b6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ac      	beq.n	8002410 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d061      	beq.n	800259c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80024d8:	f7ff fc0a 	bl	8001cf0 <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80024de:	e056      	b.n	800258e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d02e      	beq.n	8002550 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	f043 0204 	orr.w	r2, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	f043 0202 	orr.w	r2, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2229      	movs	r2, #41	; 0x29
 800253a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2204      	movs	r2, #4
 8002540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d01a      	beq.n	800258e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002558:	f7ff fbca 	bl	8001cf0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d302      	bcc.n	800256e <HAL_DMA2D_PollForTransfer+0x182>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10f      	bne.n	800258e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2203      	movs	r2, #3
 800257e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e013      	b.n	80025b6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0a1      	beq.n	80024e0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2212      	movs	r2, #18
 80025a2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_DMA2D_ConfigLayer+0x20>
 80025dc:	2302      	movs	r3, #2
 80025de:	e079      	b.n	80026d4 <HAL_DMA2D_ConfigLayer+0x114>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	3318      	adds	r3, #24
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800260a:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <HAL_DMA2D_ConfigLayer+0x120>)
 800260c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b0a      	cmp	r3, #10
 8002614:	d003      	beq.n	800261e <HAL_DMA2D_ConfigLayer+0x5e>
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b09      	cmp	r3, #9
 800261c:	d107      	bne.n	800262e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e005      	b.n	800263a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d120      	bne.n	8002682 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43db      	mvns	r3, r3
 800264a:	ea02 0103 	and.w	r1, r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	430a      	orrs	r2, r1
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b0a      	cmp	r3, #10
 8002668:	d003      	beq.n	8002672 <HAL_DMA2D_ConfigLayer+0xb2>
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b09      	cmp	r3, #9
 8002670:	d127      	bne.n	80026c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
 8002680:	e01f      	b.n	80026c2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43db      	mvns	r3, r3
 800268c:	ea02 0103 	and.w	r1, r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	430a      	orrs	r2, r1
 8002698:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b0a      	cmp	r3, #10
 80026aa:	d003      	beq.n	80026b4 <HAL_DMA2D_ConfigLayer+0xf4>
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b09      	cmp	r3, #9
 80026b2:	d106      	bne.n	80026c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80026c0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	ff03000f 	.word	0xff03000f

080026e4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b08b      	sub	sp, #44	; 0x2c
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	041a      	lsls	r2, r3, #16
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	431a      	orrs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800271c:	d174      	bne.n	8002808 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002724:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800272c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002734:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d108      	bne.n	8002756 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	431a      	orrs	r2, r3
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	4313      	orrs	r3, r2
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	e053      	b.n	80027fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d106      	bne.n	800276c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4313      	orrs	r3, r2
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	e048      	b.n	80027fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d111      	bne.n	8002798 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	0cdb      	lsrs	r3, r3, #19
 8002778:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	0a9b      	lsrs	r3, r3, #10
 800277e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	08db      	lsrs	r3, r3, #3
 8002784:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	02db      	lsls	r3, r3, #11
 800278e:	4313      	orrs	r3, r2
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	e032      	b.n	80027fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d117      	bne.n	80027d0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	0fdb      	lsrs	r3, r3, #31
 80027a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	0cdb      	lsrs	r3, r3, #19
 80027aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	431a      	orrs	r2, r3
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	03db      	lsls	r3, r3, #15
 80027c6:	4313      	orrs	r3, r2
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	e016      	b.n	80027fe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	0f1b      	lsrs	r3, r3, #28
 80027d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	0d1b      	lsrs	r3, r3, #20
 80027da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	0b1b      	lsrs	r3, r3, #12
 80027e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	011a      	lsls	r2, r3, #4
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	431a      	orrs	r2, r3
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	031b      	lsls	r3, r3, #12
 80027f6:	4313      	orrs	r3, r2
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002806:	e003      	b.n	8002810 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	60da      	str	r2, [r3, #12]
}
 8002810:	bf00      	nop
 8002812:	372c      	adds	r7, #44	; 0x2c
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e177      	b.n	8002b28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 8166 	bne.w	8002b22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d005      	beq.n	800286e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286a:	2b02      	cmp	r3, #2
 800286c:	d130      	bne.n	80028d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80c0 	beq.w	8002b22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <HAL_GPIO_Init+0x324>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a65      	ldr	r2, [pc, #404]	; (8002b40 <HAL_GPIO_Init+0x324>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_GPIO_Init+0x324>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029be:	4a61      	ldr	r2, [pc, #388]	; (8002b44 <HAL_GPIO_Init+0x328>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_GPIO_Init+0x32c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d037      	beq.n	8002a5a <HAL_GPIO_Init+0x23e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a57      	ldr	r2, [pc, #348]	; (8002b4c <HAL_GPIO_Init+0x330>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_GPIO_Init+0x23a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a56      	ldr	r2, [pc, #344]	; (8002b50 <HAL_GPIO_Init+0x334>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02b      	beq.n	8002a52 <HAL_GPIO_Init+0x236>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a55      	ldr	r2, [pc, #340]	; (8002b54 <HAL_GPIO_Init+0x338>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d025      	beq.n	8002a4e <HAL_GPIO_Init+0x232>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a54      	ldr	r2, [pc, #336]	; (8002b58 <HAL_GPIO_Init+0x33c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01f      	beq.n	8002a4a <HAL_GPIO_Init+0x22e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a53      	ldr	r2, [pc, #332]	; (8002b5c <HAL_GPIO_Init+0x340>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x22a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_GPIO_Init+0x344>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a51      	ldr	r2, [pc, #324]	; (8002b64 <HAL_GPIO_Init+0x348>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a50      	ldr	r2, [pc, #320]	; (8002b68 <HAL_GPIO_Init+0x34c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4f      	ldr	r2, [pc, #316]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a32:	2309      	movs	r3, #9
 8002a34:	e012      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a36:	230a      	movs	r3, #10
 8002a38:	e010      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	e00e      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3e:	2307      	movs	r3, #7
 8002a40:	e00c      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a42:	2306      	movs	r3, #6
 8002a44:	e00a      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a46:	2305      	movs	r3, #5
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a6c:	4935      	ldr	r1, [pc, #212]	; (8002b44 <HAL_GPIO_Init+0x328>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_GPIO_Init+0x354>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9e:	4a34      	ldr	r2, [pc, #208]	; (8002b70 <HAL_GPIO_Init+0x354>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa4:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <HAL_GPIO_Init+0x354>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac8:	4a29      	ldr	r2, [pc, #164]	; (8002b70 <HAL_GPIO_Init+0x354>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ace:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <HAL_GPIO_Init+0x354>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af2:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <HAL_GPIO_Init+0x354>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_GPIO_Init+0x354>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <HAL_GPIO_Init+0x354>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f ae84 	bls.w	8002838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40013800 	.word	0x40013800
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020800 	.word	0x40020800
 8002b54:	40020c00 	.word	0x40020c00
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40021400 	.word	0x40021400
 8002b60:	40021800 	.word	0x40021800
 8002b64:	40021c00 	.word	0x40021c00
 8002b68:	40022000 	.word	0x40022000
 8002b6c:	40022400 	.word	0x40022400
 8002b70:	40013c00 	.word	0x40013c00

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b90:	e003      	b.n	8002b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b92:	887b      	ldrh	r3, [r7, #2]
 8002b94:	041a      	lsls	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0bf      	b.n	8002d3a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8ba 	bl	8002d48 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002bea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6999      	ldr	r1, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6899      	ldr	r1, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <HAL_LTDC_Init+0x19c>)
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68d9      	ldr	r1, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_LTDC_Init+0x19c>)
 8002c4a:	400b      	ands	r3, r1
 8002c4c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68d9      	ldr	r1, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1a      	ldr	r2, [r3, #32]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6919      	ldr	r1, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_LTDC_Init+0x19c>)
 8002c78:	400b      	ands	r3, r1
 8002c7a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6919      	ldr	r1, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6959      	ldr	r1, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <HAL_LTDC_Init+0x19c>)
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6959      	ldr	r1, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0206 	orr.w	r2, r2, #6
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	f000f800 	.word	0xf000f800

08002d48 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d5c:	b5b0      	push	{r4, r5, r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_LTDC_ConfigLayer+0x1a>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e02c      	b.n	8002dd0 <HAL_LTDC_ConfigLayer+0x74>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2134      	movs	r1, #52	; 0x34
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4614      	mov	r4, r2
 8002d9a:	461d      	mov	r5, r3
 8002d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f83b 	bl	8002e2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bdb0      	pop	{r4, r5, r7, pc}

08002dd8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_LTDC_EnableDither+0x16>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e016      	b.n	8002e1c <HAL_LTDC_EnableDither+0x44>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_LTDC_EnableDither+0x50>)
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <HAL_LTDC_EnableDither+0x50>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40016800 	.word	0x40016800

08002e2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	0c1b      	lsrs	r3, r3, #16
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	4413      	add	r3, r2
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	01db      	lsls	r3, r3, #7
 8002e58:	4413      	add	r3, r2
 8002e5a:	3384      	adds	r3, #132	; 0x84
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	4611      	mov	r1, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	01d2      	lsls	r2, r2, #7
 8002e68:	440a      	add	r2, r1
 8002e6a:	3284      	adds	r2, #132	; 0x84
 8002e6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002e70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002e82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	01db      	lsls	r3, r3, #7
 8002e90:	440b      	add	r3, r1
 8002e92:	3384      	adds	r3, #132	; 0x84
 8002e94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002e9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eaa:	4413      	add	r3, r2
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	01db      	lsls	r3, r3, #7
 8002eba:	4413      	add	r3, r2
 8002ebc:	3384      	adds	r3, #132	; 0x84
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	01d2      	lsls	r2, r2, #7
 8002eca:	440a      	add	r2, r1
 8002ecc:	3284      	adds	r2, #132	; 0x84
 8002ece:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002ed2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee2:	4413      	add	r3, r2
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	01db      	lsls	r3, r3, #7
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3384      	adds	r3, #132	; 0x84
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	01db      	lsls	r3, r3, #7
 8002f06:	4413      	add	r3, r2
 8002f08:	3384      	adds	r3, #132	; 0x84
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	4611      	mov	r1, r2
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	01d2      	lsls	r2, r2, #7
 8002f16:	440a      	add	r2, r1
 8002f18:	3284      	adds	r2, #132	; 0x84
 8002f1a:	f023 0307 	bic.w	r3, r3, #7
 8002f1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	01db      	lsls	r3, r3, #7
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3384      	adds	r3, #132	; 0x84
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	061b      	lsls	r3, r3, #24
 8002f50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	01db      	lsls	r3, r3, #7
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3384      	adds	r3, #132	; 0x84
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	01db      	lsls	r3, r3, #7
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3384      	adds	r3, #132	; 0x84
 8002f70:	461a      	mov	r2, r3
 8002f72:	2300      	movs	r3, #0
 8002f74:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	01db      	lsls	r3, r3, #7
 8002f90:	440b      	add	r3, r1
 8002f92:	3384      	adds	r3, #132	; 0x84
 8002f94:	4619      	mov	r1, r3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	01db      	lsls	r3, r3, #7
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3384      	adds	r3, #132	; 0x84
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	01d2      	lsls	r2, r2, #7
 8002fb6:	440a      	add	r2, r1
 8002fb8:	3284      	adds	r2, #132	; 0x84
 8002fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	01db      	lsls	r3, r3, #7
 8002fca:	4413      	add	r3, r2
 8002fcc:	3384      	adds	r3, #132	; 0x84
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	01db      	lsls	r3, r3, #7
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3384      	adds	r3, #132	; 0x84
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	4611      	mov	r1, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	01d2      	lsls	r2, r2, #7
 8002ff0:	440a      	add	r2, r1
 8002ff2:	3284      	adds	r2, #132	; 0x84
 8002ff4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ff8:	f023 0307 	bic.w	r3, r3, #7
 8002ffc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	68f9      	ldr	r1, [r7, #12]
 8003008:	6809      	ldr	r1, [r1, #0]
 800300a:	4608      	mov	r0, r1
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	01c9      	lsls	r1, r1, #7
 8003010:	4401      	add	r1, r0
 8003012:	3184      	adds	r1, #132	; 0x84
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	01db      	lsls	r3, r3, #7
 8003022:	4413      	add	r3, r2
 8003024:	3384      	adds	r3, #132	; 0x84
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	01db      	lsls	r3, r3, #7
 8003032:	4413      	add	r3, r2
 8003034:	3384      	adds	r3, #132	; 0x84
 8003036:	461a      	mov	r2, r3
 8003038:	2300      	movs	r3, #0
 800303a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	01db      	lsls	r3, r3, #7
 8003046:	4413      	add	r3, r2
 8003048:	3384      	adds	r3, #132	; 0x84
 800304a:	461a      	mov	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800305a:	2304      	movs	r3, #4
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e01b      	b.n	8003098 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003068:	2303      	movs	r3, #3
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	e014      	b.n	8003098 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b04      	cmp	r3, #4
 8003074:	d00b      	beq.n	800308e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800307a:	2b02      	cmp	r3, #2
 800307c:	d007      	beq.n	800308e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003082:	2b03      	cmp	r3, #3
 8003084:	d003      	beq.n	800308e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800308a:	2b07      	cmp	r3, #7
 800308c:	d102      	bne.n	8003094 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800308e:	2302      	movs	r3, #2
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e001      	b.n	8003098 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003094:	2301      	movs	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	01db      	lsls	r3, r3, #7
 80030a2:	4413      	add	r3, r2
 80030a4:	3384      	adds	r3, #132	; 0x84
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	4611      	mov	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	01d2      	lsls	r2, r2, #7
 80030b2:	440a      	add	r2, r1
 80030b4:	3284      	adds	r2, #132	; 0x84
 80030b6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80030ba:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	1acb      	subs	r3, r1, r3
 80030d2:	69f9      	ldr	r1, [r7, #28]
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	6809      	ldr	r1, [r1, #0]
 80030de:	4608      	mov	r0, r1
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	01c9      	lsls	r1, r1, #7
 80030e4:	4401      	add	r1, r0
 80030e6:	3184      	adds	r1, #132	; 0x84
 80030e8:	4313      	orrs	r3, r2
 80030ea:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	01db      	lsls	r3, r3, #7
 80030f6:	4413      	add	r3, r2
 80030f8:	3384      	adds	r3, #132	; 0x84
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	4611      	mov	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	01d2      	lsls	r2, r2, #7
 8003106:	440a      	add	r2, r1
 8003108:	3284      	adds	r2, #132	; 0x84
 800310a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800310e:	f023 0307 	bic.w	r3, r3, #7
 8003112:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	01db      	lsls	r3, r3, #7
 800311e:	4413      	add	r3, r2
 8003120:	3384      	adds	r3, #132	; 0x84
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	4413      	add	r3, r2
 8003136:	3384      	adds	r3, #132	; 0x84
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	4611      	mov	r1, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	01d2      	lsls	r2, r2, #7
 8003144:	440a      	add	r2, r1
 8003146:	3284      	adds	r2, #132	; 0x84
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6013      	str	r3, [r2, #0]
}
 800314e:	bf00      	nop
 8003150:	3724      	adds	r7, #36	; 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800315a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315c:	b08f      	sub	sp, #60	; 0x3c
 800315e:	af0a      	add	r7, sp, #40	; 0x28
 8003160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e10f      	b.n	800338c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f006 fe58 	bl	8009e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2203      	movs	r2, #3
 8003190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 f93f 	bl	800642e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	687e      	ldr	r6, [r7, #4]
 80031b8:	466d      	mov	r5, sp
 80031ba:	f106 0410 	add.w	r4, r6, #16
 80031be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ce:	1d33      	adds	r3, r6, #4
 80031d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d2:	6838      	ldr	r0, [r7, #0]
 80031d4:	f003 f816 	bl	8006204 <USB_CoreInit>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0d0      	b.n	800338c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 f92d 	bl	8006450 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	e04a      	b.n	8003292 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	333d      	adds	r3, #61	; 0x3d
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	333c      	adds	r3, #60	; 0x3c
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	b298      	uxth	r0, r3
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3344      	adds	r3, #68	; 0x44
 8003238:	4602      	mov	r2, r0
 800323a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3340      	adds	r3, #64	; 0x40
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3348      	adds	r3, #72	; 0x48
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334c      	adds	r3, #76	; 0x4c
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3354      	adds	r3, #84	; 0x54
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	3301      	adds	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d3af      	bcc.n	80031fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e044      	b.n	800332c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3301      	adds	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	d3b5      	bcc.n	80032a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	687e      	ldr	r6, [r7, #4]
 800333e:	466d      	mov	r5, sp
 8003340:	f106 0410 	add.w	r4, r6, #16
 8003344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800334a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800334c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003350:	e885 0003 	stmia.w	r5, {r0, r1}
 8003354:	1d33      	adds	r3, r6, #4
 8003356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	f003 f8c5 	bl	80064e8 <USB_DevInit>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e00d      	b.n	800338c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f004 fa14 	bl	80077b2 <USB_DevDisconnect>

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003394 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_PCD_Start+0x1c>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e020      	b.n	80033f2 <HAL_PCD_Start+0x5e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d109      	bne.n	80033d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d005      	beq.n	80033d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 f817 	bl	800640c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 f9c4 	bl	8007770 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033fa:	b590      	push	{r4, r7, lr}
 80033fc:	b08d      	sub	sp, #52	; 0x34
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 fa82 	bl	800791a <USB_GetMode>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 848a 	bne.w	8003d32 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f004 f9e6 	bl	80077f4 <USB_ReadInterrupts>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8480 	beq.w	8003d30 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f004 f9d3 	bl	80077f4 <USB_ReadInterrupts>
 800344e:	4603      	mov	r3, r0
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d107      	bne.n	8003468 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f002 0202 	and.w	r2, r2, #2
 8003466:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f004 f9c1 	bl	80077f4 <USB_ReadInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d161      	bne.n	8003540 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0210 	bic.w	r2, r2, #16
 800348a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 020f 	and.w	r2, r3, #15
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	0c5b      	lsrs	r3, r3, #17
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d124      	bne.n	8003502 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d035      	beq.n	8003530 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	6a38      	ldr	r0, [r7, #32]
 80034d8:	f003 fff8 	bl	80074cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e8:	441a      	add	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	6a1a      	ldr	r2, [r3, #32]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fa:	441a      	add	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	621a      	str	r2, [r3, #32]
 8003500:	e016      	b.n	8003530 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	0c5b      	lsrs	r3, r3, #17
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	2b06      	cmp	r3, #6
 800350c:	d110      	bne.n	8003530 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003514:	2208      	movs	r2, #8
 8003516:	4619      	mov	r1, r3
 8003518:	6a38      	ldr	r0, [r7, #32]
 800351a:	f003 ffd7 	bl	80074cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800352a:	441a      	add	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0210 	orr.w	r2, r2, #16
 800353e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f004 f955 	bl	80077f4 <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003550:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003554:	f040 80a7 	bne.w	80036a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f004 f95a 	bl	800781a <USB_ReadDevAllOutEpInterrupt>
 8003566:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003568:	e099      	b.n	800369e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 808e 	beq.w	8003692 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f004 f97e 	bl	8007882 <USB_ReadDevOutEPInterrupt>
 8003586:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359e:	461a      	mov	r2, r3
 80035a0:	2301      	movs	r3, #1
 80035a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fec2 	bl	8004330 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c2:	461a      	mov	r2, r3
 80035c4:	2308      	movs	r3, #8
 80035c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 ff98 	bl	8004500 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e6:	461a      	mov	r2, r3
 80035e8:	2310      	movs	r3, #16
 80035ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d030      	beq.n	8003658 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d109      	bne.n	8003616 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003614:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	78db      	ldrb	r3, [r3, #3]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d108      	bne.n	8003646 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	b2db      	uxtb	r3, r3
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f006 fcfd 	bl	800a040 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	461a      	mov	r2, r3
 8003654:	2302      	movs	r3, #2
 8003656:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	461a      	mov	r2, r3
 8003670:	2320      	movs	r3, #32
 8003672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003690:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	3301      	adds	r3, #1
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f af62 	bne.w	800356a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 f8a2 	bl	80077f4 <USB_ReadInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ba:	f040 80db 	bne.w	8003874 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 f8c3 	bl	800784e <USB_ReadDevAllInEpInterrupt>
 80036c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036ce:	e0cd      	b.n	800386c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80c2 	beq.w	8003860 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 f8e9 	bl	80078be <USB_ReadDevInEPInterrupt>
 80036ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d057      	beq.n	80037a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	2201      	movs	r2, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	69f9      	ldr	r1, [r7, #28]
 8003714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003718:	4013      	ands	r3, r2
 800371a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	461a      	mov	r2, r3
 800372a:	2301      	movs	r3, #1
 800372c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d132      	bne.n	800379c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	334c      	adds	r3, #76	; 0x4c
 8003746:	6819      	ldr	r1, [r3, #0]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4403      	add	r3, r0
 8003756:	3348      	adds	r3, #72	; 0x48
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4419      	add	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4403      	add	r3, r0
 800376a:	334c      	adds	r3, #76	; 0x4c
 800376c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d113      	bne.n	800379c <HAL_PCD_IRQHandler+0x3a2>
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3354      	adds	r3, #84	; 0x54
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d108      	bne.n	800379c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003794:	461a      	mov	r2, r3
 8003796:	2101      	movs	r1, #1
 8003798:	f004 f8f0 	bl	800797c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f006 fbc7 	bl	8009f36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	461a      	mov	r2, r3
 80037c0:	2308      	movs	r3, #8
 80037c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037da:	461a      	mov	r2, r3
 80037dc:	2310      	movs	r3, #16
 80037de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f6:	461a      	mov	r2, r3
 80037f8:	2340      	movs	r3, #64	; 0x40
 80037fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d023      	beq.n	800384e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003808:	6a38      	ldr	r0, [r7, #32]
 800380a:	f002 ffd1 	bl	80067b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3338      	adds	r3, #56	; 0x38
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	78db      	ldrb	r3, [r3, #3]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d108      	bne.n	800383c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f006 fc14 	bl	800a064 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003848:	461a      	mov	r2, r3
 800384a:	2302      	movs	r3, #2
 800384c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fcdb 	bl	8004216 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	3301      	adds	r3, #1
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	f47f af2e 	bne.w	80036d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f003 ffbb 	bl	80077f4 <USB_ReadInterrupts>
 800387e:	4603      	mov	r3, r0
 8003880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003888:	d122      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d108      	bne.n	80038ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038b0:	2100      	movs	r1, #0
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fec2 	bl	800463c <HAL_PCDEx_LPM_Callback>
 80038b8:	e002      	b.n	80038c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f006 fbb2 	bl	800a024 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f003 ff8d 	bl	80077f4 <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e4:	d112      	bne.n	800390c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f006 fb6e 	bl	8009fd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800390a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f003 ff6f 	bl	80077f4 <USB_ReadInterrupts>
 8003916:	4603      	mov	r3, r0
 8003918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	f040 80b7 	bne.w	8003a92 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2110      	movs	r1, #16
 800393e:	4618      	mov	r0, r3
 8003940:	f002 ff36 	bl	80067b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003948:	e046      	b.n	80039d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003956:	461a      	mov	r2, r3
 8003958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800395c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396e:	0151      	lsls	r1, r2, #5
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	440a      	add	r2, r1
 8003974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800397c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	461a      	mov	r2, r3
 800398c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003990:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a2:	0151      	lsls	r1, r2, #5
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	440a      	add	r2, r1
 80039a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c2:	0151      	lsls	r1, r2, #5
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	440a      	add	r2, r1
 80039c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	3301      	adds	r3, #1
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d3b3      	bcc.n	800394a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0e:	f043 030b 	orr.w	r3, r3, #11
 8003a12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a24:	f043 030b 	orr.w	r3, r3, #11
 8003a28:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2a:	e015      	b.n	8003a58 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a52:	f043 030b 	orr.w	r3, r3, #11
 8003a56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f003 ff7d 	bl	800797c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 feac 	bl	80077f4 <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d124      	bne.n	8003af2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f003 ff42 	bl	8007936 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f002 fef7 	bl	80068aa <USB_GetDevSpeed>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681c      	ldr	r4, [r3, #0]
 8003ac8:	f001 fa28 	bl	8004f1c <HAL_RCC_GetHCLKFreq>
 8003acc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f002 fbf6 	bl	80062c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f006 fa52 	bl	8009f86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f003 fe7c 	bl	80077f4 <USB_ReadInterrupts>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d10a      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f006 fa2f 	bl	8009f6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f002 0208 	and.w	r2, r2, #8
 8003b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fe67 	bl	80077f4 <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d122      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	e014      	b.n	8003b6c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fb27 	bl	80041b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	3301      	adds	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d3e5      	bcc.n	8003b42 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fe3a 	bl	80077f4 <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8a:	d13b      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	e02b      	b.n	8003bea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3340      	adds	r3, #64	; 0x40
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d115      	bne.n	8003be4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da12      	bge.n	8003be4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	333f      	adds	r3, #63	; 0x3f
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fae8 	bl	80041b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	3301      	adds	r3, #1
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3ce      	bcc.n	8003b92 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f003 fdf3 	bl	80077f4 <USB_ReadInterrupts>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c18:	d155      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e045      	b.n	8003cac <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d12e      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da2b      	bge.n	8003ca6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d121      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca2:	6053      	str	r3, [r2, #4]
            break;
 8003ca4:	e007      	b.n	8003cb6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	3301      	adds	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d3b4      	bcc.n	8003c20 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f003 fd92 	bl	80077f4 <USB_ReadInterrupts>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d10a      	bne.n	8003cf2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f006 f9d3 	bl	800a088 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f003 fd7c 	bl	80077f4 <USB_ReadInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d115      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f006 f9c3 	bl	800a0a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	e000      	b.n	8003d32 <HAL_PCD_IRQHandler+0x938>
      return;
 8003d30:	bf00      	nop
    }
  }
}
 8003d32:	3734      	adds	r7, #52	; 0x34
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd90      	pop	{r4, r7, pc}

08003d38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_PCD_SetAddress+0x1a>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e013      	b.n	8003d7a <HAL_PCD_SetAddress+0x42>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f003 fcda 	bl	8007724 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	4608      	mov	r0, r1
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4603      	mov	r3, r0
 8003d92:	70fb      	strb	r3, [r7, #3]
 8003d94:	460b      	mov	r3, r1
 8003d96:	803b      	strh	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da0f      	bge.n	8003dc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	3338      	adds	r3, #56	; 0x38
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	705a      	strb	r2, [r3, #1]
 8003dc6:	e00f      	b.n	8003de8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	f003 020f 	and.w	r2, r3, #15
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3304      	adds	r3, #4
 8003de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003df4:	883a      	ldrh	r2, [r7, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	78ba      	ldrb	r2, [r7, #2]
 8003dfe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e12:	78bb      	ldrb	r3, [r7, #2]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d102      	bne.n	8003e1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_PCD_EP_Open+0xaa>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e00e      	b.n	8003e4a <HAL_PCD_EP_Open+0xc8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68f9      	ldr	r1, [r7, #12]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f002 fd5a 	bl	80068f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e48:	7afb      	ldrb	r3, [r7, #11]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da0f      	bge.n	8003e86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 020f 	and.w	r2, r3, #15
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3338      	adds	r3, #56	; 0x38
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	705a      	strb	r2, [r3, #1]
 8003e84:	e00f      	b.n	8003ea6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 020f 	and.w	r2, r3, #15
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_PCD_EP_Close+0x6e>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e00e      	b.n	8003ede <HAL_PCD_EP_Close+0x8c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f002 fd98 	bl	8006a04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
 8003ef8:	f003 020f 	and.w	r2, r3, #15
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2200      	movs	r2, #0
 8003f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f28:	7afb      	ldrb	r3, [r7, #11]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d102      	bne.n	8003f42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f42:	7afb      	ldrb	r3, [r7, #11]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	6979      	ldr	r1, [r7, #20]
 8003f5a:	f003 f877 	bl	800704c <USB_EP0StartXfer>
 8003f5e:	e008      	b.n	8003f72 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6979      	ldr	r1, [r7, #20]
 8003f6e:	f002 fe25 	bl	8006bbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f003 020f 	and.w	r2, r3, #15
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f9e:	681b      	ldr	r3, [r3, #0]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fbc:	7afb      	ldrb	r3, [r7, #11]
 8003fbe:	f003 020f 	and.w	r2, r3, #15
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	3338      	adds	r3, #56	; 0x38
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fec:	7afb      	ldrb	r3, [r7, #11]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d102      	bne.n	8004006 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004006:	7afb      	ldrb	r3, [r7, #11]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	f003 f815 	bl	800704c <USB_EP0StartXfer>
 8004022:	e008      	b.n	8004036 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	6979      	ldr	r1, [r7, #20]
 8004032:	f002 fdc3 	bl	8006bbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	f003 020f 	and.w	r2, r3, #15
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d901      	bls.n	800405e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e050      	b.n	8004100 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800405e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004062:	2b00      	cmp	r3, #0
 8004064:	da0f      	bge.n	8004086 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	f003 020f 	and.w	r2, r3, #15
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	3338      	adds	r3, #56	; 0x38
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	3304      	adds	r3, #4
 800407c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	705a      	strb	r2, [r3, #1]
 8004084:	e00d      	b.n	80040a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	3304      	adds	r3, #4
 800409a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_PCD_EP_SetStall+0x82>
 80040be:	2302      	movs	r3, #2
 80040c0:	e01e      	b.n	8004100 <HAL_PCD_EP_SetStall+0xc0>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f003 fa53 	bl	800757c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	b2d9      	uxtb	r1, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040f0:	461a      	mov	r2, r3
 80040f2:	f003 fc43 	bl	800797c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	f003 020f 	and.w	r2, r3, #15
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d901      	bls.n	8004126 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e042      	b.n	80041ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800412a:	2b00      	cmp	r3, #0
 800412c:	da0f      	bge.n	800414e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	f003 020f 	and.w	r2, r3, #15
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	3338      	adds	r3, #56	; 0x38
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	3304      	adds	r3, #4
 8004144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	705a      	strb	r2, [r3, #1]
 800414c:	e00f      	b.n	800416e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	f003 020f 	and.w	r2, r3, #15
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	3304      	adds	r3, #4
 8004166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	b2da      	uxtb	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_PCD_EP_ClrStall+0x86>
 800418a:	2302      	movs	r3, #2
 800418c:	e00e      	b.n	80041ac <HAL_PCD_EP_ClrStall+0xa4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	4618      	mov	r0, r3
 800419e:	f003 fa5b 	bl	8007658 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	da0c      	bge.n	80041e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	3338      	adds	r3, #56	; 0x38
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e00c      	b.n	80041fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	f003 020f 	and.w	r2, r3, #15
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4413      	add	r3, r2
 80041f8:	3304      	adds	r3, #4
 80041fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	4618      	mov	r0, r3
 8004204:	f003 f87a 	bl	80072fc <USB_EPStopXfer>
 8004208:	4603      	mov	r3, r0
 800420a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800420c:	7afb      	ldrb	r3, [r7, #11]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b08a      	sub	sp, #40	; 0x28
 800421a:	af02      	add	r7, sp, #8
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	3338      	adds	r3, #56	; 0x38
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	429a      	cmp	r2, r3
 8004248:	d901      	bls.n	800424e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e06c      	b.n	8004328 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	429a      	cmp	r2, r3
 8004262:	d902      	bls.n	800426a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3303      	adds	r3, #3
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004272:	e02b      	b.n	80042cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	429a      	cmp	r2, r3
 8004288:	d902      	bls.n	8004290 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3303      	adds	r3, #3
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6919      	ldr	r1, [r3, #16]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	4603      	mov	r3, r0
 80042ae:	6978      	ldr	r0, [r7, #20]
 80042b0:	f003 f8ce 	bl	8007450 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	441a      	add	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	441a      	add	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d809      	bhi.n	80042f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d203      	bcs.n	80042f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1be      	bne.n	8004274 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d811      	bhi.n	8004326 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	2201      	movs	r2, #1
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	43db      	mvns	r3, r3
 800431c:	6939      	ldr	r1, [r7, #16]
 800431e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004322:	4013      	ands	r3, r2
 8004324:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	333c      	adds	r3, #60	; 0x3c
 8004348:	3304      	adds	r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d17b      	bne.n	800445e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d015      	beq.n	800439c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	4a61      	ldr	r2, [pc, #388]	; (80044f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	f240 80b9 	bls.w	80044ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80b3 	beq.w	80044ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	461a      	mov	r2, r3
 8004394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004398:	6093      	str	r3, [r2, #8]
 800439a:	e0a7      	b.n	80044ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	461a      	mov	r2, r3
 80043b4:	2320      	movs	r3, #32
 80043b6:	6093      	str	r3, [r2, #8]
 80043b8:	e098      	b.n	80044ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f040 8093 	bne.w	80044ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	4a4b      	ldr	r2, [pc, #300]	; (80044f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d90f      	bls.n	80043ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	461a      	mov	r2, r3
 80043e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ea:	6093      	str	r3, [r2, #8]
 80043ec:	e07e      	b.n	80044ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4413      	add	r3, r2
 8004400:	3304      	adds	r3, #4
 8004402:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	0159      	lsls	r1, r3, #5
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	440b      	add	r3, r1
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441a:	1ad2      	subs	r2, r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d114      	bne.n	8004450 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004438:	461a      	mov	r2, r3
 800443a:	2101      	movs	r1, #1
 800443c:	f003 fa9e 	bl	800797c <USB_EP0_OutStart>
 8004440:	e006      	b.n	8004450 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	441a      	add	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f005 fd52 	bl	8009f00 <HAL_PCD_DataOutStageCallback>
 800445c:	e046      	b.n	80044ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4a26      	ldr	r2, [pc, #152]	; (80044fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d124      	bne.n	80044b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	461a      	mov	r2, r3
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	6093      	str	r3, [r2, #8]
 8004484:	e032      	b.n	80044ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	461a      	mov	r2, r3
 800449e:	2320      	movs	r3, #32
 80044a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f005 fd29 	bl	8009f00 <HAL_PCD_DataOutStageCallback>
 80044ae:	e01d      	b.n	80044ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d114      	bne.n	80044e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d108      	bne.n	80044e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044d8:	461a      	mov	r2, r3
 80044da:	2100      	movs	r1, #0
 80044dc:	f003 fa4e 	bl	800797c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f005 fd0a 	bl	8009f00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	4f54300a 	.word	0x4f54300a
 80044fc:	4f54310a 	.word	0x4f54310a

08004500 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	333c      	adds	r3, #60	; 0x3c
 8004518:	3304      	adds	r3, #4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a15      	ldr	r2, [pc, #84]	; (8004588 <PCD_EP_OutSetupPacket_int+0x88>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d90e      	bls.n	8004554 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	461a      	mov	r2, r3
 800454e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004552:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f005 fcc1 	bl	8009edc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <PCD_EP_OutSetupPacket_int+0x88>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d90c      	bls.n	800457c <PCD_EP_OutSetupPacket_int+0x7c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d108      	bne.n	800457c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004574:	461a      	mov	r2, r3
 8004576:	2101      	movs	r1, #1
 8004578:	f003 fa00 	bl	800797c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	4f54300a 	.word	0x4f54300a

0800458c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
 8004598:	4613      	mov	r3, r2
 800459a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d107      	bne.n	80045ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045aa:	883b      	ldrh	r3, [r7, #0]
 80045ac:	0419      	lsls	r1, r3, #16
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
 80045b8:	e028      	b.n	800460c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	0c1b      	lsrs	r3, r3, #16
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	4413      	add	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e00d      	b.n	80045ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	3340      	adds	r3, #64	; 0x40
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	4413      	add	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	3301      	adds	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	7bfa      	ldrb	r2, [r7, #15]
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d3ec      	bcc.n	80045ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045f4:	883b      	ldrh	r3, [r7, #0]
 80045f6:	0418      	lsls	r0, r3, #16
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6819      	ldr	r1, [r3, #0]
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	3b01      	subs	r3, #1
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	4302      	orrs	r2, r0
 8004604:	3340      	adds	r3, #64	; 0x40
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e267      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d075      	beq.n	800475e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004672:	4b88      	ldr	r3, [pc, #544]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b04      	cmp	r3, #4
 800467c:	d00c      	beq.n	8004698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467e:	4b85      	ldr	r3, [pc, #532]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004686:	2b08      	cmp	r3, #8
 8004688:	d112      	bne.n	80046b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800468a:	4b82      	ldr	r3, [pc, #520]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004696:	d10b      	bne.n	80046b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004698:	4b7e      	ldr	r3, [pc, #504]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d05b      	beq.n	800475c <HAL_RCC_OscConfig+0x108>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d157      	bne.n	800475c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e242      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b8:	d106      	bne.n	80046c8 <HAL_RCC_OscConfig+0x74>
 80046ba:	4b76      	ldr	r3, [pc, #472]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a75      	ldr	r2, [pc, #468]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e01d      	b.n	8004704 <HAL_RCC_OscConfig+0xb0>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d0:	d10c      	bne.n	80046ec <HAL_RCC_OscConfig+0x98>
 80046d2:	4b70      	ldr	r3, [pc, #448]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6f      	ldr	r2, [pc, #444]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	4b6d      	ldr	r3, [pc, #436]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a6c      	ldr	r2, [pc, #432]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e00b      	b.n	8004704 <HAL_RCC_OscConfig+0xb0>
 80046ec:	4b69      	ldr	r3, [pc, #420]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a68      	ldr	r2, [pc, #416]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4b66      	ldr	r3, [pc, #408]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a65      	ldr	r2, [pc, #404]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80046fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d013      	beq.n	8004734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fd faf0 	bl	8001cf0 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004714:	f7fd faec 	bl	8001cf0 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	; 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e207      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004726:	4b5b      	ldr	r3, [pc, #364]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0xc0>
 8004732:	e014      	b.n	800475e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004734:	f7fd fadc 	bl	8001cf0 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800473c:	f7fd fad8 	bl	8001cf0 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	; 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e1f3      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474e:	4b51      	ldr	r3, [pc, #324]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0xe8>
 800475a:	e000      	b.n	800475e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d063      	beq.n	8004832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476a:	4b4a      	ldr	r3, [pc, #296]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00b      	beq.n	800478e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004776:	4b47      	ldr	r3, [pc, #284]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800477e:	2b08      	cmp	r3, #8
 8004780:	d11c      	bne.n	80047bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004782:	4b44      	ldr	r3, [pc, #272]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d116      	bne.n	80047bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478e:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_RCC_OscConfig+0x152>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d001      	beq.n	80047a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e1c7      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4937      	ldr	r1, [pc, #220]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ba:	e03a      	b.n	8004832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d020      	beq.n	8004806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c4:	4b34      	ldr	r3, [pc, #208]	; (8004898 <HAL_RCC_OscConfig+0x244>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ca:	f7fd fa91 	bl	8001cf0 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d2:	f7fd fa8d 	bl	8001cf0 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e1a8      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e4:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f0:	4b28      	ldr	r3, [pc, #160]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4925      	ldr	r1, [pc, #148]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004800:	4313      	orrs	r3, r2
 8004802:	600b      	str	r3, [r1, #0]
 8004804:	e015      	b.n	8004832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004806:	4b24      	ldr	r3, [pc, #144]	; (8004898 <HAL_RCC_OscConfig+0x244>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fd fa70 	bl	8001cf0 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004814:	f7fd fa6c 	bl	8001cf0 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e187      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004826:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d036      	beq.n	80048ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d016      	beq.n	8004874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <HAL_RCC_OscConfig+0x248>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd fa50 	bl	8001cf0 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004854:	f7fd fa4c 	bl	8001cf0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e167      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_RCC_OscConfig+0x240>)
 8004868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x200>
 8004872:	e01b      	b.n	80048ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_RCC_OscConfig+0x248>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487a:	f7fd fa39 	bl	8001cf0 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004880:	e00e      	b.n	80048a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004882:	f7fd fa35 	bl	8001cf0 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d907      	bls.n	80048a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e150      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
 8004894:	40023800 	.word	0x40023800
 8004898:	42470000 	.word	0x42470000
 800489c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a0:	4b88      	ldr	r3, [pc, #544]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80048a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ea      	bne.n	8004882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8097 	beq.w	80049e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048be:	4b81      	ldr	r3, [pc, #516]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10f      	bne.n	80048ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	4b7d      	ldr	r3, [pc, #500]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	4a7c      	ldr	r2, [pc, #496]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80048d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6413      	str	r3, [r2, #64]	; 0x40
 80048da:	4b7a      	ldr	r3, [pc, #488]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e2:	60bb      	str	r3, [r7, #8]
 80048e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ea:	4b77      	ldr	r3, [pc, #476]	; (8004ac8 <HAL_RCC_OscConfig+0x474>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d118      	bne.n	8004928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048f6:	4b74      	ldr	r3, [pc, #464]	; (8004ac8 <HAL_RCC_OscConfig+0x474>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a73      	ldr	r2, [pc, #460]	; (8004ac8 <HAL_RCC_OscConfig+0x474>)
 80048fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004902:	f7fd f9f5 	bl	8001cf0 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490a:	f7fd f9f1 	bl	8001cf0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e10c      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491c:	4b6a      	ldr	r3, [pc, #424]	; (8004ac8 <HAL_RCC_OscConfig+0x474>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d106      	bne.n	800493e <HAL_RCC_OscConfig+0x2ea>
 8004930:	4b64      	ldr	r3, [pc, #400]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	4a63      	ldr	r2, [pc, #396]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	6713      	str	r3, [r2, #112]	; 0x70
 800493c:	e01c      	b.n	8004978 <HAL_RCC_OscConfig+0x324>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b05      	cmp	r3, #5
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x30c>
 8004946:	4b5f      	ldr	r3, [pc, #380]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a5e      	ldr	r2, [pc, #376]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 800494c:	f043 0304 	orr.w	r3, r3, #4
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
 8004952:	4b5c      	ldr	r3, [pc, #368]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	4a5b      	ldr	r2, [pc, #364]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	6713      	str	r3, [r2, #112]	; 0x70
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0x324>
 8004960:	4b58      	ldr	r3, [pc, #352]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	4a57      	ldr	r2, [pc, #348]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	6713      	str	r3, [r2, #112]	; 0x70
 800496c:	4b55      	ldr	r3, [pc, #340]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	4a54      	ldr	r2, [pc, #336]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004972:	f023 0304 	bic.w	r3, r3, #4
 8004976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d015      	beq.n	80049ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fd f9b6 	bl	8001cf0 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004986:	e00a      	b.n	800499e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004988:	f7fd f9b2 	bl	8001cf0 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0cb      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499e:	4b49      	ldr	r3, [pc, #292]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0ee      	beq.n	8004988 <HAL_RCC_OscConfig+0x334>
 80049aa:	e014      	b.n	80049d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ac:	f7fd f9a0 	bl	8001cf0 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b4:	f7fd f99c 	bl	8001cf0 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0b5      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ca:	4b3e      	ldr	r3, [pc, #248]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ee      	bne.n	80049b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d105      	bne.n	80049e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049dc:	4b39      	ldr	r3, [pc, #228]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	4a38      	ldr	r2, [pc, #224]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80049e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80a1 	beq.w	8004b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f2:	4b34      	ldr	r3, [pc, #208]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d05c      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d141      	bne.n	8004a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a06:	4b31      	ldr	r3, [pc, #196]	; (8004acc <HAL_RCC_OscConfig+0x478>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7fd f970 	bl	8001cf0 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fd f96c 	bl	8001cf0 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e087      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a26:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69da      	ldr	r2, [r3, #28]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	019b      	lsls	r3, r3, #6
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	491b      	ldr	r1, [pc, #108]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x478>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fd f945 	bl	8001cf0 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6a:	f7fd f941 	bl	8001cf0 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e05c      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x416>
 8004a88:	e054      	b.n	8004b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_OscConfig+0x478>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fd f92e 	bl	8001cf0 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fd f92a 	bl	8001cf0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e045      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_RCC_OscConfig+0x470>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x444>
 8004ab6:	e03d      	b.n	8004b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d107      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e038      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_RCC_OscConfig+0x4ec>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d028      	beq.n	8004b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d121      	bne.n	8004b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d11a      	bne.n	8004b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d111      	bne.n	8004b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d107      	bne.n	8004b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40023800 	.word	0x40023800

08004b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0cc      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b58:	4b68      	ldr	r3, [pc, #416]	; (8004cfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d90c      	bls.n	8004b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b65      	ldr	r3, [pc, #404]	; (8004cfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6e:	4b63      	ldr	r3, [pc, #396]	; (8004cfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0b8      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d020      	beq.n	8004bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b98:	4b59      	ldr	r3, [pc, #356]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	4a58      	ldr	r2, [pc, #352]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb0:	4b53      	ldr	r3, [pc, #332]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a52      	ldr	r2, [pc, #328]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bbc:	4b50      	ldr	r3, [pc, #320]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	494d      	ldr	r1, [pc, #308]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d044      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	4b47      	ldr	r3, [pc, #284]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d119      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e07f      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d107      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c02:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e06f      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c12:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e067      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c22:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f023 0203 	bic.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4934      	ldr	r1, [pc, #208]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c34:	f7fd f85c 	bl	8001cf0 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3c:	f7fd f858 	bl	8001cf0 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e04f      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 020c 	and.w	r2, r3, #12
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d1eb      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c64:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <HAL_RCC_ClockConfig+0x1b8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d20c      	bcs.n	8004c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e032      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4916      	ldr	r1, [pc, #88]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cb6:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	490e      	ldr	r1, [pc, #56]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cca:	f000 f821 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	490a      	ldr	r1, [pc, #40]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004cdc:	5ccb      	ldrb	r3, [r1, r3]
 8004cde:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce2:	4a09      	ldr	r2, [pc, #36]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ce6:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fc ffbc 	bl	8001c68 <HAL_InitTick>

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40023c00 	.word	0x40023c00
 8004d00:	40023800 	.word	0x40023800
 8004d04:	0800a570 	.word	0x0800a570
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	2000004c 	.word	0x2000004c

08004d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d14:	b094      	sub	sp, #80	; 0x50
 8004d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d20:	2300      	movs	r3, #0
 8004d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d28:	4b79      	ldr	r3, [pc, #484]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d00d      	beq.n	8004d50 <HAL_RCC_GetSysClockFreq+0x40>
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	f200 80e1 	bhi.w	8004efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0x34>
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d42:	e0db      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d44:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d48:	e0db      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d4a:	4b73      	ldr	r3, [pc, #460]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d4e:	e0d8      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d50:	4b6f      	ldr	r3, [pc, #444]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d5a:	4b6d      	ldr	r3, [pc, #436]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d063      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d66:	4b6a      	ldr	r3, [pc, #424]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	099b      	lsrs	r3, r3, #6
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	f04f 0000 	mov.w	r0, #0
 8004d8a:	f04f 0100 	mov.w	r1, #0
 8004d8e:	0159      	lsls	r1, r3, #5
 8004d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d94:	0150      	lsls	r0, r2, #5
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	1a51      	subs	r1, r2, r1
 8004d9e:	6139      	str	r1, [r7, #16]
 8004da0:	4629      	mov	r1, r5
 8004da2:	eb63 0301 	sbc.w	r3, r3, r1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004db4:	4659      	mov	r1, fp
 8004db6:	018b      	lsls	r3, r1, #6
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	018a      	lsls	r2, r1, #6
 8004dc2:	4651      	mov	r1, sl
 8004dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8004dc8:	4659      	mov	r1, fp
 8004dca:	eb63 0901 	sbc.w	r9, r3, r1
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004de2:	4690      	mov	r8, r2
 8004de4:	4699      	mov	r9, r3
 8004de6:	4623      	mov	r3, r4
 8004de8:	eb18 0303 	adds.w	r3, r8, r3
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	462b      	mov	r3, r5
 8004df0:	eb49 0303 	adc.w	r3, r9, r3
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e02:	4629      	mov	r1, r5
 8004e04:	024b      	lsls	r3, r1, #9
 8004e06:	4621      	mov	r1, r4
 8004e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	024a      	lsls	r2, r1, #9
 8004e10:	4610      	mov	r0, r2
 8004e12:	4619      	mov	r1, r3
 8004e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e16:	2200      	movs	r2, #0
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e20:	f7fb f9e4 	bl	80001ec <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4613      	mov	r3, r2
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e2c:	e058      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b38      	ldr	r3, [pc, #224]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	2200      	movs	r2, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	4611      	mov	r1, r2
 8004e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	2300      	movs	r3, #0
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
 8004e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e48:	4642      	mov	r2, r8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	f04f 0000 	mov.w	r0, #0
 8004e50:	f04f 0100 	mov.w	r1, #0
 8004e54:	0159      	lsls	r1, r3, #5
 8004e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e5a:	0150      	lsls	r0, r2, #5
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4641      	mov	r1, r8
 8004e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e66:	4649      	mov	r1, r9
 8004e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e80:	ebb2 040a 	subs.w	r4, r2, sl
 8004e84:	eb63 050b 	sbc.w	r5, r3, fp
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	00eb      	lsls	r3, r5, #3
 8004e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e96:	00e2      	lsls	r2, r4, #3
 8004e98:	4614      	mov	r4, r2
 8004e9a:	461d      	mov	r5, r3
 8004e9c:	4643      	mov	r3, r8
 8004e9e:	18e3      	adds	r3, r4, r3
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	eb45 0303 	adc.w	r3, r5, r3
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	028b      	lsls	r3, r1, #10
 8004eba:	4621      	mov	r1, r4
 8004ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	028a      	lsls	r2, r1, #10
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eca:	2200      	movs	r2, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	61fa      	str	r2, [r7, #28]
 8004ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ed4:	f7fb f98a 	bl	80001ec <__aeabi_uldivmod>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4613      	mov	r3, r2
 8004ede:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	3301      	adds	r3, #1
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004efa:	e002      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004efe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3750      	adds	r7, #80	; 0x50
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800
 8004f14:	00f42400 	.word	0x00f42400
 8004f18:	007a1200 	.word	0x007a1200

08004f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f22:	681b      	ldr	r3, [r3, #0]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000000 	.word	0x20000000

08004f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d075      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f68:	4b91      	ldr	r3, [pc, #580]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6e:	f7fc febf 	bl	8001cf0 <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f76:	f7fc febb 	bl	8001cf0 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e189      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f88:	4b8a      	ldr	r3, [pc, #552]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	019a      	lsls	r2, r3, #6
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	071b      	lsls	r3, r3, #28
 8004fac:	4981      	ldr	r1, [pc, #516]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01f      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fc0:	4b7c      	ldr	r3, [pc, #496]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc6:	0f1b      	lsrs	r3, r3, #28
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	019a      	lsls	r2, r3, #6
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	061b      	lsls	r3, r3, #24
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	071b      	lsls	r3, r3, #28
 8004fe0:	4974      	ldr	r1, [pc, #464]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fe8:	4b72      	ldr	r3, [pc, #456]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fee:	f023 021f 	bic.w	r2, r3, #31
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	496e      	ldr	r1, [pc, #440]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	019a      	lsls	r2, r3, #6
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	071b      	lsls	r3, r3, #28
 8005020:	4964      	ldr	r1, [pc, #400]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005028:	4b61      	ldr	r3, [pc, #388]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502e:	f7fc fe5f 	bl	8001cf0 <HAL_GetTick>
 8005032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005036:	f7fc fe5b 	bl	8001cf0 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e129      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005048:	4b5a      	ldr	r3, [pc, #360]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005068:	2b00      	cmp	r3, #0
 800506a:	d079      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800506c:	4b52      	ldr	r3, [pc, #328]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005072:	f7fc fe3d 	bl	8001cf0 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005078:	e008      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800507a:	f7fc fe39 	bl	8001cf0 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e107      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800508c:	4b49      	ldr	r3, [pc, #292]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005098:	d0ef      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d020      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050a6:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	0f1b      	lsrs	r3, r3, #28
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	019a      	lsls	r2, r3, #6
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	061b      	lsls	r3, r3, #24
 80050c0:	431a      	orrs	r2, r3
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	493b      	ldr	r1, [pc, #236]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	3b01      	subs	r3, #1
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	4934      	ldr	r1, [pc, #208]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01e      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050f4:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	0e1b      	lsrs	r3, r3, #24
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	019a      	lsls	r2, r3, #6
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	071b      	lsls	r3, r3, #28
 8005114:	4927      	ldr	r1, [pc, #156]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	4922      	ldr	r1, [pc, #136]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005132:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005138:	f7fc fdda 	bl	8001cf0 <HAL_GetTick>
 800513c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005140:	f7fc fdd6 	bl	8001cf0 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e0a4      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005152:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800515a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515e:	d1ef      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 808b 	beq.w	8005284 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517c:	6413      	str	r3, [r2, #64]	; 0x40
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a0b      	ldr	r2, [pc, #44]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005194:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005196:	f7fc fdab 	bl	8001cf0 <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800519c:	e010      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800519e:	f7fc fda7 	bl	8001cf0 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d909      	bls.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e075      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80051b0:	42470068 	.word	0x42470068
 80051b4:	40023800 	.word	0x40023800
 80051b8:	42470070 	.word	0x42470070
 80051bc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051c0:	4b38      	ldr	r3, [pc, #224]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0e8      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051cc:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d02f      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d028      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051ea:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051f4:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051fa:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005200:	4a29      	ldr	r2, [pc, #164]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005206:	4b28      	ldr	r3, [pc, #160]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d114      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005212:	f7fc fd6d 	bl	8001cf0 <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005218:	e00a      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800521a:	f7fc fd69 	bl	8001cf0 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f241 3288 	movw	r2, #5000	; 0x1388
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e035      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0ee      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005248:	d10d      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800524a:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	4912      	ldr	r1, [pc, #72]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005260:	4313      	orrs	r3, r2
 8005262:	608b      	str	r3, [r1, #8]
 8005264:	e005      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4a0f      	ldr	r2, [pc, #60]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800526c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005270:	6093      	str	r3, [r2, #8]
 8005272:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005274:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527e:	490a      	ldr	r1, [pc, #40]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005280:	4313      	orrs	r3, r2
 8005282:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005298:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40007000 	.word	0x40007000
 80052a8:	40023800 	.word	0x40023800
 80052ac:	42470e40 	.word	0x42470e40
 80052b0:	424711e0 	.word	0x424711e0

080052b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e025      	b.n	8005314 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f81d 	bl	800531c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f000 fe6b 	bl	8005fd0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	461a      	mov	r2, r3
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	f000 fec0 	bl	800608a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005342:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d101      	bne.n	800534e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800534a:	2302      	movs	r3, #2
 800534c:	e021      	b.n	8005392 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d002      	beq.n	800535a <HAL_SDRAM_SendCommand+0x2a>
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	2b05      	cmp	r3, #5
 8005358:	d118      	bne.n	800538c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fef6 	bl	800615c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d104      	bne.n	8005382 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2205      	movs	r2, #5
 800537c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005380:	e006      	b.n	8005390 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800538a:	e001      	b.n	8005390 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d101      	bne.n	80053b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
 80053b2:	e016      	b.n	80053e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d10f      	bne.n	80053e0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 ff01 	bl	80061d6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e07b      	b.n	80054f4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b00      	cmp	r3, #0
 8005402:	d108      	bne.n	8005416 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800540c:	d009      	beq.n	8005422 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	61da      	str	r2, [r3, #28]
 8005414:	e005      	b.n	8005422 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d106      	bne.n	8005442 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f885 	bl	800554c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005458:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	ea42 0103 	orr.w	r1, r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	f003 0104 	and.w	r1, r3, #4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	f003 0210 	and.w	r2, r3, #16
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69da      	ldr	r2, [r3, #28]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e01a      	b.n	8005544 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005524:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f81a 	bl	8005560 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_SPI_Transmit+0x22>
 8005592:	2302      	movs	r3, #2
 8005594:	e126      	b.n	80057e4 <HAL_SPI_Transmit+0x270>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800559e:	f7fc fba7 	bl	8001cf0 <HAL_GetTick>
 80055a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d002      	beq.n	80055ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055b4:	2302      	movs	r3, #2
 80055b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055b8:	e10b      	b.n	80057d2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <HAL_SPI_Transmit+0x52>
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055ca:	e102      	b.n	80057d2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2203      	movs	r2, #3
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005612:	d10f      	bne.n	8005634 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005622:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005632:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d007      	beq.n	8005652 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005650:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565a:	d14b      	bne.n	80056f4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_SPI_Transmit+0xf6>
 8005664:	8afb      	ldrh	r3, [r7, #22]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d13e      	bne.n	80056e8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	881a      	ldrh	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	1c9a      	adds	r2, r3, #2
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800568e:	e02b      	b.n	80056e8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b02      	cmp	r3, #2
 800569c:	d112      	bne.n	80056c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	881a      	ldrh	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80056c2:	e011      	b.n	80056e8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c4:	f7fc fb14 	bl	8001cf0 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d803      	bhi.n	80056dc <HAL_SPI_Transmit+0x168>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d102      	bne.n	80056e2 <HAL_SPI_Transmit+0x16e>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d102      	bne.n	80056e8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056e6:	e074      	b.n	80057d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1ce      	bne.n	8005690 <HAL_SPI_Transmit+0x11c>
 80056f2:	e04c      	b.n	800578e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_SPI_Transmit+0x18e>
 80056fc:	8afb      	ldrh	r3, [r7, #22]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d140      	bne.n	8005784 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005728:	e02c      	b.n	8005784 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d113      	bne.n	8005760 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	7812      	ldrb	r2, [r2, #0]
 8005744:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	86da      	strh	r2, [r3, #54]	; 0x36
 800575e:	e011      	b.n	8005784 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005760:	f7fc fac6 	bl	8001cf0 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d803      	bhi.n	8005778 <HAL_SPI_Transmit+0x204>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d102      	bne.n	800577e <HAL_SPI_Transmit+0x20a>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005782:	e026      	b.n	80057d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1cd      	bne.n	800572a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fbda 	bl	8005f4c <SPI_EndRxTxTransaction>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	77fb      	strb	r3, [r7, #31]
 80057ce:	e000      	b.n	80057d2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005808:	d112      	bne.n	8005830 <HAL_SPI_Receive+0x44>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10e      	bne.n	8005830 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2204      	movs	r2, #4
 8005816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f8f1 	bl	8005a0e <HAL_SPI_TransmitReceive>
 800582c:	4603      	mov	r3, r0
 800582e:	e0ea      	b.n	8005a06 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_SPI_Receive+0x52>
 800583a:	2302      	movs	r3, #2
 800583c:	e0e3      	b.n	8005a06 <HAL_SPI_Receive+0x21a>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005846:	f7fc fa53 	bl	8001cf0 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d002      	beq.n	800585e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005858:	2302      	movs	r3, #2
 800585a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800585c:	e0ca      	b.n	80059f4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_SPI_Receive+0x7e>
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d102      	bne.n	8005870 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800586e:	e0c1      	b.n	80059f4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2204      	movs	r2, #4
 8005874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	88fa      	ldrh	r2, [r7, #6]
 8005888:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b6:	d10f      	bne.n	80058d8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d007      	beq.n	80058f6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d162      	bne.n	80059c4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058fe:	e02e      	b.n	800595e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d115      	bne.n	800593a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f103 020c 	add.w	r2, r3, #12
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005938:	e011      	b.n	800595e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800593a:	f7fc f9d9 	bl	8001cf0 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d803      	bhi.n	8005952 <HAL_SPI_Receive+0x166>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d102      	bne.n	8005958 <HAL_SPI_Receive+0x16c>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800595c:	e04a      	b.n	80059f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1cb      	bne.n	8005900 <HAL_SPI_Receive+0x114>
 8005968:	e031      	b.n	80059ce <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d113      	bne.n	80059a0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	b292      	uxth	r2, r2
 8005984:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	1c9a      	adds	r2, r3, #2
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800599e:	e011      	b.n	80059c4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059a0:	f7fc f9a6 	bl	8001cf0 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d803      	bhi.n	80059b8 <HAL_SPI_Receive+0x1cc>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b6:	d102      	bne.n	80059be <HAL_SPI_Receive+0x1d2>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d102      	bne.n	80059c4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059c2:	e017      	b.n	80059f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1cd      	bne.n	800596a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	6839      	ldr	r1, [r7, #0]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 fa54 	bl	8005e80 <SPI_EndRxTransaction>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	75fb      	strb	r3, [r7, #23]
 80059f0:	e000      	b.n	80059f4 <HAL_SPI_Receive+0x208>
  }

error :
 80059f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b08c      	sub	sp, #48	; 0x30
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x26>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e18a      	b.n	8005d4a <HAL_SPI_TransmitReceive+0x33c>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a3c:	f7fc f958 	bl	8001cf0 <HAL_GetTick>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a52:	887b      	ldrh	r3, [r7, #2]
 8005a54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d00f      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x70>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a64:	d107      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x68>
 8005a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d003      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a76:	2302      	movs	r3, #2
 8005a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a7c:	e15b      	b.n	8005d36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_SPI_TransmitReceive+0x82>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_SPI_TransmitReceive+0x82>
 8005a8a:	887b      	ldrh	r3, [r7, #2]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a96:	e14e      	b.n	8005d36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d003      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2205      	movs	r2, #5
 8005aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	887a      	ldrh	r2, [r7, #2]
 8005abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	887a      	ldrh	r2, [r7, #2]
 8005ac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	887a      	ldrh	r2, [r7, #2]
 8005ace:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	887a      	ldrh	r2, [r7, #2]
 8005ad4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d007      	beq.n	8005b00 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b08:	d178      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0x10a>
 8005b12:	8b7b      	ldrh	r3, [r7, #26]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d166      	bne.n	8005be6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	881a      	ldrh	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	1c9a      	adds	r2, r3, #2
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b3c:	e053      	b.n	8005be6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d11b      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x176>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d016      	beq.n	8005b84 <HAL_SPI_TransmitReceive+0x176>
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d113      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	1c9a      	adds	r2, r3, #2
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d119      	bne.n	8005bc6 <HAL_SPI_TransmitReceive+0x1b8>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d014      	beq.n	8005bc6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	b292      	uxth	r2, r2
 8005ba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	1c9a      	adds	r2, r3, #2
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bc6:	f7fc f893 	bl	8001cf0 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d807      	bhi.n	8005be6 <HAL_SPI_TransmitReceive+0x1d8>
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d003      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005be4:	e0a7      	b.n	8005d36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1a6      	bne.n	8005b3e <HAL_SPI_TransmitReceive+0x130>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1a1      	bne.n	8005b3e <HAL_SPI_TransmitReceive+0x130>
 8005bfa:	e07c      	b.n	8005cf6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x1fc>
 8005c04:	8b7b      	ldrh	r3, [r7, #26]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d16b      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c30:	e057      	b.n	8005ce2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d11c      	bne.n	8005c7a <HAL_SPI_TransmitReceive+0x26c>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d017      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x26c>
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d114      	bne.n	8005c7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	7812      	ldrb	r2, [r2, #0]
 8005c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d119      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x2ae>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d014      	beq.n	8005cbc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cbc:	f7fc f818 	bl	8001cf0 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d803      	bhi.n	8005cd4 <HAL_SPI_TransmitReceive+0x2c6>
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d102      	bne.n	8005cda <HAL_SPI_TransmitReceive+0x2cc>
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ce0:	e029      	b.n	8005d36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1a2      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x224>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d19d      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f926 	bl	8005f4c <SPI_EndRxTxTransaction>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d006      	beq.n	8005d14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d12:	e010      	b.n	8005d36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10b      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	e000      	b.n	8005d36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3730      	adds	r7, #48	; 0x30
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d60:	b2db      	uxtb	r3, r3
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d80:	f7fb ffb6 	bl	8001cf0 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	1a9b      	subs	r3, r3, r2
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d90:	f7fb ffae 	bl	8001cf0 <HAL_GetTick>
 8005d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d96:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	015b      	lsls	r3, r3, #5
 8005d9c:	0d1b      	lsrs	r3, r3, #20
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	fb02 f303 	mul.w	r3, r2, r3
 8005da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005da6:	e054      	b.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d050      	beq.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005db0:	f7fb ff9e 	bl	8001cf0 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d902      	bls.n	8005dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d13d      	bne.n	8005e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dde:	d111      	bne.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de8:	d004      	beq.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df2:	d107      	bne.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0c:	d10f      	bne.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e017      	b.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	bf0c      	ite	eq
 8005e62:	2301      	moveq	r3, #1
 8005e64:	2300      	movne	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d19b      	bne.n	8005da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000000 	.word	0x20000000

08005e80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e94:	d111      	bne.n	8005eba <SPI_EndRxTransaction+0x3a>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9e:	d004      	beq.n	8005eaa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea8:	d107      	bne.n	8005eba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec2:	d12a      	bne.n	8005f1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ecc:	d012      	beq.n	8005ef4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2180      	movs	r1, #128	; 0x80
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff ff49 	bl	8005d70 <SPI_WaitFlagStateUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02d      	beq.n	8005f40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	f043 0220 	orr.w	r2, r3, #32
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e026      	b.n	8005f42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2200      	movs	r2, #0
 8005efc:	2101      	movs	r1, #1
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff ff36 	bl	8005d70 <SPI_WaitFlagStateUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01a      	beq.n	8005f40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e013      	b.n	8005f42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2200      	movs	r2, #0
 8005f22:	2101      	movs	r1, #1
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff ff23 	bl	8005d70 <SPI_WaitFlagStateUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f34:	f043 0220 	orr.w	r2, r3, #32
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e000      	b.n	8005f42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f58:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <SPI_EndRxTxTransaction+0x7c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a1b      	ldr	r2, [pc, #108]	; (8005fcc <SPI_EndRxTxTransaction+0x80>)
 8005f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f62:	0d5b      	lsrs	r3, r3, #21
 8005f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f68:	fb02 f303 	mul.w	r3, r2, r3
 8005f6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f76:	d112      	bne.n	8005f9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2180      	movs	r1, #128	; 0x80
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fef4 	bl	8005d70 <SPI_WaitFlagStateUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d016      	beq.n	8005fbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	f043 0220 	orr.w	r2, r3, #32
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e00f      	b.n	8005fbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b80      	cmp	r3, #128	; 0x80
 8005fb6:	d0f2      	beq.n	8005f9e <SPI_EndRxTxTransaction+0x52>
 8005fb8:	e000      	b.n	8005fbc <SPI_EndRxTxTransaction+0x70>
        break;
 8005fba:	bf00      	nop
  }

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000000 	.word	0x20000000
 8005fcc:	165e9f81 	.word	0x165e9f81

08005fd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d123      	bne.n	800602a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	6851      	ldr	r1, [r2, #4]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	6892      	ldr	r2, [r2, #8]
 8005ff6:	4311      	orrs	r1, r2
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	68d2      	ldr	r2, [r2, #12]
 8005ffc:	4311      	orrs	r1, r2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	6912      	ldr	r2, [r2, #16]
 8006002:	4311      	orrs	r1, r2
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	6952      	ldr	r2, [r2, #20]
 8006008:	4311      	orrs	r1, r2
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	6992      	ldr	r2, [r2, #24]
 800600e:	4311      	orrs	r1, r2
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	69d2      	ldr	r2, [r2, #28]
 8006014:	4311      	orrs	r1, r2
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	6a12      	ldr	r2, [r2, #32]
 800601a:	4311      	orrs	r1, r2
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006020:	430a      	orrs	r2, r1
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e028      	b.n	800607c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	69d9      	ldr	r1, [r3, #28]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	4319      	orrs	r1, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	430b      	orrs	r3, r1
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006050:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	6851      	ldr	r1, [r2, #4]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	6892      	ldr	r2, [r2, #8]
 800605c:	4311      	orrs	r1, r2
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	68d2      	ldr	r2, [r2, #12]
 8006062:	4311      	orrs	r1, r2
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	6912      	ldr	r2, [r2, #16]
 8006068:	4311      	orrs	r1, r2
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	6952      	ldr	r2, [r2, #20]
 800606e:	4311      	orrs	r1, r2
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	6992      	ldr	r2, [r2, #24]
 8006074:	430a      	orrs	r2, r1
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d128      	bne.n	80060ee <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	1e59      	subs	r1, r3, #1
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	4319      	orrs	r1, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	4319      	orrs	r1, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	4319      	orrs	r1, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	041b      	lsls	r3, r3, #16
 80060d0:	4319      	orrs	r1, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	051b      	lsls	r3, r3, #20
 80060da:	4319      	orrs	r1, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	430b      	orrs	r3, r1
 80060e6:	431a      	orrs	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	e02f      	b.n	800614e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	68d2      	ldr	r2, [r2, #12]
 80060fe:	3a01      	subs	r2, #1
 8006100:	0311      	lsls	r1, r2, #12
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	6952      	ldr	r2, [r2, #20]
 8006106:	3a01      	subs	r2, #1
 8006108:	0512      	lsls	r2, r2, #20
 800610a:	430a      	orrs	r2, r1
 800610c:	431a      	orrs	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	1e59      	subs	r1, r3, #1
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	3b01      	subs	r3, #1
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	4319      	orrs	r1, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	3b01      	subs	r3, #1
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	4319      	orrs	r1, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	3b01      	subs	r3, #1
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	4319      	orrs	r1, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	3b01      	subs	r3, #1
 8006144:	061b      	lsls	r3, r3, #24
 8006146:	430b      	orrs	r3, r1
 8006148:	431a      	orrs	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	0d9b      	lsrs	r3, r3, #22
 8006172:	059b      	lsls	r3, r3, #22
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	6811      	ldr	r1, [r2, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	4311      	orrs	r1, r2
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	6892      	ldr	r2, [r2, #8]
 8006182:	3a01      	subs	r2, #1
 8006184:	0152      	lsls	r2, r2, #5
 8006186:	4311      	orrs	r1, r2
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	68d2      	ldr	r2, [r2, #12]
 800618c:	0252      	lsls	r2, r2, #9
 800618e:	430a      	orrs	r2, r1
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006196:	f7fb fdab 	bl	8001cf0 <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800619c:	e010      	b.n	80061c0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d00c      	beq.n	80061c0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <FMC_SDRAM_SendCommand+0x60>
 80061ac:	f7fb fda0 	bl	8001cf0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d201      	bcs.n	80061c0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e006      	b.n	80061ce <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d0e8      	beq.n	800619e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80061e8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	0052      	lsls	r2, r2, #1
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006204:	b084      	sub	sp, #16
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	f107 001c 	add.w	r0, r7, #28
 8006212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	2b01      	cmp	r3, #1
 800621a:	d122      	bne.n	8006262 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006246:	2b01      	cmp	r3, #1
 8006248:	d105      	bne.n	8006256 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 fbee 	bl	8007a38 <USB_CoreReset>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]
 8006260:	e01a      	b.n	8006298 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fbe2 	bl	8007a38 <USB_CoreReset>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
 800628a:	e005      	b.n	8006298 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10b      	bne.n	80062b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f043 0206 	orr.w	r2, r3, #6
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f043 0220 	orr.w	r2, r3, #32
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062c2:	b004      	add	sp, #16
 80062c4:	4770      	bx	lr
	...

080062c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d165      	bne.n	80063a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a41      	ldr	r2, [pc, #260]	; (80063e4 <USB_SetTurnaroundTime+0x11c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d906      	bls.n	80062f2 <USB_SetTurnaroundTime+0x2a>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4a40      	ldr	r2, [pc, #256]	; (80063e8 <USB_SetTurnaroundTime+0x120>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d202      	bcs.n	80062f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062ec:	230f      	movs	r3, #15
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	e062      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a3c      	ldr	r2, [pc, #240]	; (80063e8 <USB_SetTurnaroundTime+0x120>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d306      	bcc.n	8006308 <USB_SetTurnaroundTime+0x40>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4a3b      	ldr	r2, [pc, #236]	; (80063ec <USB_SetTurnaroundTime+0x124>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d202      	bcs.n	8006308 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006302:	230e      	movs	r3, #14
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e057      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a38      	ldr	r2, [pc, #224]	; (80063ec <USB_SetTurnaroundTime+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d306      	bcc.n	800631e <USB_SetTurnaroundTime+0x56>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4a37      	ldr	r2, [pc, #220]	; (80063f0 <USB_SetTurnaroundTime+0x128>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d202      	bcs.n	800631e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006318:	230d      	movs	r3, #13
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	e04c      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4a33      	ldr	r2, [pc, #204]	; (80063f0 <USB_SetTurnaroundTime+0x128>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d306      	bcc.n	8006334 <USB_SetTurnaroundTime+0x6c>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4a32      	ldr	r2, [pc, #200]	; (80063f4 <USB_SetTurnaroundTime+0x12c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d802      	bhi.n	8006334 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800632e:	230c      	movs	r3, #12
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	e041      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4a2f      	ldr	r2, [pc, #188]	; (80063f4 <USB_SetTurnaroundTime+0x12c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d906      	bls.n	800634a <USB_SetTurnaroundTime+0x82>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4a2e      	ldr	r2, [pc, #184]	; (80063f8 <USB_SetTurnaroundTime+0x130>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d802      	bhi.n	800634a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006344:	230b      	movs	r3, #11
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	e036      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4a2a      	ldr	r2, [pc, #168]	; (80063f8 <USB_SetTurnaroundTime+0x130>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d906      	bls.n	8006360 <USB_SetTurnaroundTime+0x98>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4a29      	ldr	r2, [pc, #164]	; (80063fc <USB_SetTurnaroundTime+0x134>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d802      	bhi.n	8006360 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800635a:	230a      	movs	r3, #10
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	e02b      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4a26      	ldr	r2, [pc, #152]	; (80063fc <USB_SetTurnaroundTime+0x134>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d906      	bls.n	8006376 <USB_SetTurnaroundTime+0xae>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4a25      	ldr	r2, [pc, #148]	; (8006400 <USB_SetTurnaroundTime+0x138>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d202      	bcs.n	8006376 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006370:	2309      	movs	r3, #9
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e020      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4a21      	ldr	r2, [pc, #132]	; (8006400 <USB_SetTurnaroundTime+0x138>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d306      	bcc.n	800638c <USB_SetTurnaroundTime+0xc4>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4a20      	ldr	r2, [pc, #128]	; (8006404 <USB_SetTurnaroundTime+0x13c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d802      	bhi.n	800638c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006386:	2308      	movs	r3, #8
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	e015      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <USB_SetTurnaroundTime+0x13c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d906      	bls.n	80063a2 <USB_SetTurnaroundTime+0xda>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4a1c      	ldr	r2, [pc, #112]	; (8006408 <USB_SetTurnaroundTime+0x140>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d202      	bcs.n	80063a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800639c:	2307      	movs	r3, #7
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e00a      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063a2:	2306      	movs	r3, #6
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e007      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063ae:	2309      	movs	r3, #9
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	e001      	b.n	80063b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063b4:	2309      	movs	r3, #9
 80063b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	029b      	lsls	r3, r3, #10
 80063cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	00d8acbf 	.word	0x00d8acbf
 80063e8:	00e4e1c0 	.word	0x00e4e1c0
 80063ec:	00f42400 	.word	0x00f42400
 80063f0:	01067380 	.word	0x01067380
 80063f4:	011a499f 	.word	0x011a499f
 80063f8:	01312cff 	.word	0x01312cff
 80063fc:	014ca43f 	.word	0x014ca43f
 8006400:	016e3600 	.word	0x016e3600
 8006404:	01a6ab1f 	.word	0x01a6ab1f
 8006408:	01e84800 	.word	0x01e84800

0800640c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f043 0201 	orr.w	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f023 0201 	bic.w	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d115      	bne.n	800649e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800647e:	2001      	movs	r0, #1
 8006480:	f7fb fc42 	bl	8001d08 <HAL_Delay>
      ms++;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3301      	adds	r3, #1
 8006488:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fa45 	bl	800791a <USB_GetMode>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d01e      	beq.n	80064d4 <USB_SetCurrentMode+0x84>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b31      	cmp	r3, #49	; 0x31
 800649a:	d9f0      	bls.n	800647e <USB_SetCurrentMode+0x2e>
 800649c:	e01a      	b.n	80064d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d115      	bne.n	80064d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064b0:	2001      	movs	r0, #1
 80064b2:	f7fb fc29 	bl	8001d08 <HAL_Delay>
      ms++;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fa2c 	bl	800791a <USB_GetMode>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <USB_SetCurrentMode+0x84>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b31      	cmp	r3, #49	; 0x31
 80064cc:	d9f0      	bls.n	80064b0 <USB_SetCurrentMode+0x60>
 80064ce:	e001      	b.n	80064d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e005      	b.n	80064e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b32      	cmp	r3, #50	; 0x32
 80064d8:	d101      	bne.n	80064de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064e8:	b084      	sub	sp, #16
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	e009      	b.n	800651c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3340      	adds	r3, #64	; 0x40
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	2200      	movs	r2, #0
 8006514:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3301      	adds	r3, #1
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b0e      	cmp	r3, #14
 8006520:	d9f2      	bls.n	8006508 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11c      	bne.n	8006562 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006536:	f043 0302 	orr.w	r3, r3, #2
 800653a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
 8006560:	e00b      	b.n	800657a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006580:	461a      	mov	r2, r3
 8006582:	2300      	movs	r3, #0
 8006584:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	4619      	mov	r1, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006594:	461a      	mov	r2, r3
 8006596:	680b      	ldr	r3, [r1, #0]
 8006598:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	2b01      	cmp	r3, #1
 800659e:	d10c      	bne.n	80065ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d104      	bne.n	80065b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065a6:	2100      	movs	r1, #0
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f965 	bl	8006878 <USB_SetDevSpeed>
 80065ae:	e008      	b.n	80065c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065b0:	2101      	movs	r1, #1
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f960 	bl	8006878 <USB_SetDevSpeed>
 80065b8:	e003      	b.n	80065c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065ba:	2103      	movs	r1, #3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f95b 	bl	8006878 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065c2:	2110      	movs	r1, #16
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f8f3 	bl	80067b0 <USB_FlushTxFifo>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f91f 	bl	8006818 <USB_FlushRxFifo>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	461a      	mov	r2, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006602:	461a      	mov	r2, r3
 8006604:	2300      	movs	r3, #0
 8006606:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	e043      	b.n	8006696 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006624:	d118      	bne.n	8006658 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	461a      	mov	r2, r3
 800663a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	e013      	b.n	800666a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	461a      	mov	r2, r3
 8006650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e008      	b.n	800666a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	461a      	mov	r2, r3
 8006666:	2300      	movs	r3, #0
 8006668:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006676:	461a      	mov	r2, r3
 8006678:	2300      	movs	r3, #0
 800667a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	461a      	mov	r2, r3
 800668a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800668e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	3301      	adds	r3, #1
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	429a      	cmp	r2, r3
 800669c:	d3b7      	bcc.n	800660e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	e043      	b.n	800672c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ba:	d118      	bne.n	80066ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ce:	461a      	mov	r2, r3
 80066d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	e013      	b.n	8006700 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e4:	461a      	mov	r2, r3
 80066e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	e008      	b.n	8006700 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fa:	461a      	mov	r2, r3
 80066fc:	2300      	movs	r3, #0
 80066fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670c:	461a      	mov	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671e:	461a      	mov	r2, r3
 8006720:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006724:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3301      	adds	r3, #1
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	429a      	cmp	r2, r3
 8006732:	d3b7      	bcc.n	80066a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006742:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006746:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006754:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	f043 0210 	orr.w	r2, r3, #16
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <USB_DevInit+0x2c4>)
 800676e:	4313      	orrs	r3, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f043 0208 	orr.w	r2, r3, #8
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d107      	bne.n	800679c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006794:	f043 0304 	orr.w	r3, r3, #4
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800679c:	7dfb      	ldrb	r3, [r7, #23]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067a8:	b004      	add	sp, #16
 80067aa:	4770      	bx	lr
 80067ac:	803c3800 	.word	0x803c3800

080067b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a13      	ldr	r2, [pc, #76]	; (8006814 <USB_FlushTxFifo+0x64>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d901      	bls.n	80067d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e01b      	b.n	8006808 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	daf2      	bge.n	80067be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	019b      	lsls	r3, r3, #6
 80067e0:	f043 0220 	orr.w	r2, r3, #32
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4a08      	ldr	r2, [pc, #32]	; (8006814 <USB_FlushTxFifo+0x64>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e006      	b.n	8006808 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b20      	cmp	r3, #32
 8006804:	d0f0      	beq.n	80067e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	00030d40 	.word	0x00030d40

08006818 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4a11      	ldr	r2, [pc, #68]	; (8006874 <USB_FlushRxFifo+0x5c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e018      	b.n	8006868 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	daf2      	bge.n	8006824 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2210      	movs	r2, #16
 8006846:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a08      	ldr	r2, [pc, #32]	; (8006874 <USB_FlushRxFifo+0x5c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e006      	b.n	8006868 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b10      	cmp	r3, #16
 8006864:	d0f0      	beq.n	8006848 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	00030d40 	.word	0x00030d40

08006878 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	68f9      	ldr	r1, [r7, #12]
 8006894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006898:	4313      	orrs	r3, r2
 800689a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 0306 	and.w	r3, r3, #6
 80068c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d102      	bne.n	80068d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]
 80068ce:	e00a      	b.n	80068e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d002      	beq.n	80068dc <USB_GetDevSpeed+0x32>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b06      	cmp	r3, #6
 80068da:	d102      	bne.n	80068e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068dc:	2302      	movs	r3, #2
 80068de:	75fb      	strb	r3, [r7, #23]
 80068e0:	e001      	b.n	80068e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068e2:	230f      	movs	r3, #15
 80068e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d13a      	bne.n	8006986 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	2101      	movs	r1, #1
 8006922:	fa01 f303 	lsl.w	r3, r1, r3
 8006926:	b29b      	uxth	r3, r3
 8006928:	68f9      	ldr	r1, [r7, #12]
 800692a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800692e:	4313      	orrs	r3, r2
 8006930:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d155      	bne.n	80069f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	791b      	ldrb	r3, [r3, #4]
 8006962:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006964:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	059b      	lsls	r3, r3, #22
 800696a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800696c:	4313      	orrs	r3, r2
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	e036      	b.n	80069f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	2101      	movs	r1, #1
 8006998:	fa01 f303 	lsl.w	r3, r1, r3
 800699c:	041b      	lsls	r3, r3, #16
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069a4:	4313      	orrs	r3, r2
 80069a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d11a      	bne.n	80069f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	791b      	ldrb	r3, [r3, #4]
 80069d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069da:	430b      	orrs	r3, r1
 80069dc:	4313      	orrs	r3, r2
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d161      	bne.n	8006ae4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a36:	d11f      	bne.n	8006a78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	2101      	movs	r1, #1
 8006a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a98:	4013      	ands	r3, r2
 8006a9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	2101      	movs	r1, #1
 8006aae:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006abc:	4013      	ands	r3, r2
 8006abe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	0159      	lsls	r1, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	440b      	add	r3, r1
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ada:	4619      	mov	r1, r3
 8006adc:	4b35      	ldr	r3, [pc, #212]	; (8006bb4 <USB_DeactivateEndpoint+0x1b0>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	600b      	str	r3, [r1, #0]
 8006ae2:	e060      	b.n	8006ba6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006afa:	d11f      	bne.n	8006b3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b52:	041b      	lsls	r3, r3, #16
 8006b54:	43db      	mvns	r3, r3
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b66:	69da      	ldr	r2, [r3, #28]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f303 	lsl.w	r3, r1, r3
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b80:	4013      	ands	r3, r2
 8006b82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	0159      	lsls	r1, r3, #5
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	440b      	add	r3, r1
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <USB_DeactivateEndpoint+0x1b4>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	ec337800 	.word	0xec337800
 8006bb8:	eff37800 	.word	0xeff37800

08006bbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	f040 815c 	bne.w	8006e96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d132      	bne.n	8006c4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	0151      	lsls	r1, r2, #5
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	440a      	add	r2, r1
 8006c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	0151      	lsls	r1, r2, #5
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	440a      	add	r2, r1
 8006c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c44:	0cdb      	lsrs	r3, r3, #19
 8006c46:	04db      	lsls	r3, r3, #19
 8006c48:	6113      	str	r3, [r2, #16]
 8006c4a:	e074      	b.n	8006d36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c66:	0cdb      	lsrs	r3, r3, #19
 8006c68:	04db      	lsls	r3, r3, #19
 8006c6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	6999      	ldr	r1, [r3, #24]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	440b      	add	r3, r1
 8006ca8:	1e59      	subs	r1, r3, #1
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cb2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006cb4:	4b9d      	ldr	r3, [pc, #628]	; (8006f2c <USB_EPStartXfer+0x370>)
 8006cb6:	400b      	ands	r3, r1
 8006cb8:	69b9      	ldr	r1, [r7, #24]
 8006cba:	0148      	lsls	r0, r1, #5
 8006cbc:	69f9      	ldr	r1, [r7, #28]
 8006cbe:	4401      	add	r1, r0
 8006cc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cde:	69b9      	ldr	r1, [r7, #24]
 8006ce0:	0148      	lsls	r0, r1, #5
 8006ce2:	69f9      	ldr	r1, [r7, #28]
 8006ce4:	4401      	add	r1, r0
 8006ce6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cea:	4313      	orrs	r3, r2
 8006cec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	791b      	ldrb	r3, [r3, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d11f      	bne.n	8006d36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	0151      	lsls	r1, r2, #5
 8006d28:	69fa      	ldr	r2, [r7, #28]
 8006d2a:	440a      	add	r2, r1
 8006d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d14b      	bne.n	8006dd4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d50:	461a      	mov	r2, r3
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	791b      	ldrb	r3, [r3, #4]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d128      	bne.n	8006db2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d110      	bne.n	8006d92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e00f      	b.n	8006db2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	e133      	b.n	800703c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006df2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	791b      	ldrb	r3, [r3, #4]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d015      	beq.n	8006e28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 811b 	beq.w	800703c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	2101      	movs	r1, #1
 8006e18:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1c:	69f9      	ldr	r1, [r7, #28]
 8006e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e22:	4313      	orrs	r3, r2
 8006e24:	634b      	str	r3, [r1, #52]	; 0x34
 8006e26:	e109      	b.n	800703c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d110      	bne.n	8006e5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	0151      	lsls	r1, r2, #5
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	e00f      	b.n	8006e7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	0151      	lsls	r1, r2, #5
 8006e6c:	69fa      	ldr	r2, [r7, #28]
 8006e6e:	440a      	add	r2, r1
 8006e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6919      	ldr	r1, [r3, #16]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	b298      	uxth	r0, r3
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fade 	bl	8007450 <USB_WritePacket>
 8006e94:	e0d2      	b.n	800703c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb0:	0cdb      	lsrs	r3, r3, #19
 8006eb2:	04db      	lsls	r3, r3, #19
 8006eb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ed4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ed8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d126      	bne.n	8006f30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef8:	69b9      	ldr	r1, [r7, #24]
 8006efa:	0148      	lsls	r0, r1, #5
 8006efc:	69f9      	ldr	r1, [r7, #28]
 8006efe:	4401      	add	r1, r0
 8006f00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f04:	4313      	orrs	r3, r2
 8006f06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f26:	6113      	str	r3, [r2, #16]
 8006f28:	e03a      	b.n	8006fa0 <USB_EPStartXfer+0x3e4>
 8006f2a:	bf00      	nop
 8006f2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	699a      	ldr	r2, [r3, #24]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	1e5a      	subs	r2, r3, #1
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f44:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	8afa      	ldrh	r2, [r7, #22]
 8006f4c:	fb03 f202 	mul.w	r2, r3, r2
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f60:	691a      	ldr	r2, [r3, #16]
 8006f62:	8afb      	ldrh	r3, [r7, #22]
 8006f64:	04d9      	lsls	r1, r3, #19
 8006f66:	4b38      	ldr	r3, [pc, #224]	; (8007048 <USB_EPStartXfer+0x48c>)
 8006f68:	400b      	ands	r3, r1
 8006f6a:	69b9      	ldr	r1, [r7, #24]
 8006f6c:	0148      	lsls	r0, r1, #5
 8006f6e:	69f9      	ldr	r1, [r7, #28]
 8006f70:	4401      	add	r1, r0
 8006f72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f76:	4313      	orrs	r3, r2
 8006f78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f90:	69b9      	ldr	r1, [r7, #24]
 8006f92:	0148      	lsls	r0, r1, #5
 8006f94:	69f9      	ldr	r1, [r7, #28]
 8006f96:	4401      	add	r1, r0
 8006f98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d10d      	bne.n	8006fc2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6919      	ldr	r1, [r3, #16]
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	791b      	ldrb	r3, [r3, #4]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d128      	bne.n	800701c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d110      	bne.n	8006ffc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	e00f      	b.n	800701c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800701a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800703a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	1ff80000 	.word	0x1ff80000

0800704c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b01      	cmp	r3, #1
 800706a:	f040 80ce 	bne.w	800720a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d132      	bne.n	80070dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	0151      	lsls	r1, r2, #5
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	440a      	add	r2, r1
 800708c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007090:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007094:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007098:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	0151      	lsls	r1, r2, #5
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	440a      	add	r2, r1
 80070d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d4:	0cdb      	lsrs	r3, r3, #19
 80070d6:	04db      	lsls	r3, r3, #19
 80070d8:	6113      	str	r3, [r2, #16]
 80070da:	e04e      	b.n	800717a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f6:	0cdb      	lsrs	r3, r3, #19
 80070f8:	04db      	lsls	r3, r3, #19
 80070fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	440a      	add	r2, r1
 8007112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007116:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800711a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800711e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	429a      	cmp	r2, r3
 800712a:	d903      	bls.n	8007134 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800714e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800716a:	6939      	ldr	r1, [r7, #16]
 800716c:	0148      	lsls	r0, r1, #5
 800716e:	6979      	ldr	r1, [r7, #20]
 8007170:	4401      	add	r1, r0
 8007172:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007176:	4313      	orrs	r3, r2
 8007178:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d11e      	bne.n	80071be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d009      	beq.n	800719c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007194:	461a      	mov	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	e097      	b.n	80072ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8083 	beq.w	80072ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	2101      	movs	r1, #1
 80071fa:	fa01 f303 	lsl.w	r3, r1, r3
 80071fe:	6979      	ldr	r1, [r7, #20]
 8007200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007204:	4313      	orrs	r3, r2
 8007206:	634b      	str	r3, [r1, #52]	; 0x34
 8007208:	e071      	b.n	80072ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	0151      	lsls	r1, r2, #5
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	440a      	add	r2, r1
 8007220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007224:	0cdb      	lsrs	r3, r3, #19
 8007226:	04db      	lsls	r3, r3, #19
 8007228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	0151      	lsls	r1, r2, #5
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	440a      	add	r2, r1
 8007240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800724c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	440a      	add	r2, r1
 800727c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007284:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007292:	691a      	ldr	r2, [r3, #16]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800729c:	6939      	ldr	r1, [r7, #16]
 800729e:	0148      	lsls	r0, r1, #5
 80072a0:	6979      	ldr	r1, [r7, #20]
 80072a2:	4401      	add	r1, r0
 80072a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072a8:	4313      	orrs	r3, r2
 80072aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d10d      	bne.n	80072ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d009      	beq.n	80072ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6919      	ldr	r1, [r3, #16]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ca:	460a      	mov	r2, r1
 80072cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	785b      	ldrb	r3, [r3, #1]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d14a      	bne.n	80073b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800732e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007332:	f040 8086 	bne.w	8007442 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007354:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007358:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	7812      	ldrb	r2, [r2, #0]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800737c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f242 7210 	movw	r2, #10000	; 0x2710
 800738a:	4293      	cmp	r3, r2
 800738c:	d902      	bls.n	8007394 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
          break;
 8007392:	e056      	b.n	8007442 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073ac:	d0e7      	beq.n	800737e <USB_EPStopXfer+0x82>
 80073ae:	e048      	b.n	8007442 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c8:	d13b      	bne.n	8007442 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007410:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f242 7210 	movw	r2, #10000	; 0x2710
 800741e:	4293      	cmp	r3, r2
 8007420:	d902      	bls.n	8007428 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
          break;
 8007426:	e00c      	b.n	8007442 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800743c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007440:	d0e7      	beq.n	8007412 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
}
 8007444:	4618      	mov	r0, r3
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007450:	b480      	push	{r7}
 8007452:	b089      	sub	sp, #36	; 0x24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4611      	mov	r1, r2
 800745c:	461a      	mov	r2, r3
 800745e:	460b      	mov	r3, r1
 8007460:	71fb      	strb	r3, [r7, #7]
 8007462:	4613      	mov	r3, r2
 8007464:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800746e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d123      	bne.n	80074be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007476:	88bb      	ldrh	r3, [r7, #4]
 8007478:	3303      	adds	r3, #3
 800747a:	089b      	lsrs	r3, r3, #2
 800747c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e018      	b.n	80074b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	031a      	lsls	r2, r3, #12
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	4413      	add	r3, r2
 800748c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007490:	461a      	mov	r2, r3
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	3301      	adds	r3, #1
 800749c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	3301      	adds	r3, #1
 80074a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	3301      	adds	r3, #1
 80074a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	3301      	adds	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d3e2      	bcc.n	8007484 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3724      	adds	r7, #36	; 0x24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b08b      	sub	sp, #44	; 0x2c
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	089b      	lsrs	r3, r3, #2
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074f2:	2300      	movs	r3, #0
 80074f4:	623b      	str	r3, [r7, #32]
 80074f6:	e014      	b.n	8007522 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	601a      	str	r2, [r3, #0]
    pDest++;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	3301      	adds	r3, #1
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	3301      	adds	r3, #1
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	3301      	adds	r3, #1
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	3301      	adds	r3, #1
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	3301      	adds	r3, #1
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	6a3a      	ldr	r2, [r7, #32]
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	429a      	cmp	r2, r3
 8007528:	d3e6      	bcc.n	80074f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800752a:	8bfb      	ldrh	r3, [r7, #30]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01e      	beq.n	800756e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753a:	461a      	mov	r2, r3
 800753c:	f107 0310 	add.w	r3, r7, #16
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	fa22 f303 	lsr.w	r3, r2, r3
 8007550:	b2da      	uxtb	r2, r3
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	701a      	strb	r2, [r3, #0]
      i++;
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	3301      	adds	r3, #1
 800755a:	623b      	str	r3, [r7, #32]
      pDest++;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	3301      	adds	r3, #1
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007562:	8bfb      	ldrh	r3, [r7, #30]
 8007564:	3b01      	subs	r3, #1
 8007566:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007568:	8bfb      	ldrh	r3, [r7, #30]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1ea      	bne.n	8007544 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007570:	4618      	mov	r0, r3
 8007572:	372c      	adds	r7, #44	; 0x2c
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d12c      	bne.n	80075f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	db12      	blt.n	80075d0 <USB_EPSetStall+0x54>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00f      	beq.n	80075d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	e02b      	b.n	800764a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	db12      	blt.n	800762a <USB_EPSetStall+0xae>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00f      	beq.n	800762a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007624:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007628:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007648:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d128      	bne.n	80076c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	0151      	lsls	r1, r2, #5
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	440a      	add	r2, r1
 800768a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800768e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007692:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	791b      	ldrb	r3, [r3, #4]
 8007698:	2b03      	cmp	r3, #3
 800769a:	d003      	beq.n	80076a4 <USB_EPClearStall+0x4c>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	791b      	ldrb	r3, [r3, #4]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d138      	bne.n	8007716 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	e027      	b.n	8007716 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	0151      	lsls	r1, r2, #5
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	440a      	add	r2, r1
 80076dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d003      	beq.n	80076f6 <USB_EPClearStall+0x9e>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	791b      	ldrb	r3, [r3, #4]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d10f      	bne.n	8007716 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007714:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007742:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007746:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007758:	68f9      	ldr	r1, [r7, #12]
 800775a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800775e:	4313      	orrs	r3, r2
 8007760:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800779e:	f023 0302 	bic.w	r3, r3, #2
 80077a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077cc:	f023 0303 	bic.w	r3, r3, #3
 80077d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077e0:	f043 0302 	orr.w	r3, r3, #2
 80077e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4013      	ands	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800780c:	68fb      	ldr	r3, [r7, #12]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	4013      	ands	r3, r2
 800783c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	0c1b      	lsrs	r3, r3, #16
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	4013      	ands	r3, r2
 8007870:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	b29b      	uxth	r3, r3
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	4013      	ands	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078b0:	68bb      	ldr	r3, [r7, #8]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078be:	b480      	push	{r7}
 80078c0:	b087      	sub	sp, #28
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	460b      	mov	r3, r1
 80078c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	fa22 f303 	lsr.w	r3, r2, r3
 80078ee:	01db      	lsls	r3, r3, #7
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4013      	ands	r3, r2
 800790a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800790c:	68bb      	ldr	r3, [r7, #8]
}
 800790e:	4618      	mov	r0, r3
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	f003 0301 	and.w	r3, r3, #1
}
 800792a:	4618      	mov	r0, r3
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007950:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007954:	f023 0307 	bic.w	r3, r3, #7
 8007958:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800796c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	460b      	mov	r3, r1
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	333c      	adds	r3, #60	; 0x3c
 8007992:	3304      	adds	r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4a26      	ldr	r2, [pc, #152]	; (8007a34 <USB_EP0_OutStart+0xb8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d90a      	bls.n	80079b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b0:	d101      	bne.n	80079b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e037      	b.n	8007a26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079bc:	461a      	mov	r2, r3
 80079be:	2300      	movs	r3, #0
 80079c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e4:	f043 0318 	orr.w	r3, r3, #24
 80079e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80079fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d10f      	bne.n	8007a24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	4f54300a 	.word	0x4f54300a

08007a38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4a13      	ldr	r2, [pc, #76]	; (8007a9c <USB_CoreReset+0x64>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d901      	bls.n	8007a56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e01b      	b.n	8007a8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	daf2      	bge.n	8007a44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f043 0201 	orr.w	r2, r3, #1
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3301      	adds	r3, #1
 8007a72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4a09      	ldr	r2, [pc, #36]	; (8007a9c <USB_CoreReset+0x64>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d901      	bls.n	8007a80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e006      	b.n	8007a8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d0f0      	beq.n	8007a6e <USB_CoreReset+0x36>

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	00030d40 	.word	0x00030d40

08007aa0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007aac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ab0:	f002 fc96 	bl	800a3e0 <USBD_static_malloc>
 8007ab4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	32b0      	adds	r2, #176	; 0xb0
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007acc:	2302      	movs	r3, #2
 8007ace:	e0d4      	b.n	8007c7a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ad0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f002 fcea 	bl	800a4b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32b0      	adds	r2, #176	; 0xb0
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32b0      	adds	r2, #176	; 0xb0
 8007af6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7c1b      	ldrb	r3, [r3, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d138      	bne.n	8007b7a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b08:	4b5e      	ldr	r3, [pc, #376]	; (8007c84 <USBD_CDC_Init+0x1e4>)
 8007b0a:	7819      	ldrb	r1, [r3, #0]
 8007b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b10:	2202      	movs	r2, #2
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f002 fb41 	bl	800a19a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b18:	4b5a      	ldr	r3, [pc, #360]	; (8007c84 <USBD_CDC_Init+0x1e4>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	f003 020f 	and.w	r2, r3, #15
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3324      	adds	r3, #36	; 0x24
 8007b2e:	2201      	movs	r2, #1
 8007b30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b32:	4b55      	ldr	r3, [pc, #340]	; (8007c88 <USBD_CDC_Init+0x1e8>)
 8007b34:	7819      	ldrb	r1, [r3, #0]
 8007b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f002 fb2c 	bl	800a19a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b42:	4b51      	ldr	r3, [pc, #324]	; (8007c88 <USBD_CDC_Init+0x1e8>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	f003 020f 	and.w	r2, r3, #15
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b5e:	4b4b      	ldr	r3, [pc, #300]	; (8007c8c <USBD_CDC_Init+0x1ec>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	f003 020f 	and.w	r2, r3, #15
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	3326      	adds	r3, #38	; 0x26
 8007b74:	2210      	movs	r2, #16
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	e035      	b.n	8007be6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b7a:	4b42      	ldr	r3, [pc, #264]	; (8007c84 <USBD_CDC_Init+0x1e4>)
 8007b7c:	7819      	ldrb	r1, [r3, #0]
 8007b7e:	2340      	movs	r3, #64	; 0x40
 8007b80:	2202      	movs	r2, #2
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f002 fb09 	bl	800a19a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b88:	4b3e      	ldr	r3, [pc, #248]	; (8007c84 <USBD_CDC_Init+0x1e4>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	f003 020f 	and.w	r2, r3, #15
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	440b      	add	r3, r1
 8007b9c:	3324      	adds	r3, #36	; 0x24
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ba2:	4b39      	ldr	r3, [pc, #228]	; (8007c88 <USBD_CDC_Init+0x1e8>)
 8007ba4:	7819      	ldrb	r1, [r3, #0]
 8007ba6:	2340      	movs	r3, #64	; 0x40
 8007ba8:	2202      	movs	r2, #2
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f002 faf5 	bl	800a19a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bb0:	4b35      	ldr	r3, [pc, #212]	; (8007c88 <USBD_CDC_Init+0x1e8>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	f003 020f 	and.w	r2, r3, #15
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bc8:	2201      	movs	r2, #1
 8007bca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bcc:	4b2f      	ldr	r3, [pc, #188]	; (8007c8c <USBD_CDC_Init+0x1ec>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f003 020f 	and.w	r2, r3, #15
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	3326      	adds	r3, #38	; 0x26
 8007be2:	2210      	movs	r2, #16
 8007be4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007be6:	4b29      	ldr	r3, [pc, #164]	; (8007c8c <USBD_CDC_Init+0x1ec>)
 8007be8:	7819      	ldrb	r1, [r3, #0]
 8007bea:	2308      	movs	r3, #8
 8007bec:	2203      	movs	r2, #3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f002 fad3 	bl	800a19a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <USBD_CDC_Init+0x1ec>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f003 020f 	and.w	r2, r3, #15
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	440b      	add	r3, r1
 8007c08:	3324      	adds	r3, #36	; 0x24
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	33b0      	adds	r3, #176	; 0xb0
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c44:	2302      	movs	r3, #2
 8007c46:	e018      	b.n	8007c7a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7c1b      	ldrb	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10a      	bne.n	8007c66 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c50:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <USBD_CDC_Init+0x1e8>)
 8007c52:	7819      	ldrb	r1, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f002 fb8a 	bl	800a378 <USBD_LL_PrepareReceive>
 8007c64:	e008      	b.n	8007c78 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c66:	4b08      	ldr	r3, [pc, #32]	; (8007c88 <USBD_CDC_Init+0x1e8>)
 8007c68:	7819      	ldrb	r1, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c70:	2340      	movs	r3, #64	; 0x40
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f002 fb80 	bl	800a378 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	200000db 	.word	0x200000db
 8007c88:	200000dc 	.word	0x200000dc
 8007c8c:	200000dd 	.word	0x200000dd

08007c90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c9c:	4b3a      	ldr	r3, [pc, #232]	; (8007d88 <USBD_CDC_DeInit+0xf8>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f002 fa9f 	bl	800a1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ca8:	4b37      	ldr	r3, [pc, #220]	; (8007d88 <USBD_CDC_DeInit+0xf8>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	f003 020f 	and.w	r2, r3, #15
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	440b      	add	r3, r1
 8007cbc:	3324      	adds	r3, #36	; 0x24
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cc2:	4b32      	ldr	r3, [pc, #200]	; (8007d8c <USBD_CDC_DeInit+0xfc>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f002 fa8c 	bl	800a1e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007cce:	4b2f      	ldr	r3, [pc, #188]	; (8007d8c <USBD_CDC_DeInit+0xfc>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	f003 020f 	and.w	r2, r3, #15
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007cea:	4b29      	ldr	r3, [pc, #164]	; (8007d90 <USBD_CDC_DeInit+0x100>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f002 fa78 	bl	800a1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007cf6:	4b26      	ldr	r3, [pc, #152]	; (8007d90 <USBD_CDC_DeInit+0x100>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	f003 020f 	and.w	r2, r3, #15
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	4613      	mov	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	3324      	adds	r3, #36	; 0x24
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d10:	4b1f      	ldr	r3, [pc, #124]	; (8007d90 <USBD_CDC_DeInit+0x100>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	f003 020f 	and.w	r2, r3, #15
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	3326      	adds	r3, #38	; 0x26
 8007d26:	2200      	movs	r2, #0
 8007d28:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	32b0      	adds	r2, #176	; 0xb0
 8007d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01f      	beq.n	8007d7c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	33b0      	adds	r3, #176	; 0xb0
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32b0      	adds	r2, #176	; 0xb0
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f002 fb4c 	bl	800a3fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	32b0      	adds	r2, #176	; 0xb0
 8007d6e:	2100      	movs	r1, #0
 8007d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	200000db 	.word	0x200000db
 8007d8c:	200000dc 	.word	0x200000dc
 8007d90:	200000dd 	.word	0x200000dd

08007d94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	32b0      	adds	r2, #176	; 0xb0
 8007da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e0bf      	b.n	8007f44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d050      	beq.n	8007e72 <USBD_CDC_Setup+0xde>
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	f040 80af 	bne.w	8007f34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	88db      	ldrh	r3, [r3, #6]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d03a      	beq.n	8007e54 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b25b      	sxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	da1b      	bge.n	8007e20 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	33b0      	adds	r3, #176	; 0xb0
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007dfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	88d2      	ldrh	r2, [r2, #6]
 8007e04:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	2b07      	cmp	r3, #7
 8007e0c:	bf28      	it	cs
 8007e0e:	2307      	movcs	r3, #7
 8007e10:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	89fa      	ldrh	r2, [r7, #14]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 fd89 	bl	8009930 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e1e:	e090      	b.n	8007f42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	785a      	ldrb	r2, [r3, #1]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	88db      	ldrh	r3, [r3, #6]
 8007e2e:	2b3f      	cmp	r3, #63	; 0x3f
 8007e30:	d803      	bhi.n	8007e3a <USBD_CDC_Setup+0xa6>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	88db      	ldrh	r3, [r3, #6]
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	e000      	b.n	8007e3c <USBD_CDC_Setup+0xa8>
 8007e3a:	2240      	movs	r2, #64	; 0x40
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e42:	6939      	ldr	r1, [r7, #16]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fd9b 	bl	8009988 <USBD_CtlPrepareRx>
      break;
 8007e52:	e076      	b.n	8007f42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	33b0      	adds	r3, #176	; 0xb0
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	7850      	ldrb	r0, [r2, #1]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	4798      	blx	r3
      break;
 8007e70:	e067      	b.n	8007f42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	2b0b      	cmp	r3, #11
 8007e78:	d851      	bhi.n	8007f1e <USBD_CDC_Setup+0x18a>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <USBD_CDC_Setup+0xec>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007eb1 	.word	0x08007eb1
 8007e84:	08007f2d 	.word	0x08007f2d
 8007e88:	08007f1f 	.word	0x08007f1f
 8007e8c:	08007f1f 	.word	0x08007f1f
 8007e90:	08007f1f 	.word	0x08007f1f
 8007e94:	08007f1f 	.word	0x08007f1f
 8007e98:	08007f1f 	.word	0x08007f1f
 8007e9c:	08007f1f 	.word	0x08007f1f
 8007ea0:	08007f1f 	.word	0x08007f1f
 8007ea4:	08007f1f 	.word	0x08007f1f
 8007ea8:	08007edb 	.word	0x08007edb
 8007eac:	08007f05 	.word	0x08007f05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d107      	bne.n	8007ecc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ebc:	f107 030a 	add.w	r3, r7, #10
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 fd33 	bl	8009930 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eca:	e032      	b.n	8007f32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 fcbd 	bl	800984e <USBD_CtlError>
            ret = USBD_FAIL;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed8:	e02b      	b.n	8007f32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d107      	bne.n	8007ef6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ee6:	f107 030d 	add.w	r3, r7, #13
 8007eea:	2201      	movs	r2, #1
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fd1e 	bl	8009930 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ef4:	e01d      	b.n	8007f32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 fca8 	bl	800984e <USBD_CtlError>
            ret = USBD_FAIL;
 8007efe:	2303      	movs	r3, #3
 8007f00:	75fb      	strb	r3, [r7, #23]
          break;
 8007f02:	e016      	b.n	8007f32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	d00f      	beq.n	8007f30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 fc9b 	bl	800984e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f1c:	e008      	b.n	8007f30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fc94 	bl	800984e <USBD_CtlError>
          ret = USBD_FAIL;
 8007f26:	2303      	movs	r3, #3
 8007f28:	75fb      	strb	r3, [r7, #23]
          break;
 8007f2a:	e002      	b.n	8007f32 <USBD_CDC_Setup+0x19e>
          break;
 8007f2c:	bf00      	nop
 8007f2e:	e008      	b.n	8007f42 <USBD_CDC_Setup+0x1ae>
          break;
 8007f30:	bf00      	nop
      }
      break;
 8007f32:	e006      	b.n	8007f42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fc89 	bl	800984e <USBD_CtlError>
      ret = USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f40:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	32b0      	adds	r2, #176	; 0xb0
 8007f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e065      	b.n	8008042 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	32b0      	adds	r2, #176	; 0xb0
 8007f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f86:	78fb      	ldrb	r3, [r7, #3]
 8007f88:	f003 020f 	and.w	r2, r3, #15
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	3318      	adds	r3, #24
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d02f      	beq.n	8008000 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	f003 020f 	and.w	r2, r3, #15
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	440b      	add	r3, r1
 8007fb2:	3318      	adds	r3, #24
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	f003 010f 	and.w	r1, r3, #15
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	440b      	add	r3, r1
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4403      	add	r3, r0
 8007fc8:	3348      	adds	r3, #72	; 0x48
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fd0:	fb01 f303 	mul.w	r3, r1, r3
 8007fd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d112      	bne.n	8008000 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	f003 020f 	and.w	r2, r3, #15
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	440b      	add	r3, r1
 8007fec:	3318      	adds	r3, #24
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ff2:	78f9      	ldrb	r1, [r7, #3]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f002 f99c 	bl	800a336 <USBD_LL_Transmit>
 8007ffe:	e01f      	b.n	8008040 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2200      	movs	r2, #0
 8008004:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	33b0      	adds	r3, #176	; 0xb0
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d010      	beq.n	8008040 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	33b0      	adds	r3, #176	; 0xb0
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800803c:	78fa      	ldrb	r2, [r7, #3]
 800803e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	32b0      	adds	r2, #176	; 0xb0
 8008060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008064:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	32b0      	adds	r2, #176	; 0xb0
 8008070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008078:	2303      	movs	r3, #3
 800807a:	e01a      	b.n	80080b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f002 f99a 	bl	800a3ba <USBD_LL_GetRxDataSize>
 8008086:	4602      	mov	r2, r0
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	33b0      	adds	r3, #176	; 0xb0
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080ac:	4611      	mov	r1, r2
 80080ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	32b0      	adds	r2, #176	; 0xb0
 80080cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080d8:	2303      	movs	r3, #3
 80080da:	e025      	b.n	8008128 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	33b0      	adds	r3, #176	; 0xb0
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01a      	beq.n	8008126 <USBD_CDC_EP0_RxReady+0x6c>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080f6:	2bff      	cmp	r3, #255	; 0xff
 80080f8:	d015      	beq.n	8008126 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	33b0      	adds	r3, #176	; 0xb0
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008112:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800811a:	b292      	uxth	r2, r2
 800811c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	22ff      	movs	r2, #255	; 0xff
 8008122:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008138:	2182      	movs	r1, #130	; 0x82
 800813a:	4818      	ldr	r0, [pc, #96]	; (800819c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800813c:	f000 fd4f 	bl	8008bde <USBD_GetEpDesc>
 8008140:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008142:	2101      	movs	r1, #1
 8008144:	4815      	ldr	r0, [pc, #84]	; (800819c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008146:	f000 fd4a 	bl	8008bde <USBD_GetEpDesc>
 800814a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800814c:	2181      	movs	r1, #129	; 0x81
 800814e:	4813      	ldr	r0, [pc, #76]	; (800819c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008150:	f000 fd45 	bl	8008bde <USBD_GetEpDesc>
 8008154:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2210      	movs	r2, #16
 8008160:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d006      	beq.n	8008176 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	2200      	movs	r2, #0
 800816c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008170:	711a      	strb	r2, [r3, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d006      	beq.n	800818a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008184:	711a      	strb	r2, [r3, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2243      	movs	r2, #67	; 0x43
 800818e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008190:	4b02      	ldr	r3, [pc, #8]	; (800819c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000098 	.word	0x20000098

080081a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081a8:	2182      	movs	r1, #130	; 0x82
 80081aa:	4818      	ldr	r0, [pc, #96]	; (800820c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081ac:	f000 fd17 	bl	8008bde <USBD_GetEpDesc>
 80081b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081b2:	2101      	movs	r1, #1
 80081b4:	4815      	ldr	r0, [pc, #84]	; (800820c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081b6:	f000 fd12 	bl	8008bde <USBD_GetEpDesc>
 80081ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081bc:	2181      	movs	r1, #129	; 0x81
 80081be:	4813      	ldr	r0, [pc, #76]	; (800820c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081c0:	f000 fd0d 	bl	8008bde <USBD_GetEpDesc>
 80081c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2210      	movs	r2, #16
 80081d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d006      	beq.n	80081e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2200      	movs	r2, #0
 80081dc:	711a      	strb	r2, [r3, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f042 0202 	orr.w	r2, r2, #2
 80081e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d006      	beq.n	80081fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	711a      	strb	r2, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f042 0202 	orr.w	r2, r2, #2
 80081f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2243      	movs	r2, #67	; 0x43
 80081fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008200:	4b02      	ldr	r3, [pc, #8]	; (800820c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008202:	4618      	mov	r0, r3
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000098 	.word	0x20000098

08008210 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008218:	2182      	movs	r1, #130	; 0x82
 800821a:	4818      	ldr	r0, [pc, #96]	; (800827c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800821c:	f000 fcdf 	bl	8008bde <USBD_GetEpDesc>
 8008220:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008222:	2101      	movs	r1, #1
 8008224:	4815      	ldr	r0, [pc, #84]	; (800827c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008226:	f000 fcda 	bl	8008bde <USBD_GetEpDesc>
 800822a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800822c:	2181      	movs	r1, #129	; 0x81
 800822e:	4813      	ldr	r0, [pc, #76]	; (800827c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008230:	f000 fcd5 	bl	8008bde <USBD_GetEpDesc>
 8008234:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2210      	movs	r2, #16
 8008240:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d006      	beq.n	8008256 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2200      	movs	r2, #0
 800824c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008250:	711a      	strb	r2, [r3, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d006      	beq.n	800826a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008264:	711a      	strb	r2, [r3, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2243      	movs	r2, #67	; 0x43
 800826e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008270:	4b02      	ldr	r3, [pc, #8]	; (800827c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000098 	.word	0x20000098

08008280 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	220a      	movs	r2, #10
 800828c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800828e:	4b03      	ldr	r3, [pc, #12]	; (800829c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	20000054 	.word	0x20000054

080082a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e009      	b.n	80082c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	33b0      	adds	r3, #176	; 0xb0
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	32b0      	adds	r2, #176	; 0xb0
 80082ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e008      	b.n	800830c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	32b0      	adds	r2, #176	; 0xb0
 800832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008330:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008338:	2303      	movs	r3, #3
 800833a:	e004      	b.n	8008346 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
	...

08008354 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	32b0      	adds	r2, #176	; 0xb0
 8008366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32b0      	adds	r2, #176	; 0xb0
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008382:	2303      	movs	r3, #3
 8008384:	e025      	b.n	80083d2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800838c:	2b00      	cmp	r3, #0
 800838e:	d11f      	bne.n	80083d0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2201      	movs	r2, #1
 8008394:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008398:	4b10      	ldr	r3, [pc, #64]	; (80083dc <USBD_CDC_TransmitPacket+0x88>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f003 020f 	and.w	r2, r3, #15
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4403      	add	r3, r0
 80083b2:	3318      	adds	r3, #24
 80083b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <USBD_CDC_TransmitPacket+0x88>)
 80083b8:	7819      	ldrb	r1, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 ffb5 	bl	800a336 <USBD_LL_Transmit>

    ret = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	200000db 	.word	0x200000db

080083e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	32b0      	adds	r2, #176	; 0xb0
 80083f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	32b0      	adds	r2, #176	; 0xb0
 8008402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	e018      	b.n	8008440 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	7c1b      	ldrb	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10a      	bne.n	800842c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008416:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <USBD_CDC_ReceivePacket+0x68>)
 8008418:	7819      	ldrb	r1, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 ffa7 	bl	800a378 <USBD_LL_PrepareReceive>
 800842a:	e008      	b.n	800843e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800842c:	4b06      	ldr	r3, [pc, #24]	; (8008448 <USBD_CDC_ReceivePacket+0x68>)
 800842e:	7819      	ldrb	r1, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008436:	2340      	movs	r3, #64	; 0x40
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 ff9d 	bl	800a378 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	200000dc 	.word	0x200000dc

0800844c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	4613      	mov	r3, r2
 8008458:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008460:	2303      	movs	r3, #3
 8008462:	e01f      	b.n	80084a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	79fa      	ldrb	r2, [r7, #7]
 8008496:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f001 fe11 	bl	800a0c0 <USBD_LL_Init>
 800849e:	4603      	mov	r3, r0
 80084a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e025      	b.n	8008510 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	32ae      	adds	r2, #174	; 0xae
 80084d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00f      	beq.n	8008500 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	32ae      	adds	r2, #174	; 0xae
 80084ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	f107 020e 	add.w	r2, r7, #14
 80084f4:	4610      	mov	r0, r2
 80084f6:	4798      	blx	r3
 80084f8:	4602      	mov	r2, r0
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 fe1f 	bl	800a164 <USBD_LL_Start>
 8008526:	4603      	mov	r3, r0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008538:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855c:	2b00      	cmp	r3, #0
 800855e:	d009      	beq.n	8008574 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	78fa      	ldrb	r2, [r7, #3]
 800856a:	4611      	mov	r1, r2
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	78fa      	ldrb	r2, [r7, #3]
 8008598:	4611      	mov	r1, r2
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085a4:	2303      	movs	r3, #3
 80085a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f001 f908 	bl	80097da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085d8:	461a      	mov	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d01a      	beq.n	8008624 <USBD_LL_SetupStage+0x72>
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d822      	bhi.n	8008638 <USBD_LL_SetupStage+0x86>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <USBD_LL_SetupStage+0x4a>
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d00a      	beq.n	8008610 <USBD_LL_SetupStage+0x5e>
 80085fa:	e01d      	b.n	8008638 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb5f 	bl	8008cc8 <USBD_StdDevReq>
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]
      break;
 800860e:	e020      	b.n	8008652 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fbc7 	bl	8008dac <USBD_StdItfReq>
 800861e:	4603      	mov	r3, r0
 8008620:	73fb      	strb	r3, [r7, #15]
      break;
 8008622:	e016      	b.n	8008652 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fc29 	bl	8008e84 <USBD_StdEPReq>
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]
      break;
 8008636:	e00c      	b.n	8008652 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800863e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008642:	b2db      	uxtb	r3, r3
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 fdec 	bl	800a224 <USBD_LL_StallEP>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]
      break;
 8008650:	bf00      	nop
  }

  return ret;
 8008652:	7bfb      	ldrb	r3, [r7, #15]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	460b      	mov	r3, r1
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d16e      	bne.n	8008752 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800867a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008682:	2b03      	cmp	r3, #3
 8008684:	f040 8098 	bne.w	80087b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	429a      	cmp	r2, r3
 8008692:	d913      	bls.n	80086bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	1ad2      	subs	r2, r2, r3
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	68da      	ldr	r2, [r3, #12]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	4293      	cmp	r3, r2
 80086ac:	bf28      	it	cs
 80086ae:	4613      	movcs	r3, r2
 80086b0:	461a      	mov	r2, r3
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f001 f984 	bl	80099c2 <USBD_CtlContinueRx>
 80086ba:	e07d      	b.n	80087b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086c2:	f003 031f 	and.w	r3, r3, #31
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d014      	beq.n	80086f4 <USBD_LL_DataOutStage+0x98>
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d81d      	bhi.n	800870a <USBD_LL_DataOutStage+0xae>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <USBD_LL_DataOutStage+0x7c>
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d003      	beq.n	80086de <USBD_LL_DataOutStage+0x82>
 80086d6:	e018      	b.n	800870a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	75bb      	strb	r3, [r7, #22]
            break;
 80086dc:	e018      	b.n	8008710 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	4619      	mov	r1, r3
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fa5e 	bl	8008baa <USBD_CoreFindIF>
 80086ee:	4603      	mov	r3, r0
 80086f0:	75bb      	strb	r3, [r7, #22]
            break;
 80086f2:	e00d      	b.n	8008710 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	4619      	mov	r1, r3
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 fa60 	bl	8008bc4 <USBD_CoreFindEP>
 8008704:	4603      	mov	r3, r0
 8008706:	75bb      	strb	r3, [r7, #22]
            break;
 8008708:	e002      	b.n	8008710 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	75bb      	strb	r3, [r7, #22]
            break;
 800870e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008710:	7dbb      	ldrb	r3, [r7, #22]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d119      	bne.n	800874a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b03      	cmp	r3, #3
 8008720:	d113      	bne.n	800874a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008722:	7dba      	ldrb	r2, [r7, #22]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	32ae      	adds	r2, #174	; 0xae
 8008728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00b      	beq.n	800874a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008732:	7dba      	ldrb	r2, [r7, #22]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800873a:	7dba      	ldrb	r2, [r7, #22]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	32ae      	adds	r2, #174	; 0xae
 8008740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f001 f94a 	bl	80099e4 <USBD_CtlSendStatus>
 8008750:	e032      	b.n	80087b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008752:	7afb      	ldrb	r3, [r7, #11]
 8008754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008758:	b2db      	uxtb	r3, r3
 800875a:	4619      	mov	r1, r3
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 fa31 	bl	8008bc4 <USBD_CoreFindEP>
 8008762:	4603      	mov	r3, r0
 8008764:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008766:	7dbb      	ldrb	r3, [r7, #22]
 8008768:	2bff      	cmp	r3, #255	; 0xff
 800876a:	d025      	beq.n	80087b8 <USBD_LL_DataOutStage+0x15c>
 800876c:	7dbb      	ldrb	r3, [r7, #22]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d122      	bne.n	80087b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b03      	cmp	r3, #3
 800877c:	d117      	bne.n	80087ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800877e:	7dba      	ldrb	r2, [r7, #22]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	32ae      	adds	r2, #174	; 0xae
 8008784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00f      	beq.n	80087ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800878e:	7dba      	ldrb	r2, [r7, #22]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008796:	7dba      	ldrb	r2, [r7, #22]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	32ae      	adds	r2, #174	; 0xae
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	7afa      	ldrb	r2, [r7, #11]
 80087a4:	4611      	mov	r1, r2
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	4798      	blx	r3
 80087aa:	4603      	mov	r3, r0
 80087ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	e000      	b.n	80087ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b086      	sub	sp, #24
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	460b      	mov	r3, r1
 80087cc:	607a      	str	r2, [r7, #4]
 80087ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087d0:	7afb      	ldrb	r3, [r7, #11]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d16f      	bne.n	80088b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3314      	adds	r3, #20
 80087da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d15a      	bne.n	800889c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d914      	bls.n	800881c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	461a      	mov	r2, r3
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f001 f8ac 	bl	8009966 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800880e:	2300      	movs	r3, #0
 8008810:	2200      	movs	r2, #0
 8008812:	2100      	movs	r1, #0
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f001 fdaf 	bl	800a378 <USBD_LL_PrepareReceive>
 800881a:	e03f      	b.n	800889c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	429a      	cmp	r2, r3
 8008826:	d11c      	bne.n	8008862 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008830:	429a      	cmp	r2, r3
 8008832:	d316      	bcc.n	8008862 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800883e:	429a      	cmp	r2, r3
 8008840:	d20f      	bcs.n	8008862 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008842:	2200      	movs	r2, #0
 8008844:	2100      	movs	r1, #0
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f001 f88d 	bl	8009966 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008854:	2300      	movs	r3, #0
 8008856:	2200      	movs	r2, #0
 8008858:	2100      	movs	r1, #0
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f001 fd8c 	bl	800a378 <USBD_LL_PrepareReceive>
 8008860:	e01c      	b.n	800889c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b03      	cmp	r3, #3
 800886c:	d10f      	bne.n	800888e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800888e:	2180      	movs	r1, #128	; 0x80
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f001 fcc7 	bl	800a224 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f001 f8b7 	bl	8009a0a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d03a      	beq.n	800891c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f7ff fe42 	bl	8008530 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088b4:	e032      	b.n	800891c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088b6:	7afb      	ldrb	r3, [r7, #11]
 80088b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	4619      	mov	r1, r3
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 f97f 	bl	8008bc4 <USBD_CoreFindEP>
 80088c6:	4603      	mov	r3, r0
 80088c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	2bff      	cmp	r3, #255	; 0xff
 80088ce:	d025      	beq.n	800891c <USBD_LL_DataInStage+0x15a>
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d122      	bne.n	800891c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d11c      	bne.n	800891c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80088e2:	7dfa      	ldrb	r2, [r7, #23]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	32ae      	adds	r2, #174	; 0xae
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d014      	beq.n	800891c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80088f2:	7dfa      	ldrb	r2, [r7, #23]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80088fa:	7dfa      	ldrb	r2, [r7, #23]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	32ae      	adds	r2, #174	; 0xae
 8008900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	7afa      	ldrb	r2, [r7, #11]
 8008908:	4611      	mov	r1, r2
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	4798      	blx	r3
 800890e:	4603      	mov	r3, r0
 8008910:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008912:	7dbb      	ldrb	r3, [r7, #22]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008918:	7dbb      	ldrb	r3, [r7, #22]
 800891a:	e000      	b.n	800891e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800895e:	2b00      	cmp	r3, #0
 8008960:	d014      	beq.n	800898c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00e      	beq.n	800898c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	6852      	ldr	r2, [r2, #4]
 800897a:	b2d2      	uxtb	r2, r2
 800897c:	4611      	mov	r1, r2
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	4798      	blx	r3
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008988:	2303      	movs	r3, #3
 800898a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800898c:	2340      	movs	r3, #64	; 0x40
 800898e:	2200      	movs	r2, #0
 8008990:	2100      	movs	r1, #0
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 fc01 	bl	800a19a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2240      	movs	r2, #64	; 0x40
 80089a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089a8:	2340      	movs	r3, #64	; 0x40
 80089aa:	2200      	movs	r2, #0
 80089ac:	2180      	movs	r1, #128	; 0x80
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fbf3 	bl	800a19a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2240      	movs	r2, #64	; 0x40
 80089be:	621a      	str	r2, [r3, #32]

  return ret;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2204      	movs	r2, #4
 8008a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	d106      	bne.n	8008a38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d110      	bne.n	8008a7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00b      	beq.n	8008a7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	32ae      	adds	r2, #174	; 0xae
 8008a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e01c      	b.n	8008ae2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d115      	bne.n	8008ae0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	32ae      	adds	r2, #174	; 0xae
 8008abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00b      	beq.n	8008ae0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	32ae      	adds	r2, #174	; 0xae
 8008ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	4611      	mov	r1, r2
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	32ae      	adds	r2, #174	; 0xae
 8008b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e01c      	b.n	8008b46 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d115      	bne.n	8008b44 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32ae      	adds	r2, #174	; 0xae
 8008b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	32ae      	adds	r2, #174	; 0xae
 8008b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00e      	beq.n	8008ba0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6852      	ldr	r2, [r2, #4]
 8008b8e:	b2d2      	uxtb	r2, r2
 8008b90:	4611      	mov	r1, r2
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	4798      	blx	r3
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bd0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b086      	sub	sp, #24
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	885b      	ldrh	r3, [r3, #2]
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d920      	bls.n	8008c48 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c0e:	e013      	b.n	8008c38 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c10:	f107 030a 	add.w	r3, r7, #10
 8008c14:	4619      	mov	r1, r3
 8008c16:	6978      	ldr	r0, [r7, #20]
 8008c18:	f000 f81b 	bl	8008c52 <USBD_GetNextDesc>
 8008c1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	2b05      	cmp	r3, #5
 8008c24:	d108      	bne.n	8008c38 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	789b      	ldrb	r3, [r3, #2]
 8008c2e:	78fa      	ldrb	r2, [r7, #3]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d008      	beq.n	8008c46 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	885b      	ldrh	r3, [r3, #2]
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	897b      	ldrh	r3, [r7, #10]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d8e5      	bhi.n	8008c10 <USBD_GetEpDesc+0x32>
 8008c44:	e000      	b.n	8008c48 <USBD_GetEpDesc+0x6a>
          break;
 8008c46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c48:	693b      	ldr	r3, [r7, #16]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b085      	sub	sp, #20
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	881a      	ldrh	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008caa:	8a3b      	ldrh	r3, [r7, #16]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	b21a      	sxth	r2, r3
 8008cb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	b21b      	sxth	r3, r3
 8008cb8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cba:	89fb      	ldrh	r3, [r7, #14]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cde:	2b40      	cmp	r3, #64	; 0x40
 8008ce0:	d005      	beq.n	8008cee <USBD_StdDevReq+0x26>
 8008ce2:	2b40      	cmp	r3, #64	; 0x40
 8008ce4:	d857      	bhi.n	8008d96 <USBD_StdDevReq+0xce>
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00f      	beq.n	8008d0a <USBD_StdDevReq+0x42>
 8008cea:	2b20      	cmp	r3, #32
 8008cec:	d153      	bne.n	8008d96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	32ae      	adds	r2, #174	; 0xae
 8008cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	4798      	blx	r3
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]
      break;
 8008d08:	e04a      	b.n	8008da0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	2b09      	cmp	r3, #9
 8008d10:	d83b      	bhi.n	8008d8a <USBD_StdDevReq+0xc2>
 8008d12:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <USBD_StdDevReq+0x50>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008d6d 	.word	0x08008d6d
 8008d1c:	08008d81 	.word	0x08008d81
 8008d20:	08008d8b 	.word	0x08008d8b
 8008d24:	08008d77 	.word	0x08008d77
 8008d28:	08008d8b 	.word	0x08008d8b
 8008d2c:	08008d4b 	.word	0x08008d4b
 8008d30:	08008d41 	.word	0x08008d41
 8008d34:	08008d8b 	.word	0x08008d8b
 8008d38:	08008d63 	.word	0x08008d63
 8008d3c:	08008d55 	.word	0x08008d55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fa3c 	bl	80091c0 <USBD_GetDescriptor>
          break;
 8008d48:	e024      	b.n	8008d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fba1 	bl	8009494 <USBD_SetAddress>
          break;
 8008d52:	e01f      	b.n	8008d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fbe0 	bl	800951c <USBD_SetConfig>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
          break;
 8008d60:	e018      	b.n	8008d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fc83 	bl	8009670 <USBD_GetConfig>
          break;
 8008d6a:	e013      	b.n	8008d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fcb4 	bl	80096dc <USBD_GetStatus>
          break;
 8008d74:	e00e      	b.n	8008d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fce3 	bl	8009744 <USBD_SetFeature>
          break;
 8008d7e:	e009      	b.n	8008d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fd07 	bl	8009796 <USBD_ClrFeature>
          break;
 8008d88:	e004      	b.n	8008d94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fd5e 	bl	800984e <USBD_CtlError>
          break;
 8008d92:	bf00      	nop
      }
      break;
 8008d94:	e004      	b.n	8008da0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fd58 	bl	800984e <USBD_CtlError>
      break;
 8008d9e:	bf00      	nop
  }

  return ret;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop

08008dac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dc2:	2b40      	cmp	r3, #64	; 0x40
 8008dc4:	d005      	beq.n	8008dd2 <USBD_StdItfReq+0x26>
 8008dc6:	2b40      	cmp	r3, #64	; 0x40
 8008dc8:	d852      	bhi.n	8008e70 <USBD_StdItfReq+0xc4>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <USBD_StdItfReq+0x26>
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d14e      	bne.n	8008e70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d840      	bhi.n	8008e62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	889b      	ldrh	r3, [r3, #4]
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d836      	bhi.n	8008e58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	889b      	ldrh	r3, [r3, #4]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff fed9 	bl	8008baa <USBD_CoreFindIF>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	2bff      	cmp	r3, #255	; 0xff
 8008e00:	d01d      	beq.n	8008e3e <USBD_StdItfReq+0x92>
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11a      	bne.n	8008e3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e08:	7bba      	ldrb	r2, [r7, #14]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	32ae      	adds	r2, #174	; 0xae
 8008e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00f      	beq.n	8008e38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e18:	7bba      	ldrb	r2, [r7, #14]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e20:	7bba      	ldrb	r2, [r7, #14]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	32ae      	adds	r2, #174	; 0xae
 8008e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	4798      	blx	r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e36:	e004      	b.n	8008e42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e3c:	e001      	b.n	8008e42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	88db      	ldrh	r3, [r3, #6]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d110      	bne.n	8008e6c <USBD_StdItfReq+0xc0>
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10d      	bne.n	8008e6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fdc7 	bl	80099e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e56:	e009      	b.n	8008e6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fcf7 	bl	800984e <USBD_CtlError>
          break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fcf2 	bl	800984e <USBD_CtlError>
          break;
 8008e6a:	e000      	b.n	8008e6e <USBD_StdItfReq+0xc2>
          break;
 8008e6c:	bf00      	nop
      }
      break;
 8008e6e:	e004      	b.n	8008e7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fceb 	bl	800984e <USBD_CtlError>
      break;
 8008e78:	bf00      	nop
  }

  return ret;
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	889b      	ldrh	r3, [r3, #4]
 8008e96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ea0:	2b40      	cmp	r3, #64	; 0x40
 8008ea2:	d007      	beq.n	8008eb4 <USBD_StdEPReq+0x30>
 8008ea4:	2b40      	cmp	r3, #64	; 0x40
 8008ea6:	f200 817f 	bhi.w	80091a8 <USBD_StdEPReq+0x324>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d02a      	beq.n	8008f04 <USBD_StdEPReq+0x80>
 8008eae:	2b20      	cmp	r3, #32
 8008eb0:	f040 817a 	bne.w	80091a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff fe83 	bl	8008bc4 <USBD_CoreFindEP>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ec2:	7b7b      	ldrb	r3, [r7, #13]
 8008ec4:	2bff      	cmp	r3, #255	; 0xff
 8008ec6:	f000 8174 	beq.w	80091b2 <USBD_StdEPReq+0x32e>
 8008eca:	7b7b      	ldrb	r3, [r7, #13]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f040 8170 	bne.w	80091b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008ed2:	7b7a      	ldrb	r2, [r7, #13]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008eda:	7b7a      	ldrb	r2, [r7, #13]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	32ae      	adds	r2, #174	; 0xae
 8008ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 8163 	beq.w	80091b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008eec:	7b7a      	ldrb	r2, [r7, #13]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	32ae      	adds	r2, #174	; 0xae
 8008ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f02:	e156      	b.n	80091b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	785b      	ldrb	r3, [r3, #1]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d008      	beq.n	8008f1e <USBD_StdEPReq+0x9a>
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	f300 8145 	bgt.w	800919c <USBD_StdEPReq+0x318>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 809b 	beq.w	800904e <USBD_StdEPReq+0x1ca>
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d03c      	beq.n	8008f96 <USBD_StdEPReq+0x112>
 8008f1c:	e13e      	b.n	800919c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d002      	beq.n	8008f30 <USBD_StdEPReq+0xac>
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d016      	beq.n	8008f5c <USBD_StdEPReq+0xd8>
 8008f2e:	e02c      	b.n	8008f8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00d      	beq.n	8008f52 <USBD_StdEPReq+0xce>
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b80      	cmp	r3, #128	; 0x80
 8008f3a:	d00a      	beq.n	8008f52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f001 f96f 	bl	800a224 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f46:	2180      	movs	r1, #128	; 0x80
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 f96b 	bl	800a224 <USBD_LL_StallEP>
 8008f4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f50:	e020      	b.n	8008f94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc7a 	bl	800984e <USBD_CtlError>
              break;
 8008f5a:	e01b      	b.n	8008f94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	885b      	ldrh	r3, [r3, #2]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10e      	bne.n	8008f82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00b      	beq.n	8008f82 <USBD_StdEPReq+0xfe>
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b80      	cmp	r3, #128	; 0x80
 8008f6e:	d008      	beq.n	8008f82 <USBD_StdEPReq+0xfe>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	88db      	ldrh	r3, [r3, #6]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d104      	bne.n	8008f82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 f951 	bl	800a224 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fd2e 	bl	80099e4 <USBD_CtlSendStatus>

              break;
 8008f88:	e004      	b.n	8008f94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fc5e 	bl	800984e <USBD_CtlError>
              break;
 8008f92:	bf00      	nop
          }
          break;
 8008f94:	e107      	b.n	80091a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d002      	beq.n	8008fa8 <USBD_StdEPReq+0x124>
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d016      	beq.n	8008fd4 <USBD_StdEPReq+0x150>
 8008fa6:	e04b      	b.n	8009040 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00d      	beq.n	8008fca <USBD_StdEPReq+0x146>
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b80      	cmp	r3, #128	; 0x80
 8008fb2:	d00a      	beq.n	8008fca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f001 f933 	bl	800a224 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fbe:	2180      	movs	r1, #128	; 0x80
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 f92f 	bl	800a224 <USBD_LL_StallEP>
 8008fc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fc8:	e040      	b.n	800904c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fc3e 	bl	800984e <USBD_CtlError>
              break;
 8008fd2:	e03b      	b.n	800904c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	885b      	ldrh	r3, [r3, #2]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d136      	bne.n	800904a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d004      	beq.n	8008ff0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 f939 	bl	800a262 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fcf7 	bl	80099e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff fde2 	bl	8008bc4 <USBD_CoreFindEP>
 8009000:	4603      	mov	r3, r0
 8009002:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009004:	7b7b      	ldrb	r3, [r7, #13]
 8009006:	2bff      	cmp	r3, #255	; 0xff
 8009008:	d01f      	beq.n	800904a <USBD_StdEPReq+0x1c6>
 800900a:	7b7b      	ldrb	r3, [r7, #13]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11c      	bne.n	800904a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009010:	7b7a      	ldrb	r2, [r7, #13]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009018:	7b7a      	ldrb	r2, [r7, #13]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32ae      	adds	r2, #174	; 0xae
 800901e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d010      	beq.n	800904a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009028:	7b7a      	ldrb	r2, [r7, #13]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	32ae      	adds	r2, #174	; 0xae
 800902e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800903e:	e004      	b.n	800904a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fc03 	bl	800984e <USBD_CtlError>
              break;
 8009048:	e000      	b.n	800904c <USBD_StdEPReq+0x1c8>
              break;
 800904a:	bf00      	nop
          }
          break;
 800904c:	e0ab      	b.n	80091a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b02      	cmp	r3, #2
 8009058:	d002      	beq.n	8009060 <USBD_StdEPReq+0x1dc>
 800905a:	2b03      	cmp	r3, #3
 800905c:	d032      	beq.n	80090c4 <USBD_StdEPReq+0x240>
 800905e:	e097      	b.n	8009190 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d007      	beq.n	8009076 <USBD_StdEPReq+0x1f2>
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	2b80      	cmp	r3, #128	; 0x80
 800906a:	d004      	beq.n	8009076 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fbed 	bl	800984e <USBD_CtlError>
                break;
 8009074:	e091      	b.n	800919a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800907a:	2b00      	cmp	r3, #0
 800907c:	da0b      	bge.n	8009096 <USBD_StdEPReq+0x212>
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	3310      	adds	r3, #16
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	4413      	add	r3, r2
 8009092:	3304      	adds	r3, #4
 8009094:	e00b      	b.n	80090ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	4413      	add	r3, r2
 80090ac:	3304      	adds	r3, #4
 80090ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2202      	movs	r2, #2
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fc37 	bl	8009930 <USBD_CtlSendData>
              break;
 80090c2:	e06a      	b.n	800919a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	da11      	bge.n	80090f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	f003 020f 	and.w	r2, r3, #15
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	3324      	adds	r3, #36	; 0x24
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d117      	bne.n	8009116 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fbb0 	bl	800984e <USBD_CtlError>
                  break;
 80090ee:	e054      	b.n	800919a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	f003 020f 	and.w	r2, r3, #15
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fb9d 	bl	800984e <USBD_CtlError>
                  break;
 8009114:	e041      	b.n	800919a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009116:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800911a:	2b00      	cmp	r3, #0
 800911c:	da0b      	bge.n	8009136 <USBD_StdEPReq+0x2b2>
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	3310      	adds	r3, #16
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	4413      	add	r3, r2
 8009132:	3304      	adds	r3, #4
 8009134:	e00b      	b.n	800914e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009136:	7bbb      	ldrb	r3, [r7, #14]
 8009138:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	4413      	add	r3, r2
 800914c:	3304      	adds	r3, #4
 800914e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <USBD_StdEPReq+0x2d8>
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b80      	cmp	r3, #128	; 0x80
 800915a:	d103      	bne.n	8009164 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2200      	movs	r2, #0
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	e00e      	b.n	8009182 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 f899 	bl	800a2a0 <USBD_LL_IsStallEP>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2201      	movs	r2, #1
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e002      	b.n	8009182 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2202      	movs	r2, #2
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fbd1 	bl	8009930 <USBD_CtlSendData>
              break;
 800918e:	e004      	b.n	800919a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb5b 	bl	800984e <USBD_CtlError>
              break;
 8009198:	bf00      	nop
          }
          break;
 800919a:	e004      	b.n	80091a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fb55 	bl	800984e <USBD_CtlError>
          break;
 80091a4:	bf00      	nop
      }
      break;
 80091a6:	e005      	b.n	80091b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fb4f 	bl	800984e <USBD_CtlError>
      break;
 80091b0:	e000      	b.n	80091b4 <USBD_StdEPReq+0x330>
      break;
 80091b2:	bf00      	nop
  }

  return ret;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	885b      	ldrh	r3, [r3, #2]
 80091da:	0a1b      	lsrs	r3, r3, #8
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b01      	subs	r3, #1
 80091e0:	2b06      	cmp	r3, #6
 80091e2:	f200 8128 	bhi.w	8009436 <USBD_GetDescriptor+0x276>
 80091e6:	a201      	add	r2, pc, #4	; (adr r2, 80091ec <USBD_GetDescriptor+0x2c>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	08009209 	.word	0x08009209
 80091f0:	08009221 	.word	0x08009221
 80091f4:	08009261 	.word	0x08009261
 80091f8:	08009437 	.word	0x08009437
 80091fc:	08009437 	.word	0x08009437
 8009200:	080093d7 	.word	0x080093d7
 8009204:	08009403 	.word	0x08009403
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7c12      	ldrb	r2, [r2, #16]
 8009214:	f107 0108 	add.w	r1, r7, #8
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
      break;
 800921e:	e112      	b.n	8009446 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	7c1b      	ldrb	r3, [r3, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10d      	bne.n	8009244 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009230:	f107 0208 	add.w	r2, r7, #8
 8009234:	4610      	mov	r0, r2
 8009236:	4798      	blx	r3
 8009238:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3301      	adds	r3, #1
 800923e:	2202      	movs	r2, #2
 8009240:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009242:	e100      	b.n	8009446 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	f107 0208 	add.w	r2, r7, #8
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3301      	adds	r3, #1
 800925a:	2202      	movs	r2, #2
 800925c:	701a      	strb	r2, [r3, #0]
      break;
 800925e:	e0f2      	b.n	8009446 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	885b      	ldrh	r3, [r3, #2]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b05      	cmp	r3, #5
 8009268:	f200 80ac 	bhi.w	80093c4 <USBD_GetDescriptor+0x204>
 800926c:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <USBD_GetDescriptor+0xb4>)
 800926e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009272:	bf00      	nop
 8009274:	0800928d 	.word	0x0800928d
 8009278:	080092c1 	.word	0x080092c1
 800927c:	080092f5 	.word	0x080092f5
 8009280:	08009329 	.word	0x08009329
 8009284:	0800935d 	.word	0x0800935d
 8009288:	08009391 	.word	0x08009391
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00b      	beq.n	80092b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	7c12      	ldrb	r2, [r2, #16]
 80092a4:	f107 0108 	add.w	r1, r7, #8
 80092a8:	4610      	mov	r0, r2
 80092aa:	4798      	blx	r3
 80092ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ae:	e091      	b.n	80093d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 facb 	bl	800984e <USBD_CtlError>
            err++;
 80092b8:	7afb      	ldrb	r3, [r7, #11]
 80092ba:	3301      	adds	r3, #1
 80092bc:	72fb      	strb	r3, [r7, #11]
          break;
 80092be:	e089      	b.n	80093d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	7c12      	ldrb	r2, [r2, #16]
 80092d8:	f107 0108 	add.w	r1, r7, #8
 80092dc:	4610      	mov	r0, r2
 80092de:	4798      	blx	r3
 80092e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092e2:	e077      	b.n	80093d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fab1 	bl	800984e <USBD_CtlError>
            err++;
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	3301      	adds	r3, #1
 80092f0:	72fb      	strb	r3, [r7, #11]
          break;
 80092f2:	e06f      	b.n	80093d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	7c12      	ldrb	r2, [r2, #16]
 800930c:	f107 0108 	add.w	r1, r7, #8
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009316:	e05d      	b.n	80093d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa97 	bl	800984e <USBD_CtlError>
            err++;
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	3301      	adds	r3, #1
 8009324:	72fb      	strb	r3, [r7, #11]
          break;
 8009326:	e055      	b.n	80093d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	7c12      	ldrb	r2, [r2, #16]
 8009340:	f107 0108 	add.w	r1, r7, #8
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
 8009348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934a:	e043      	b.n	80093d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa7d 	bl	800984e <USBD_CtlError>
            err++;
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	3301      	adds	r3, #1
 8009358:	72fb      	strb	r3, [r7, #11]
          break;
 800935a:	e03b      	b.n	80093d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7c12      	ldrb	r2, [r2, #16]
 8009374:	f107 0108 	add.w	r1, r7, #8
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937e:	e029      	b.n	80093d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa63 	bl	800984e <USBD_CtlError>
            err++;
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	3301      	adds	r3, #1
 800938c:	72fb      	strb	r3, [r7, #11]
          break;
 800938e:	e021      	b.n	80093d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	7c12      	ldrb	r2, [r2, #16]
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b2:	e00f      	b.n	80093d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa49 	bl	800984e <USBD_CtlError>
            err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
          break;
 80093c2:	e007      	b.n	80093d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fa41 	bl	800984e <USBD_CtlError>
          err++;
 80093cc:	7afb      	ldrb	r3, [r7, #11]
 80093ce:	3301      	adds	r3, #1
 80093d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093d2:	bf00      	nop
      }
      break;
 80093d4:	e037      	b.n	8009446 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7c1b      	ldrb	r3, [r3, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d109      	bne.n	80093f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e6:	f107 0208 	add.w	r2, r7, #8
 80093ea:	4610      	mov	r0, r2
 80093ec:	4798      	blx	r3
 80093ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093f0:	e029      	b.n	8009446 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fa2a 	bl	800984e <USBD_CtlError>
        err++;
 80093fa:	7afb      	ldrb	r3, [r7, #11]
 80093fc:	3301      	adds	r3, #1
 80093fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009400:	e021      	b.n	8009446 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	7c1b      	ldrb	r3, [r3, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10d      	bne.n	8009426 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	f107 0208 	add.w	r2, r7, #8
 8009416:	4610      	mov	r0, r2
 8009418:	4798      	blx	r3
 800941a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	2207      	movs	r2, #7
 8009422:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009424:	e00f      	b.n	8009446 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fa10 	bl	800984e <USBD_CtlError>
        err++;
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	3301      	adds	r3, #1
 8009432:	72fb      	strb	r3, [r7, #11]
      break;
 8009434:	e007      	b.n	8009446 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fa08 	bl	800984e <USBD_CtlError>
      err++;
 800943e:	7afb      	ldrb	r3, [r7, #11]
 8009440:	3301      	adds	r3, #1
 8009442:	72fb      	strb	r3, [r7, #11]
      break;
 8009444:	bf00      	nop
  }

  if (err != 0U)
 8009446:	7afb      	ldrb	r3, [r7, #11]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d11e      	bne.n	800948a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	88db      	ldrh	r3, [r3, #6]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d016      	beq.n	8009482 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009454:	893b      	ldrh	r3, [r7, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00e      	beq.n	8009478 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	88da      	ldrh	r2, [r3, #6]
 800945e:	893b      	ldrh	r3, [r7, #8]
 8009460:	4293      	cmp	r3, r2
 8009462:	bf28      	it	cs
 8009464:	4613      	movcs	r3, r2
 8009466:	b29b      	uxth	r3, r3
 8009468:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800946a:	893b      	ldrh	r3, [r7, #8]
 800946c:	461a      	mov	r2, r3
 800946e:	68f9      	ldr	r1, [r7, #12]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa5d 	bl	8009930 <USBD_CtlSendData>
 8009476:	e009      	b.n	800948c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f9e7 	bl	800984e <USBD_CtlError>
 8009480:	e004      	b.n	800948c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 faae 	bl	80099e4 <USBD_CtlSendStatus>
 8009488:	e000      	b.n	800948c <USBD_GetDescriptor+0x2cc>
    return;
 800948a:	bf00      	nop
  }
}
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop

08009494 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	889b      	ldrh	r3, [r3, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d131      	bne.n	800950a <USBD_SetAddress+0x76>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	88db      	ldrh	r3, [r3, #6]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d12d      	bne.n	800950a <USBD_SetAddress+0x76>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	885b      	ldrh	r3, [r3, #2]
 80094b2:	2b7f      	cmp	r3, #127	; 0x7f
 80094b4:	d829      	bhi.n	800950a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	885b      	ldrh	r3, [r3, #2]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d104      	bne.n	80094d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f9bc 	bl	800984e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d6:	e01d      	b.n	8009514 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	7bfa      	ldrb	r2, [r7, #15]
 80094dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 ff07 	bl	800a2f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa7a 	bl	80099e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2202      	movs	r2, #2
 80094fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fe:	e009      	b.n	8009514 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009508:	e004      	b.n	8009514 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f99e 	bl	800984e <USBD_CtlError>
  }
}
 8009512:	bf00      	nop
 8009514:	bf00      	nop
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	885b      	ldrh	r3, [r3, #2]
 800952e:	b2da      	uxtb	r2, r3
 8009530:	4b4e      	ldr	r3, [pc, #312]	; (800966c <USBD_SetConfig+0x150>)
 8009532:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009534:	4b4d      	ldr	r3, [pc, #308]	; (800966c <USBD_SetConfig+0x150>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d905      	bls.n	8009548 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f985 	bl	800984e <USBD_CtlError>
    return USBD_FAIL;
 8009544:	2303      	movs	r3, #3
 8009546:	e08c      	b.n	8009662 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b02      	cmp	r3, #2
 8009552:	d002      	beq.n	800955a <USBD_SetConfig+0x3e>
 8009554:	2b03      	cmp	r3, #3
 8009556:	d029      	beq.n	80095ac <USBD_SetConfig+0x90>
 8009558:	e075      	b.n	8009646 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800955a:	4b44      	ldr	r3, [pc, #272]	; (800966c <USBD_SetConfig+0x150>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d020      	beq.n	80095a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009562:	4b42      	ldr	r3, [pc, #264]	; (800966c <USBD_SetConfig+0x150>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800956c:	4b3f      	ldr	r3, [pc, #252]	; (800966c <USBD_SetConfig+0x150>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fe ffe7 	bl	8008546 <USBD_SetClassConfig>
 8009578:	4603      	mov	r3, r0
 800957a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d008      	beq.n	8009594 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f962 	bl	800984e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2202      	movs	r2, #2
 800958e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009592:	e065      	b.n	8009660 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fa25 	bl	80099e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2203      	movs	r2, #3
 800959e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095a2:	e05d      	b.n	8009660 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fa1d 	bl	80099e4 <USBD_CtlSendStatus>
      break;
 80095aa:	e059      	b.n	8009660 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095ac:	4b2f      	ldr	r3, [pc, #188]	; (800966c <USBD_SetConfig+0x150>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d112      	bne.n	80095da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095bc:	4b2b      	ldr	r3, [pc, #172]	; (800966c <USBD_SetConfig+0x150>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	461a      	mov	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095c6:	4b29      	ldr	r3, [pc, #164]	; (800966c <USBD_SetConfig+0x150>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fe ffd6 	bl	800857e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fa06 	bl	80099e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095d8:	e042      	b.n	8009660 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80095da:	4b24      	ldr	r3, [pc, #144]	; (800966c <USBD_SetConfig+0x150>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d02a      	beq.n	800963e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7fe ffc4 	bl	800857e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095f6:	4b1d      	ldr	r3, [pc, #116]	; (800966c <USBD_SetConfig+0x150>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009600:	4b1a      	ldr	r3, [pc, #104]	; (800966c <USBD_SetConfig+0x150>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7fe ff9d 	bl	8008546 <USBD_SetClassConfig>
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00f      	beq.n	8009636 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f918 	bl	800984e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fe ffa9 	bl	800857e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009634:	e014      	b.n	8009660 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f9d4 	bl	80099e4 <USBD_CtlSendStatus>
      break;
 800963c:	e010      	b.n	8009660 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f9d0 	bl	80099e4 <USBD_CtlSendStatus>
      break;
 8009644:	e00c      	b.n	8009660 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f900 	bl	800984e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <USBD_SetConfig+0x150>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7fe ff92 	bl	800857e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800965a:	2303      	movs	r3, #3
 800965c:	73fb      	strb	r3, [r7, #15]
      break;
 800965e:	bf00      	nop
  }

  return ret;
 8009660:	7bfb      	ldrb	r3, [r7, #15]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	200003b8 	.word	0x200003b8

08009670 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	88db      	ldrh	r3, [r3, #6]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d004      	beq.n	800968c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f8e2 	bl	800984e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800968a:	e023      	b.n	80096d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b02      	cmp	r3, #2
 8009696:	dc02      	bgt.n	800969e <USBD_GetConfig+0x2e>
 8009698:	2b00      	cmp	r3, #0
 800969a:	dc03      	bgt.n	80096a4 <USBD_GetConfig+0x34>
 800969c:	e015      	b.n	80096ca <USBD_GetConfig+0x5a>
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d00b      	beq.n	80096ba <USBD_GetConfig+0x4a>
 80096a2:	e012      	b.n	80096ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3308      	adds	r3, #8
 80096ae:	2201      	movs	r2, #1
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f93c 	bl	8009930 <USBD_CtlSendData>
        break;
 80096b8:	e00c      	b.n	80096d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3304      	adds	r3, #4
 80096be:	2201      	movs	r2, #1
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f934 	bl	8009930 <USBD_CtlSendData>
        break;
 80096c8:	e004      	b.n	80096d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f8be 	bl	800984e <USBD_CtlError>
        break;
 80096d2:	bf00      	nop
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	3b01      	subs	r3, #1
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d81e      	bhi.n	8009732 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	88db      	ldrh	r3, [r3, #6]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d004      	beq.n	8009706 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f8a5 	bl	800984e <USBD_CtlError>
        break;
 8009704:	e01a      	b.n	800973c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009712:	2b00      	cmp	r3, #0
 8009714:	d005      	beq.n	8009722 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f043 0202 	orr.w	r2, r3, #2
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	330c      	adds	r3, #12
 8009726:	2202      	movs	r2, #2
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f900 	bl	8009930 <USBD_CtlSendData>
      break;
 8009730:	e004      	b.n	800973c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f88a 	bl	800984e <USBD_CtlError>
      break;
 800973a:	bf00      	nop
  }
}
 800973c:	bf00      	nop
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	885b      	ldrh	r3, [r3, #2]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d107      	bne.n	8009766 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f940 	bl	80099e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009764:	e013      	b.n	800978e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	885b      	ldrh	r3, [r3, #2]
 800976a:	2b02      	cmp	r3, #2
 800976c:	d10b      	bne.n	8009786 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	889b      	ldrh	r3, [r3, #4]
 8009772:	0a1b      	lsrs	r3, r3, #8
 8009774:	b29b      	uxth	r3, r3
 8009776:	b2da      	uxtb	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f930 	bl	80099e4 <USBD_CtlSendStatus>
}
 8009784:	e003      	b.n	800978e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f860 	bl	800984e <USBD_CtlError>
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d80b      	bhi.n	80097c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	885b      	ldrh	r3, [r3, #2]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d10c      	bne.n	80097d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f910 	bl	80099e4 <USBD_CtlSendStatus>
      }
      break;
 80097c4:	e004      	b.n	80097d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f840 	bl	800984e <USBD_CtlError>
      break;
 80097ce:	e000      	b.n	80097d2 <USBD_ClrFeature+0x3c>
      break;
 80097d0:	bf00      	nop
  }
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	781a      	ldrb	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3301      	adds	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	781a      	ldrb	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7ff fa41 	bl	8008c8c <SWAPBYTE>
 800980a:	4603      	mov	r3, r0
 800980c:	461a      	mov	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3301      	adds	r3, #1
 800981c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff fa34 	bl	8008c8c <SWAPBYTE>
 8009824:	4603      	mov	r3, r0
 8009826:	461a      	mov	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3301      	adds	r3, #1
 8009830:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff fa27 	bl	8008c8c <SWAPBYTE>
 800983e:	4603      	mov	r3, r0
 8009840:	461a      	mov	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	80da      	strh	r2, [r3, #6]
}
 8009846:	bf00      	nop
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009858:	2180      	movs	r1, #128	; 0x80
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fce2 	bl	800a224 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009860:	2100      	movs	r1, #0
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fcde 	bl	800a224 <USBD_LL_StallEP>
}
 8009868:	bf00      	nop
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d036      	beq.n	80098f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800988a:	6938      	ldr	r0, [r7, #16]
 800988c:	f000 f836 	bl	80098fc <USBD_GetLen>
 8009890:	4603      	mov	r3, r0
 8009892:	3301      	adds	r3, #1
 8009894:	b29b      	uxth	r3, r3
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	b29a      	uxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	4413      	add	r3, r2
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	7812      	ldrb	r2, [r2, #0]
 80098a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	3301      	adds	r3, #1
 80098ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	4413      	add	r3, r2
 80098b6:	2203      	movs	r2, #3
 80098b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	3301      	adds	r3, #1
 80098be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098c0:	e013      	b.n	80098ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	4413      	add	r3, r2
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	7812      	ldrb	r2, [r2, #0]
 80098cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	3301      	adds	r3, #1
 80098d2:	613b      	str	r3, [r7, #16]
    idx++;
 80098d4:	7dfb      	ldrb	r3, [r7, #23]
 80098d6:	3301      	adds	r3, #1
 80098d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	4413      	add	r3, r2
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	3301      	adds	r3, #1
 80098e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e7      	bne.n	80098c2 <USBD_GetString+0x52>
 80098f2:	e000      	b.n	80098f6 <USBD_GetString+0x86>
    return;
 80098f4:	bf00      	nop
  }
}
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800990c:	e005      	b.n	800991a <USBD_GetLen+0x1e>
  {
    len++;
 800990e:	7bfb      	ldrb	r3, [r7, #15]
 8009910:	3301      	adds	r3, #1
 8009912:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	3301      	adds	r3, #1
 8009918:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1f5      	bne.n	800990e <USBD_GetLen+0x12>
  }

  return len;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2202      	movs	r2, #2
 8009940:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	2100      	movs	r1, #0
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 fced 	bl	800a336 <USBD_LL_Transmit>

  return USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	2100      	movs	r1, #0
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 fcdc 	bl	800a336 <USBD_LL_Transmit>

  return USBD_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2203      	movs	r2, #3
 8009998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	2100      	movs	r1, #0
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fce0 	bl	800a378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	2100      	movs	r1, #0
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fccf 	bl	800a378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2204      	movs	r2, #4
 80099f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099f4:	2300      	movs	r3, #0
 80099f6:	2200      	movs	r2, #0
 80099f8:	2100      	movs	r1, #0
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fc9b 	bl	800a336 <USBD_LL_Transmit>

  return USBD_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2205      	movs	r2, #5
 8009a16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2100      	movs	r1, #0
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fca9 	bl	800a378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009a34:	2201      	movs	r2, #1
 8009a36:	4912      	ldr	r1, [pc, #72]	; (8009a80 <MX_USB_DEVICE_Init+0x50>)
 8009a38:	4812      	ldr	r0, [pc, #72]	; (8009a84 <MX_USB_DEVICE_Init+0x54>)
 8009a3a:	f7fe fd07 	bl	800844c <USBD_Init>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a44:	f7f6 fec2 	bl	80007cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009a48:	490f      	ldr	r1, [pc, #60]	; (8009a88 <MX_USB_DEVICE_Init+0x58>)
 8009a4a:	480e      	ldr	r0, [pc, #56]	; (8009a84 <MX_USB_DEVICE_Init+0x54>)
 8009a4c:	f7fe fd2e 	bl	80084ac <USBD_RegisterClass>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a56:	f7f6 feb9 	bl	80007cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009a5a:	490c      	ldr	r1, [pc, #48]	; (8009a8c <MX_USB_DEVICE_Init+0x5c>)
 8009a5c:	4809      	ldr	r0, [pc, #36]	; (8009a84 <MX_USB_DEVICE_Init+0x54>)
 8009a5e:	f7fe fc1f 	bl	80082a0 <USBD_CDC_RegisterInterface>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a68:	f7f6 feb0 	bl	80007cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009a6c:	4805      	ldr	r0, [pc, #20]	; (8009a84 <MX_USB_DEVICE_Init+0x54>)
 8009a6e:	f7fe fd53 	bl	8008518 <USBD_Start>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a78:	f7f6 fea8 	bl	80007cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a7c:	bf00      	nop
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	200000f4 	.word	0x200000f4
 8009a84:	200003bc 	.word	0x200003bc
 8009a88:	20000060 	.word	0x20000060
 8009a8c:	200000e0 	.word	0x200000e0

08009a90 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009a94:	2200      	movs	r2, #0
 8009a96:	4905      	ldr	r1, [pc, #20]	; (8009aac <CDC_Init_HS+0x1c>)
 8009a98:	4805      	ldr	r0, [pc, #20]	; (8009ab0 <CDC_Init_HS+0x20>)
 8009a9a:	f7fe fc1b 	bl	80082d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8009a9e:	4905      	ldr	r1, [pc, #20]	; (8009ab4 <CDC_Init_HS+0x24>)
 8009aa0:	4803      	ldr	r0, [pc, #12]	; (8009ab0 <CDC_Init_HS+0x20>)
 8009aa2:	f7fe fc39 	bl	8008318 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009aa6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20000e98 	.word	0x20000e98
 8009ab0:	200003bc 	.word	0x200003bc
 8009ab4:	20000698 	.word	0x20000698

08009ab8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009abc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	6039      	str	r1, [r7, #0]
 8009ad2:	71fb      	strb	r3, [r7, #7]
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009ad8:	79fb      	ldrb	r3, [r7, #7]
 8009ada:	2b23      	cmp	r3, #35	; 0x23
 8009adc:	d84a      	bhi.n	8009b74 <CDC_Control_HS+0xac>
 8009ade:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <CDC_Control_HS+0x1c>)
 8009ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae4:	08009b75 	.word	0x08009b75
 8009ae8:	08009b75 	.word	0x08009b75
 8009aec:	08009b75 	.word	0x08009b75
 8009af0:	08009b75 	.word	0x08009b75
 8009af4:	08009b75 	.word	0x08009b75
 8009af8:	08009b75 	.word	0x08009b75
 8009afc:	08009b75 	.word	0x08009b75
 8009b00:	08009b75 	.word	0x08009b75
 8009b04:	08009b75 	.word	0x08009b75
 8009b08:	08009b75 	.word	0x08009b75
 8009b0c:	08009b75 	.word	0x08009b75
 8009b10:	08009b75 	.word	0x08009b75
 8009b14:	08009b75 	.word	0x08009b75
 8009b18:	08009b75 	.word	0x08009b75
 8009b1c:	08009b75 	.word	0x08009b75
 8009b20:	08009b75 	.word	0x08009b75
 8009b24:	08009b75 	.word	0x08009b75
 8009b28:	08009b75 	.word	0x08009b75
 8009b2c:	08009b75 	.word	0x08009b75
 8009b30:	08009b75 	.word	0x08009b75
 8009b34:	08009b75 	.word	0x08009b75
 8009b38:	08009b75 	.word	0x08009b75
 8009b3c:	08009b75 	.word	0x08009b75
 8009b40:	08009b75 	.word	0x08009b75
 8009b44:	08009b75 	.word	0x08009b75
 8009b48:	08009b75 	.word	0x08009b75
 8009b4c:	08009b75 	.word	0x08009b75
 8009b50:	08009b75 	.word	0x08009b75
 8009b54:	08009b75 	.word	0x08009b75
 8009b58:	08009b75 	.word	0x08009b75
 8009b5c:	08009b75 	.word	0x08009b75
 8009b60:	08009b75 	.word	0x08009b75
 8009b64:	08009b75 	.word	0x08009b75
 8009b68:	08009b75 	.word	0x08009b75
 8009b6c:	08009b75 	.word	0x08009b75
 8009b70:	08009b75 	.word	0x08009b75
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b74:	bf00      	nop
  }

  return (USBD_OK);
 8009b76:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	4805      	ldr	r0, [pc, #20]	; (8009ba8 <CDC_Receive_HS+0x24>)
 8009b92:	f7fe fbc1 	bl	8008318 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009b96:	4804      	ldr	r0, [pc, #16]	; (8009ba8 <CDC_Receive_HS+0x24>)
 8009b98:	f7fe fc22 	bl	80083e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b9c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	200003bc 	.word	0x200003bc

08009bac <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8009bbc:	4b0d      	ldr	r3, [pc, #52]	; (8009bf4 <CDC_Transmit_HS+0x48>)
 8009bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e00b      	b.n	8009bea <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8009bd2:	887b      	ldrh	r3, [r7, #2]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4806      	ldr	r0, [pc, #24]	; (8009bf4 <CDC_Transmit_HS+0x48>)
 8009bda:	f7fe fb7b 	bl	80082d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8009bde:	4805      	ldr	r0, [pc, #20]	; (8009bf4 <CDC_Transmit_HS+0x48>)
 8009be0:	f7fe fbb8 	bl	8008354 <USBD_CDC_TransmitPacket>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200003bc 	.word	0x200003bc

08009bf8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	4613      	mov	r3, r2
 8009c04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
	...

08009c1c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2212      	movs	r2, #18
 8009c2c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009c2e:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <USBD_HS_DeviceDescriptor+0x20>)
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20000110 	.word	0x20000110

08009c40 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	6039      	str	r1, [r7, #0]
 8009c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2204      	movs	r2, #4
 8009c50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c52:	4b03      	ldr	r3, [pc, #12]	; (8009c60 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	20000124 	.word	0x20000124

08009c64 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	6039      	str	r1, [r7, #0]
 8009c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d105      	bne.n	8009c82 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4907      	ldr	r1, [pc, #28]	; (8009c98 <USBD_HS_ProductStrDescriptor+0x34>)
 8009c7a:	4808      	ldr	r0, [pc, #32]	; (8009c9c <USBD_HS_ProductStrDescriptor+0x38>)
 8009c7c:	f7ff fdf8 	bl	8009870 <USBD_GetString>
 8009c80:	e004      	b.n	8009c8c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4904      	ldr	r1, [pc, #16]	; (8009c98 <USBD_HS_ProductStrDescriptor+0x34>)
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <USBD_HS_ProductStrDescriptor+0x38>)
 8009c88:	f7ff fdf2 	bl	8009870 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c8c:	4b02      	ldr	r3, [pc, #8]	; (8009c98 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20001698 	.word	0x20001698
 8009c9c:	0800a528 	.word	0x0800a528

08009ca0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	6039      	str	r1, [r7, #0]
 8009caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	4904      	ldr	r1, [pc, #16]	; (8009cc0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009cb0:	4804      	ldr	r0, [pc, #16]	; (8009cc4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009cb2:	f7ff fddd 	bl	8009870 <USBD_GetString>
  return USBD_StrDesc;
 8009cb6:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20001698 	.word	0x20001698
 8009cc4:	0800a540 	.word	0x0800a540

08009cc8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	6039      	str	r1, [r7, #0]
 8009cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	221a      	movs	r2, #26
 8009cd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cda:	f000 f843 	bl	8009d64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009cde:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20000128 	.word	0x20000128

08009cec <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	6039      	str	r1, [r7, #0]
 8009cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d105      	bne.n	8009d0a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	4907      	ldr	r1, [pc, #28]	; (8009d20 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009d02:	4808      	ldr	r0, [pc, #32]	; (8009d24 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d04:	f7ff fdb4 	bl	8009870 <USBD_GetString>
 8009d08:	e004      	b.n	8009d14 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	4904      	ldr	r1, [pc, #16]	; (8009d20 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009d0e:	4805      	ldr	r0, [pc, #20]	; (8009d24 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d10:	f7ff fdae 	bl	8009870 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d14:	4b02      	ldr	r3, [pc, #8]	; (8009d20 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20001698 	.word	0x20001698
 8009d24:	0800a554 	.word	0x0800a554

08009d28 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6039      	str	r1, [r7, #0]
 8009d32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d105      	bne.n	8009d46 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	4907      	ldr	r1, [pc, #28]	; (8009d5c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009d3e:	4808      	ldr	r0, [pc, #32]	; (8009d60 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009d40:	f7ff fd96 	bl	8009870 <USBD_GetString>
 8009d44:	e004      	b.n	8009d50 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	4904      	ldr	r1, [pc, #16]	; (8009d5c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009d4a:	4805      	ldr	r0, [pc, #20]	; (8009d60 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009d4c:	f7ff fd90 	bl	8009870 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d50:	4b02      	ldr	r3, [pc, #8]	; (8009d5c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20001698 	.word	0x20001698
 8009d60:	0800a560 	.word	0x0800a560

08009d64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d6a:	4b0f      	ldr	r3, [pc, #60]	; (8009da8 <Get_SerialNum+0x44>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d70:	4b0e      	ldr	r3, [pc, #56]	; (8009dac <Get_SerialNum+0x48>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d76:	4b0e      	ldr	r3, [pc, #56]	; (8009db0 <Get_SerialNum+0x4c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4413      	add	r3, r2
 8009d82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d009      	beq.n	8009d9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d8a:	2208      	movs	r2, #8
 8009d8c:	4909      	ldr	r1, [pc, #36]	; (8009db4 <Get_SerialNum+0x50>)
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f814 	bl	8009dbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d94:	2204      	movs	r2, #4
 8009d96:	4908      	ldr	r1, [pc, #32]	; (8009db8 <Get_SerialNum+0x54>)
 8009d98:	68b8      	ldr	r0, [r7, #8]
 8009d9a:	f000 f80f 	bl	8009dbc <IntToUnicode>
  }
}
 8009d9e:	bf00      	nop
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	1fff7a10 	.word	0x1fff7a10
 8009dac:	1fff7a14 	.word	0x1fff7a14
 8009db0:	1fff7a18 	.word	0x1fff7a18
 8009db4:	2000012a 	.word	0x2000012a
 8009db8:	2000013a 	.word	0x2000013a

08009dbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009dce:	2300      	movs	r3, #0
 8009dd0:	75fb      	strb	r3, [r7, #23]
 8009dd2:	e027      	b.n	8009e24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	0f1b      	lsrs	r3, r3, #28
 8009dd8:	2b09      	cmp	r3, #9
 8009dda:	d80b      	bhi.n	8009df4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	0f1b      	lsrs	r3, r3, #28
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	4619      	mov	r1, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	440b      	add	r3, r1
 8009dec:	3230      	adds	r2, #48	; 0x30
 8009dee:	b2d2      	uxtb	r2, r2
 8009df0:	701a      	strb	r2, [r3, #0]
 8009df2:	e00a      	b.n	8009e0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	0f1b      	lsrs	r3, r3, #28
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	005b      	lsls	r3, r3, #1
 8009dfe:	4619      	mov	r1, r3
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	440b      	add	r3, r1
 8009e04:	3237      	adds	r2, #55	; 0x37
 8009e06:	b2d2      	uxtb	r2, r2
 8009e08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	011b      	lsls	r3, r3, #4
 8009e0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	3301      	adds	r3, #1
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	4413      	add	r3, r2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
 8009e20:	3301      	adds	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
 8009e24:	7dfa      	ldrb	r2, [r7, #23]
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d3d3      	bcc.n	8009dd4 <IntToUnicode+0x18>
  }
}
 8009e2c:	bf00      	nop
 8009e2e:	bf00      	nop
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
	...

08009e3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08a      	sub	sp, #40	; 0x28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e44:	f107 0314 	add.w	r3, r7, #20
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	605a      	str	r2, [r3, #4]
 8009e4e:	609a      	str	r2, [r3, #8]
 8009e50:	60da      	str	r2, [r3, #12]
 8009e52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a1d      	ldr	r2, [pc, #116]	; (8009ed0 <HAL_PCD_MspInit+0x94>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d134      	bne.n	8009ec8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e5e:	2300      	movs	r3, #0
 8009e60:	613b      	str	r3, [r7, #16]
 8009e62:	4b1c      	ldr	r3, [pc, #112]	; (8009ed4 <HAL_PCD_MspInit+0x98>)
 8009e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e66:	4a1b      	ldr	r2, [pc, #108]	; (8009ed4 <HAL_PCD_MspInit+0x98>)
 8009e68:	f043 0302 	orr.w	r3, r3, #2
 8009e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e6e:	4b19      	ldr	r3, [pc, #100]	; (8009ed4 <HAL_PCD_MspInit+0x98>)
 8009e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	613b      	str	r3, [r7, #16]
 8009e78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009e7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e80:	2302      	movs	r3, #2
 8009e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009e8c:	230c      	movs	r3, #12
 8009e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e90:	f107 0314 	add.w	r3, r7, #20
 8009e94:	4619      	mov	r1, r3
 8009e96:	4810      	ldr	r0, [pc, #64]	; (8009ed8 <HAL_PCD_MspInit+0x9c>)
 8009e98:	f7f8 fcc0 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	4b0c      	ldr	r3, [pc, #48]	; (8009ed4 <HAL_PCD_MspInit+0x98>)
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	4a0b      	ldr	r2, [pc, #44]	; (8009ed4 <HAL_PCD_MspInit+0x98>)
 8009ea6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8009eac:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <HAL_PCD_MspInit+0x98>)
 8009eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2100      	movs	r1, #0
 8009ebc:	204d      	movs	r0, #77	; 0x4d
 8009ebe:	f7f8 f822 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009ec2:	204d      	movs	r0, #77	; 0x4d
 8009ec4:	f7f8 f83b 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009ec8:	bf00      	nop
 8009eca:	3728      	adds	r7, #40	; 0x28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	40040000 	.word	0x40040000
 8009ed4:	40023800 	.word	0x40023800
 8009ed8:	40020400 	.word	0x40020400

08009edc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f7fe fb5d 	bl	80085b2 <USBD_LL_SetupStage>
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	78fb      	ldrb	r3, [r7, #3]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	f7fe fb97 	bl	800865c <USBD_LL_DataOutStage>
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	334c      	adds	r3, #76	; 0x4c
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	f7fe fc30 	bl	80087c2 <USBD_LL_DataInStage>
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fd64 	bl	8008a46 <USBD_LL_SOF>
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d102      	bne.n	8009fa0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]
 8009f9e:	e008      	b.n	8009fb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d102      	bne.n	8009fae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	73fb      	strb	r3, [r7, #15]
 8009fac:	e001      	b.n	8009fb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009fae:	f7f6 fc0d 	bl	80007cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fb8:	7bfa      	ldrb	r2, [r7, #15]
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fe fd04 	bl	80089ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fe fcac 	bl	8008926 <USBD_LL_Reset>
}
 8009fce:	bf00      	nop
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fcff 	bl	80089ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	6812      	ldr	r2, [r2, #0]
 8009ffa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ffe:	f043 0301 	orr.w	r3, r3, #1
 800a002:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d005      	beq.n	800a018 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a00c:	4b04      	ldr	r3, [pc, #16]	; (800a020 <HAL_PCD_SuspendCallback+0x48>)
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	4a03      	ldr	r2, [pc, #12]	; (800a020 <HAL_PCD_SuspendCallback+0x48>)
 800a012:	f043 0306 	orr.w	r3, r3, #6
 800a016:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a018:	bf00      	nop
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	e000ed00 	.word	0xe000ed00

0800a024 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fcef 	bl	8008a16 <USBD_LL_Resume>
}
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a052:	78fa      	ldrb	r2, [r7, #3]
 800a054:	4611      	mov	r1, r2
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe fd47 	bl	8008aea <USBD_LL_IsoOUTIncomplete>
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a076:	78fa      	ldrb	r2, [r7, #3]
 800a078:	4611      	mov	r1, r2
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe fd03 	bl	8008a86 <USBD_LL_IsoINIncomplete>
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fd59 	bl	8008b4e <USBD_LL_DevConnected>
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fd56 	bl	8008b64 <USBD_LL_DevDisconnected>
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d140      	bne.n	800a152 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a0d0:	4a22      	ldr	r2, [pc, #136]	; (800a15c <USBD_LL_Init+0x9c>)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a20      	ldr	r2, [pc, #128]	; (800a15c <USBD_LL_Init+0x9c>)
 800a0dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a0e0:	4b1e      	ldr	r3, [pc, #120]	; (800a15c <USBD_LL_Init+0x9c>)
 800a0e2:	4a1f      	ldr	r2, [pc, #124]	; (800a160 <USBD_LL_Init+0xa0>)
 800a0e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800a0e6:	4b1d      	ldr	r3, [pc, #116]	; (800a15c <USBD_LL_Init+0x9c>)
 800a0e8:	2206      	movs	r2, #6
 800a0ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a0ec:	4b1b      	ldr	r3, [pc, #108]	; (800a15c <USBD_LL_Init+0x9c>)
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a0f2:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <USBD_LL_Init+0x9c>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a0f8:	4b18      	ldr	r3, [pc, #96]	; (800a15c <USBD_LL_Init+0x9c>)
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a0fe:	4b17      	ldr	r3, [pc, #92]	; (800a15c <USBD_LL_Init+0x9c>)
 800a100:	2200      	movs	r2, #0
 800a102:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a104:	4b15      	ldr	r3, [pc, #84]	; (800a15c <USBD_LL_Init+0x9c>)
 800a106:	2200      	movs	r2, #0
 800a108:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a10a:	4b14      	ldr	r3, [pc, #80]	; (800a15c <USBD_LL_Init+0x9c>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a110:	4b12      	ldr	r3, [pc, #72]	; (800a15c <USBD_LL_Init+0x9c>)
 800a112:	2200      	movs	r2, #0
 800a114:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a116:	4b11      	ldr	r3, [pc, #68]	; (800a15c <USBD_LL_Init+0x9c>)
 800a118:	2200      	movs	r2, #0
 800a11a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a11c:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <USBD_LL_Init+0x9c>)
 800a11e:	2200      	movs	r2, #0
 800a120:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a122:	480e      	ldr	r0, [pc, #56]	; (800a15c <USBD_LL_Init+0x9c>)
 800a124:	f7f9 f819 	bl	800315a <HAL_PCD_Init>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a12e:	f7f6 fb4d 	bl	80007cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a132:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a136:	4809      	ldr	r0, [pc, #36]	; (800a15c <USBD_LL_Init+0x9c>)
 800a138:	f7fa fa6f 	bl	800461a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a13c:	2280      	movs	r2, #128	; 0x80
 800a13e:	2100      	movs	r1, #0
 800a140:	4806      	ldr	r0, [pc, #24]	; (800a15c <USBD_LL_Init+0x9c>)
 800a142:	f7fa fa23 	bl	800458c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a146:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a14a:	2101      	movs	r1, #1
 800a14c:	4803      	ldr	r0, [pc, #12]	; (800a15c <USBD_LL_Init+0x9c>)
 800a14e:	f7fa fa1d 	bl	800458c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20001898 	.word	0x20001898
 800a160:	40040000 	.word	0x40040000

0800a164 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7f9 f90a 	bl	8003394 <HAL_PCD_Start>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f942 	bl	800a410 <USBD_Get_USB_Status>
 800a18c:	4603      	mov	r3, r0
 800a18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a190:	7bbb      	ldrb	r3, [r7, #14]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	4608      	mov	r0, r1
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	70fb      	strb	r3, [r7, #3]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70bb      	strb	r3, [r7, #2]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1c2:	78bb      	ldrb	r3, [r7, #2]
 800a1c4:	883a      	ldrh	r2, [r7, #0]
 800a1c6:	78f9      	ldrb	r1, [r7, #3]
 800a1c8:	f7f9 fddb 	bl	8003d82 <HAL_PCD_EP_Open>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 f91c 	bl	800a410 <USBD_Get_USB_Status>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a200:	78fa      	ldrb	r2, [r7, #3]
 800a202:	4611      	mov	r1, r2
 800a204:	4618      	mov	r0, r3
 800a206:	f7f9 fe24 	bl	8003e52 <HAL_PCD_EP_Close>
 800a20a:	4603      	mov	r3, r0
 800a20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	4618      	mov	r0, r3
 800a212:	f000 f8fd 	bl	800a410 <USBD_Get_USB_Status>
 800a216:	4603      	mov	r3, r0
 800a218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a23e:	78fa      	ldrb	r2, [r7, #3]
 800a240:	4611      	mov	r1, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f7f9 fefc 	bl	8004040 <HAL_PCD_EP_SetStall>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f8de 	bl	800a410 <USBD_Get_USB_Status>
 800a254:	4603      	mov	r3, r0
 800a256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a258:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a27c:	78fa      	ldrb	r2, [r7, #3]
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f7f9 ff41 	bl	8004108 <HAL_PCD_EP_ClrStall>
 800a286:	4603      	mov	r3, r0
 800a288:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 f8bf 	bl	800a410 <USBD_Get_USB_Status>
 800a292:	4603      	mov	r3, r0
 800a294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a296:	7bbb      	ldrb	r3, [r7, #14]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	da0b      	bge.n	800a2d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	440b      	add	r3, r1
 800a2ce:	333e      	adds	r3, #62	; 0x3e
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	e00b      	b.n	800a2ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2da:	68f9      	ldr	r1, [r7, #12]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	4413      	add	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	440b      	add	r3, r1
 800a2e6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a2ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f7f9 fd0e 	bl	8003d38 <HAL_PCD_SetAddress>
 800a31c:	4603      	mov	r3, r0
 800a31e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	4618      	mov	r0, r3
 800a324:	f000 f874 	bl	800a410 <USBD_Get_USB_Status>
 800a328:	4603      	mov	r3, r0
 800a32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b086      	sub	sp, #24
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
 800a342:	460b      	mov	r3, r1
 800a344:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a354:	7af9      	ldrb	r1, [r7, #11]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	f7f9 fe27 	bl	8003fac <HAL_PCD_EP_Transmit>
 800a35e:	4603      	mov	r3, r0
 800a360:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	4618      	mov	r0, r3
 800a366:	f000 f853 	bl	800a410 <USBD_Get_USB_Status>
 800a36a:	4603      	mov	r3, r0
 800a36c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a36e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	460b      	mov	r3, r1
 800a386:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a396:	7af9      	ldrb	r1, [r7, #11]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	f7f9 fda3 	bl	8003ee6 <HAL_PCD_EP_Receive>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3a4:	7dfb      	ldrb	r3, [r7, #23]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f832 	bl	800a410 <USBD_Get_USB_Status>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3cc:	78fa      	ldrb	r2, [r7, #3]
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7f9 fdd3 	bl	8003f7c <HAL_PCD_EP_GetRxCount>
 800a3d6:	4603      	mov	r3, r0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3e8:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <USBD_static_malloc+0x18>)
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	20001da4 	.word	0x20001da4

0800a3fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]

}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	2b03      	cmp	r3, #3
 800a422:	d817      	bhi.n	800a454 <USBD_Get_USB_Status+0x44>
 800a424:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <USBD_Get_USB_Status+0x1c>)
 800a426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42a:	bf00      	nop
 800a42c:	0800a43d 	.word	0x0800a43d
 800a430:	0800a443 	.word	0x0800a443
 800a434:	0800a449 	.word	0x0800a449
 800a438:	0800a44f 	.word	0x0800a44f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73fb      	strb	r3, [r7, #15]
    break;
 800a440:	e00b      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a442:	2303      	movs	r3, #3
 800a444:	73fb      	strb	r3, [r7, #15]
    break;
 800a446:	e008      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a448:	2301      	movs	r3, #1
 800a44a:	73fb      	strb	r3, [r7, #15]
    break;
 800a44c:	e005      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a44e:	2303      	movs	r3, #3
 800a450:	73fb      	strb	r3, [r7, #15]
    break;
 800a452:	e002      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a454:	2303      	movs	r3, #3
 800a456:	73fb      	strb	r3, [r7, #15]
    break;
 800a458:	bf00      	nop
  }
  return usb_status;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <__libc_init_array>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	4d0d      	ldr	r5, [pc, #52]	; (800a4a0 <__libc_init_array+0x38>)
 800a46c:	4c0d      	ldr	r4, [pc, #52]	; (800a4a4 <__libc_init_array+0x3c>)
 800a46e:	1b64      	subs	r4, r4, r5
 800a470:	10a4      	asrs	r4, r4, #2
 800a472:	2600      	movs	r6, #0
 800a474:	42a6      	cmp	r6, r4
 800a476:	d109      	bne.n	800a48c <__libc_init_array+0x24>
 800a478:	4d0b      	ldr	r5, [pc, #44]	; (800a4a8 <__libc_init_array+0x40>)
 800a47a:	4c0c      	ldr	r4, [pc, #48]	; (800a4ac <__libc_init_array+0x44>)
 800a47c:	f000 f820 	bl	800a4c0 <_init>
 800a480:	1b64      	subs	r4, r4, r5
 800a482:	10a4      	asrs	r4, r4, #2
 800a484:	2600      	movs	r6, #0
 800a486:	42a6      	cmp	r6, r4
 800a488:	d105      	bne.n	800a496 <__libc_init_array+0x2e>
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a490:	4798      	blx	r3
 800a492:	3601      	adds	r6, #1
 800a494:	e7ee      	b.n	800a474 <__libc_init_array+0xc>
 800a496:	f855 3b04 	ldr.w	r3, [r5], #4
 800a49a:	4798      	blx	r3
 800a49c:	3601      	adds	r6, #1
 800a49e:	e7f2      	b.n	800a486 <__libc_init_array+0x1e>
 800a4a0:	0800c048 	.word	0x0800c048
 800a4a4:	0800c048 	.word	0x0800c048
 800a4a8:	0800c048 	.word	0x0800c048
 800a4ac:	0800c04c 	.word	0x0800c04c

0800a4b0 <memset>:
 800a4b0:	4402      	add	r2, r0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d100      	bne.n	800a4ba <memset+0xa>
 800a4b8:	4770      	bx	lr
 800a4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a4be:	e7f9      	b.n	800a4b4 <memset+0x4>

0800a4c0 <_init>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr

0800a4cc <_fini>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr
