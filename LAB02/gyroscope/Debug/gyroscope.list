
gyroscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec4  08008d18  08008d18  00018d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abdc  0800abdc  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800abdc  0800abdc  0001abdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abe4  0800abe4  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abe4  0800abe4  0001abe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800abec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020258  2**0
                  CONTENTS
 10 .bss          00000360  20000258  20000258  00020258  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b8  200005b8  00020258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d14  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e8a  00000000  00000000  00030f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00033e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f10  00000000  00000000  00034ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a34  00000000  00000000  00035dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014a28  00000000  00000000  0005c804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e075e  00000000  00000000  0007122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015198a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054d0  00000000  00000000  001519dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000258 	.word	0x20000258
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d00 	.word	0x08008d00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000025c 	.word	0x2000025c
 80001ec:	08008d00 	.word	0x08008d00

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f001 ff48 	bl	8002d64 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_GYRO_Init();
 8000ed4:	f001 f86a 	bl	8001fac <BSP_GYRO_Init>
  BSP_LCD_Init();
 8000ed8:	f001 f8e2 	bl	80020a0 <BSP_LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f858 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 f8c8 	bl	8001074 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_LayerDefaultInit(1,SDRAM_DEVICE_ADDR);
 8000ee4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f001 f95b 	bl	80021a4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f001 f9bc 	bl	800226c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000ef4:	f001 fb6e 	bl	80025d4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_GREEN);
 8000ef8:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000efc:	f001 fa28 	bl	8002350 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8000f00:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000f04:	f001 f9da 	bl	80022bc <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f08:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f0c:	f001 f9be 	bl	800228c <BSP_LCD_SetTextColor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BSP_GYRO_GetXYZ(xyzvalue);
 8000f10:	481a      	ldr	r0, [pc, #104]	; (8000f7c <main+0xb0>)
 8000f12:	f001 f8b1 	bl	8002078 <BSP_GYRO_GetXYZ>

	  //Show x
	  sprintf(buf,"x = %f",xyzvalue[0]);
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <main+0xb0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fb24 	bl	8000568 <__aeabi_f2d>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4916      	ldr	r1, [pc, #88]	; (8000f80 <main+0xb4>)
 8000f26:	4817      	ldr	r0, [pc, #92]	; (8000f84 <main+0xb8>)
 8000f28:	f005 fc70 	bl	800680c <siprintf>
	  BSP_LCD_DisplayStringAtLine(0,buf);
 8000f2c:	4915      	ldr	r1, [pc, #84]	; (8000f84 <main+0xb8>)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f001 fb38 	bl	80025a4 <BSP_LCD_DisplayStringAtLine>

	  //Show y
	  sprintf(buf,"y = %f",xyzvalue[1]);
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <main+0xb0>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fb15 	bl	8000568 <__aeabi_f2d>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4911      	ldr	r1, [pc, #68]	; (8000f88 <main+0xbc>)
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <main+0xb8>)
 8000f46:	f005 fc61 	bl	800680c <siprintf>
	  BSP_LCD_DisplayStringAtLine(1,buf);
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <main+0xb8>)
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f001 fb29 	bl	80025a4 <BSP_LCD_DisplayStringAtLine>

	  //Show z
	  sprintf(buf,"z = %f",xyzvalue[2]);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <main+0xb0>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fb06 	bl	8000568 <__aeabi_f2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	490a      	ldr	r1, [pc, #40]	; (8000f8c <main+0xc0>)
 8000f62:	4808      	ldr	r0, [pc, #32]	; (8000f84 <main+0xb8>)
 8000f64:	f005 fc52 	bl	800680c <siprintf>
	  BSP_LCD_DisplayStringAtLine(2,buf);
 8000f68:	4906      	ldr	r1, [pc, #24]	; (8000f84 <main+0xb8>)
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f001 fb1a 	bl	80025a4 <BSP_LCD_DisplayStringAtLine>

	  /*Delay 1s to see how value changes*/
	  HAL_Delay(1000);
 8000f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f74:	f001 ff68 	bl	8002e48 <HAL_Delay>
	  BSP_GYRO_GetXYZ(xyzvalue);
 8000f78:	e7ca      	b.n	8000f10 <main+0x44>
 8000f7a:	bf00      	nop
 8000f7c:	20000274 	.word	0x20000274
 8000f80:	08008d18 	.word	0x08008d18
 8000f84:	20000280 	.word	0x20000280
 8000f88:	08008d20 	.word	0x08008d20
 8000f8c:	08008d28 	.word	0x08008d28

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2230      	movs	r2, #48	; 0x30
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 ffc2 	bl	8005f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b2c      	ldr	r3, [pc, #176]	; (800106c <SystemClock_Config+0xdc>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a2b      	ldr	r2, [pc, #172]	; (800106c <SystemClock_Config+0xdc>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <SystemClock_Config+0xdc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b26      	ldr	r3, [pc, #152]	; (8001070 <SystemClock_Config+0xe0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a25      	ldr	r2, [pc, #148]	; (8001070 <SystemClock_Config+0xe0>)
 8000fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <SystemClock_Config+0xe0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fec:	2301      	movs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001000:	2308      	movs	r3, #8
 8001002:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001004:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001008:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800100e:	2304      	movs	r3, #4
 8001010:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4618      	mov	r0, r3
 8001018:	f003 f990 	bl	800433c <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001022:	f000 f841 	bl	80010a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001026:	f003 f939 	bl	800429c <HAL_PWREx_EnableOverDrive>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001030:	f000 f83a 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001040:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2105      	movs	r1, #5
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fbea 	bl	800482c <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800105e:	f000 f823 	bl	80010a8 <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	; 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_GPIO_Init+0x30>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <MX_GPIO_Init+0x30>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_GPIO_Init+0x30>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_MspInit+0x4c>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x4c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f001 fe5a 	bl	8002e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	return 1;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_kill>:

int _kill(int pid, int sig)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001172:	f004 feaf 	bl	8005ed4 <__errno>
 8001176:	4603      	mov	r3, r0
 8001178:	2216      	movs	r2, #22
 800117a:	601a      	str	r2, [r3, #0]
	return -1;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_exit>:

void _exit (int status)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffe7 	bl	8001168 <_kill>
	while (1) {}		/* Make sure we hang here */
 800119a:	e7fe      	b.n	800119a <_exit+0x12>

0800119c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e00a      	b.n	80011c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ae:	f3af 8000 	nop.w
 80011b2:	4601      	mov	r1, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	60ba      	str	r2, [r7, #8]
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbf0      	blt.n	80011ae <_read+0x12>
	}

return len;
 80011cc:	687b      	ldr	r3, [r7, #4]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e009      	b.n	80011fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbf1      	blt.n	80011e8 <_write+0x12>
	}
	return len;
 8001204:	687b      	ldr	r3, [r7, #4]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_close>:

int _close(int file)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001236:	605a      	str	r2, [r3, #4]
	return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_isatty>:

int _isatty(int file)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f004 fe14 	bl	8005ed4 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20030000 	.word	0x20030000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	20000348 	.word	0x20000348
 80012e0:	200005b8 	.word	0x200005b8

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800130e:	490e      	ldr	r1, [pc, #56]	; (8001348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001324:	4c0b      	ldr	r4, [pc, #44]	; (8001354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001332:	f7ff ffd7 	bl	80012e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f004 fdd3 	bl	8005ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fdc7 	bl	8000ecc <main>
  bx  lr    
 800133e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001340:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 800134c:	0800abec 	.word	0x0800abec
  ldr r2, =_sbss
 8001350:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8001354:	200005b8 	.word	0x200005b8

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>

0800135a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800135e:	f000 fc73 	bl	8001c48 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001362:	20ca      	movs	r0, #202	; 0xca
 8001364:	f000 f95d 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001368:	20c3      	movs	r0, #195	; 0xc3
 800136a:	f000 f967 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800136e:	2008      	movs	r0, #8
 8001370:	f000 f964 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001374:	2050      	movs	r0, #80	; 0x50
 8001376:	f000 f961 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800137a:	20cf      	movs	r0, #207	; 0xcf
 800137c:	f000 f951 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001380:	2000      	movs	r0, #0
 8001382:	f000 f95b 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001386:	20c1      	movs	r0, #193	; 0xc1
 8001388:	f000 f958 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800138c:	2030      	movs	r0, #48	; 0x30
 800138e:	f000 f955 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001392:	20ed      	movs	r0, #237	; 0xed
 8001394:	f000 f945 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001398:	2064      	movs	r0, #100	; 0x64
 800139a:	f000 f94f 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800139e:	2003      	movs	r0, #3
 80013a0:	f000 f94c 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80013a4:	2012      	movs	r0, #18
 80013a6:	f000 f949 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80013aa:	2081      	movs	r0, #129	; 0x81
 80013ac:	f000 f946 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80013b0:	20e8      	movs	r0, #232	; 0xe8
 80013b2:	f000 f936 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80013b6:	2085      	movs	r0, #133	; 0x85
 80013b8:	f000 f940 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 f93d 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80013c2:	2078      	movs	r0, #120	; 0x78
 80013c4:	f000 f93a 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80013c8:	20cb      	movs	r0, #203	; 0xcb
 80013ca:	f000 f92a 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80013ce:	2039      	movs	r0, #57	; 0x39
 80013d0:	f000 f934 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80013d4:	202c      	movs	r0, #44	; 0x2c
 80013d6:	f000 f931 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f92e 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80013e0:	2034      	movs	r0, #52	; 0x34
 80013e2:	f000 f92b 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80013e6:	2002      	movs	r0, #2
 80013e8:	f000 f928 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80013ec:	20f7      	movs	r0, #247	; 0xf7
 80013ee:	f000 f918 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80013f2:	2020      	movs	r0, #32
 80013f4:	f000 f922 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80013f8:	20ea      	movs	r0, #234	; 0xea
 80013fa:	f000 f912 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f91c 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f919 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800140a:	20b1      	movs	r0, #177	; 0xb1
 800140c:	f000 f909 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001410:	2000      	movs	r0, #0
 8001412:	f000 f913 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001416:	201b      	movs	r0, #27
 8001418:	f000 f910 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800141c:	20b6      	movs	r0, #182	; 0xb6
 800141e:	f000 f900 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001422:	200a      	movs	r0, #10
 8001424:	f000 f90a 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001428:	20a2      	movs	r0, #162	; 0xa2
 800142a:	f000 f907 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800142e:	20c0      	movs	r0, #192	; 0xc0
 8001430:	f000 f8f7 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001434:	2010      	movs	r0, #16
 8001436:	f000 f901 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800143a:	20c1      	movs	r0, #193	; 0xc1
 800143c:	f000 f8f1 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001440:	2010      	movs	r0, #16
 8001442:	f000 f8fb 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001446:	20c5      	movs	r0, #197	; 0xc5
 8001448:	f000 f8eb 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800144c:	2045      	movs	r0, #69	; 0x45
 800144e:	f000 f8f5 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001452:	2015      	movs	r0, #21
 8001454:	f000 f8f2 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001458:	20c7      	movs	r0, #199	; 0xc7
 800145a:	f000 f8e2 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800145e:	2090      	movs	r0, #144	; 0x90
 8001460:	f000 f8ec 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001464:	2036      	movs	r0, #54	; 0x36
 8001466:	f000 f8dc 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800146a:	20c8      	movs	r0, #200	; 0xc8
 800146c:	f000 f8e6 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001470:	20f2      	movs	r0, #242	; 0xf2
 8001472:	f000 f8d6 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001476:	2000      	movs	r0, #0
 8001478:	f000 f8e0 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800147c:	20b0      	movs	r0, #176	; 0xb0
 800147e:	f000 f8d0 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001482:	20c2      	movs	r0, #194	; 0xc2
 8001484:	f000 f8da 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001488:	20b6      	movs	r0, #182	; 0xb6
 800148a:	f000 f8ca 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800148e:	200a      	movs	r0, #10
 8001490:	f000 f8d4 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001494:	20a7      	movs	r0, #167	; 0xa7
 8001496:	f000 f8d1 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800149a:	2027      	movs	r0, #39	; 0x27
 800149c:	f000 f8ce 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80014a0:	2004      	movs	r0, #4
 80014a2:	f000 f8cb 	bl	800163c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80014a6:	202a      	movs	r0, #42	; 0x2a
 80014a8:	f000 f8bb 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 f8c5 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f8c2 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 f8bf 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80014be:	20ef      	movs	r0, #239	; 0xef
 80014c0:	f000 f8bc 	bl	800163c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80014c4:	202b      	movs	r0, #43	; 0x2b
 80014c6:	f000 f8ac 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f8b6 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 f8b3 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f000 f8b0 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80014dc:	203f      	movs	r0, #63	; 0x3f
 80014de:	f000 f8ad 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80014e2:	20f6      	movs	r0, #246	; 0xf6
 80014e4:	f000 f89d 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 f8a7 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f8a4 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80014f4:	2006      	movs	r0, #6
 80014f6:	f000 f8a1 	bl	800163c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80014fa:	202c      	movs	r0, #44	; 0x2c
 80014fc:	f000 f891 	bl	8001622 <ili9341_WriteReg>
  LCD_Delay(200);
 8001500:	20c8      	movs	r0, #200	; 0xc8
 8001502:	f000 fc8f 	bl	8001e24 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001506:	2026      	movs	r0, #38	; 0x26
 8001508:	f000 f88b 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800150c:	2001      	movs	r0, #1
 800150e:	f000 f895 	bl	800163c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001512:	20e0      	movs	r0, #224	; 0xe0
 8001514:	f000 f885 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001518:	200f      	movs	r0, #15
 800151a:	f000 f88f 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800151e:	2029      	movs	r0, #41	; 0x29
 8001520:	f000 f88c 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001524:	2024      	movs	r0, #36	; 0x24
 8001526:	f000 f889 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800152a:	200c      	movs	r0, #12
 800152c:	f000 f886 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001530:	200e      	movs	r0, #14
 8001532:	f000 f883 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001536:	2009      	movs	r0, #9
 8001538:	f000 f880 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800153c:	204e      	movs	r0, #78	; 0x4e
 800153e:	f000 f87d 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001542:	2078      	movs	r0, #120	; 0x78
 8001544:	f000 f87a 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001548:	203c      	movs	r0, #60	; 0x3c
 800154a:	f000 f877 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800154e:	2009      	movs	r0, #9
 8001550:	f000 f874 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001554:	2013      	movs	r0, #19
 8001556:	f000 f871 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800155a:	2005      	movs	r0, #5
 800155c:	f000 f86e 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001560:	2017      	movs	r0, #23
 8001562:	f000 f86b 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001566:	2011      	movs	r0, #17
 8001568:	f000 f868 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800156c:	2000      	movs	r0, #0
 800156e:	f000 f865 	bl	800163c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001572:	20e1      	movs	r0, #225	; 0xe1
 8001574:	f000 f855 	bl	8001622 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001578:	2000      	movs	r0, #0
 800157a:	f000 f85f 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800157e:	2016      	movs	r0, #22
 8001580:	f000 f85c 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001584:	201b      	movs	r0, #27
 8001586:	f000 f859 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800158a:	2004      	movs	r0, #4
 800158c:	f000 f856 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001590:	2011      	movs	r0, #17
 8001592:	f000 f853 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001596:	2007      	movs	r0, #7
 8001598:	f000 f850 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800159c:	2031      	movs	r0, #49	; 0x31
 800159e:	f000 f84d 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80015a2:	2033      	movs	r0, #51	; 0x33
 80015a4:	f000 f84a 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80015a8:	2042      	movs	r0, #66	; 0x42
 80015aa:	f000 f847 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80015ae:	2005      	movs	r0, #5
 80015b0:	f000 f844 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80015b4:	200c      	movs	r0, #12
 80015b6:	f000 f841 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80015ba:	200a      	movs	r0, #10
 80015bc:	f000 f83e 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80015c0:	2028      	movs	r0, #40	; 0x28
 80015c2:	f000 f83b 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80015c6:	202f      	movs	r0, #47	; 0x2f
 80015c8:	f000 f838 	bl	800163c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80015cc:	200f      	movs	r0, #15
 80015ce:	f000 f835 	bl	800163c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80015d2:	2011      	movs	r0, #17
 80015d4:	f000 f825 	bl	8001622 <ili9341_WriteReg>
  LCD_Delay(200);
 80015d8:	20c8      	movs	r0, #200	; 0xc8
 80015da:	f000 fc23 	bl	8001e24 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80015de:	2029      	movs	r0, #41	; 0x29
 80015e0:	f000 f81f 	bl	8001622 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80015e4:	202c      	movs	r0, #44	; 0x2c
 80015e6:	f000 f81c 	bl	8001622 <ili9341_WriteReg>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}

080015ee <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80015f2:	f000 fb29 	bl	8001c48 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80015f6:	2103      	movs	r1, #3
 80015f8:	20d3      	movs	r0, #211	; 0xd3
 80015fa:	f000 f82c 	bl	8001656 <ili9341_ReadData>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29b      	uxth	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}

08001606 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800160a:	2029      	movs	r0, #41	; 0x29
 800160c:	f000 f809 	bl	8001622 <ili9341_WriteReg>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001618:	2028      	movs	r0, #40	; 0x28
 800161a:	f000 f802 	bl	8001622 <ili9341_WriteReg>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}

08001622 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fba4 	bl	8001d7c <LCD_IO_WriteReg>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fb75 	bl	8001d38 <LCD_IO_WriteData>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	460a      	mov	r2, r1
 8001660:	80fb      	strh	r3, [r7, #6]
 8001662:	4613      	mov	r3, r2
 8001664:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001666:	797a      	ldrb	r2, [r7, #5]
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fba7 	bl	8001dc0 <LCD_IO_ReadData>
 8001672:	4603      	mov	r3, r0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001680:	23f0      	movs	r3, #240	; 0xf0
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001690:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80016ac:	f000 fbc6 	bl	8001e3c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80016b6:	f107 030f 	add.w	r3, r7, #15
 80016ba:	2201      	movs	r2, #1
 80016bc:	2120      	movs	r1, #32
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fc08 	bl	8001ed4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80016ce:	f107 030f 	add.w	r3, r7, #15
 80016d2:	2201      	movs	r2, #1
 80016d4:	2123      	movs	r1, #35	; 0x23
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fbfc 	bl	8001ed4 <GYRO_IO_Write>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80016f8:	f000 fba0 	bl	8001e3c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	2201      	movs	r2, #1
 8001700:	210f      	movs	r1, #15
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fc18 	bl	8001f38 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001708:	79fb      	ldrb	r3, [r7, #7]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001718:	1dfb      	adds	r3, r7, #7
 800171a:	2201      	movs	r2, #1
 800171c:	2124      	movs	r1, #36	; 0x24
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fc0a 	bl	8001f38 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800172a:	b2db      	uxtb	r3, r3
 800172c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	2201      	movs	r2, #1
 8001732:	2124      	movs	r1, #36	; 0x24
 8001734:	4618      	mov	r0, r3
 8001736:	f000 fbcd 	bl	8001ed4 <GYRO_IO_Write>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001756:	f107 030f 	add.w	r3, r7, #15
 800175a:	2201      	movs	r2, #1
 800175c:	2120      	movs	r1, #32
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fbb8 	bl	8001ed4 <GYRO_IO_Write>
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	2300      	movs	r3, #0
 800177c:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800177e:	f107 030f 	add.w	r3, r7, #15
 8001782:	2201      	movs	r2, #1
 8001784:	2130      	movs	r1, #48	; 0x30
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fbd6 	bl	8001f38 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800178c:	f107 030e 	add.w	r3, r7, #14
 8001790:	2201      	movs	r2, #1
 8001792:	2122      	movs	r1, #34	; 0x22
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fbcf 	bl	8001f38 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	121b      	asrs	r3, r3, #8
 80017aa:	b25a      	sxtb	r2, r3
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	f023 0320 	bic.w	r3, r3, #32
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	7bbb      	ldrb	r3, [r7, #14]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80017ce:	f107 030f 	add.w	r3, r7, #15
 80017d2:	2201      	movs	r2, #1
 80017d4:	2130      	movs	r1, #48	; 0x30
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fb7c 	bl	8001ed4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80017dc:	f107 030e 	add.w	r3, r7, #14
 80017e0:	2201      	movs	r2, #1
 80017e2:	2122      	movs	r1, #34	; 0x22
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fb75 	bl	8001ed4 <GYRO_IO_Write>
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80017fc:	f107 030f 	add.w	r3, r7, #15
 8001800:	2201      	movs	r2, #1
 8001802:	2122      	movs	r1, #34	; 0x22
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fb97 	bl	8001f38 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10a      	bne.n	8001826 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001816:	b2db      	uxtb	r3, r3
 8001818:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001820:	b2db      	uxtb	r3, r3
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e00c      	b.n	8001840 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d109      	bne.n	8001840 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	f023 0308 	bic.w	r3, r3, #8
 8001832:	b2db      	uxtb	r3, r3
 8001834:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	b2db      	uxtb	r3, r3
 800183e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001840:	f107 030f 	add.w	r3, r7, #15
 8001844:	2201      	movs	r2, #1
 8001846:	2122      	movs	r1, #34	; 0x22
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fb43 	bl	8001ed4 <GYRO_IO_Write>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001860:	f107 030f 	add.w	r3, r7, #15
 8001864:	2201      	movs	r2, #1
 8001866:	2122      	movs	r1, #34	; 0x22
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fb65 	bl	8001f38 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800187a:	b2db      	uxtb	r3, r3
 800187c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e009      	b.n	8001898 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d106      	bne.n	8001898 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	f023 0308 	bic.w	r3, r3, #8
 8001890:	b2db      	uxtb	r3, r3
 8001892:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001898:	f107 030f 	add.w	r3, r7, #15
 800189c:	2201      	movs	r2, #1
 800189e:	2122      	movs	r1, #34	; 0x22
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fb17 	bl	8001ed4 <GYRO_IO_Write>
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80018b8:	f107 030f 	add.w	r3, r7, #15
 80018bc:	2201      	movs	r2, #1
 80018be:	2121      	movs	r1, #33	; 0x21
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fb39 	bl	8001f38 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80018da:	f107 030f 	add.w	r3, r7, #15
 80018de:	2201      	movs	r2, #1
 80018e0:	2121      	movs	r1, #33	; 0x21
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 faf6 	bl	8001ed4 <GYRO_IO_Write>
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80018fa:	f107 030f 	add.w	r3, r7, #15
 80018fe:	2201      	movs	r2, #1
 8001900:	2124      	movs	r1, #36	; 0x24
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fb18 	bl	8001f38 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	f023 0310 	bic.w	r3, r3, #16
 800190e:	b2db      	uxtb	r3, r3
 8001910:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4313      	orrs	r3, r2
 8001918:	b2db      	uxtb	r3, r3
 800191a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800191c:	f107 030f 	add.w	r3, r7, #15
 8001920:	2201      	movs	r2, #1
 8001922:	2124      	movs	r1, #36	; 0x24
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fad5 	bl	8001ed4 <GYRO_IO_Write>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	2300      	movs	r3, #0
 8001942:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800195c:	f107 030f 	add.w	r3, r7, #15
 8001960:	2201      	movs	r2, #1
 8001962:	2123      	movs	r1, #35	; 0x23
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fae7 	bl	8001f38 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	2206      	movs	r2, #6
 8001970:	2128      	movs	r1, #40	; 0x28
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fae0 	bl	8001f38 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d123      	bne.n	80019ca <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
 8001986:	e01c      	b.n	80019c2 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	3301      	adds	r3, #1
 800198e:	3328      	adds	r3, #40	; 0x28
 8001990:	443b      	add	r3, r7
 8001992:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001996:	b29b      	uxth	r3, r3
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	b29a      	uxth	r2, r3
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	3328      	adds	r3, #40	; 0x28
 80019a2:	443b      	add	r3, r7
 80019a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	3328      	adds	r3, #40	; 0x28
 80019b6:	443b      	add	r3, r7
 80019b8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	3301      	adds	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	dddf      	ble.n	8001988 <L3GD20_ReadXYZAngRate+0x54>
 80019c8:	e022      	b.n	8001a10 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
 80019ce:	e01c      	b.n	8001a0a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	3328      	adds	r3, #40	; 0x28
 80019d6:	443b      	add	r3, r7
 80019d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	3301      	adds	r3, #1
 80019e8:	3328      	adds	r3, #40	; 0x28
 80019ea:	443b      	add	r3, r7
 80019ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	3328      	adds	r3, #40	; 0x28
 80019fe:	443b      	add	r3, r7
 8001a00:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	3301      	adds	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	dddf      	ble.n	80019d0 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d00c      	beq.n	8001a34 <L3GD20_ReadXYZAngRate+0x100>
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	dc0d      	bgt.n	8001a3a <L3GD20_ReadXYZAngRate+0x106>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <L3GD20_ReadXYZAngRate+0xf4>
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d003      	beq.n	8001a2e <L3GD20_ReadXYZAngRate+0xfa>
 8001a26:	e008      	b.n	8001a3a <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <L3GD20_ReadXYZAngRate+0x14c>)
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001a2c:	e005      	b.n	8001a3a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <L3GD20_ReadXYZAngRate+0x150>)
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001a32:	e002      	b.n	8001a3a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <L3GD20_ReadXYZAngRate+0x154>)
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001a38:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
 8001a3e:	e016      	b.n	8001a6e <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	3328      	adds	r3, #40	; 0x28
 8001a46:	443b      	add	r3, r7
 8001a48:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a64:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	dde5      	ble.n	8001a40 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	410c0000 	.word	0x410c0000
 8001a84:	418c0000 	.word	0x418c0000
 8001a88:	428c0000 	.word	0x428c0000

08001a8c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001a90:	4819      	ldr	r0, [pc, #100]	; (8001af8 <SPIx_Init+0x6c>)
 8001a92:	f003 ffc6 	bl	8005a22 <HAL_SPI_GetState>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d12b      	bne.n	8001af4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <SPIx_Init+0x6c>)
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <SPIx_Init+0x70>)
 8001aa0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <SPIx_Init+0x6c>)
 8001aa4:	2218      	movs	r2, #24
 8001aa6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <SPIx_Init+0x6c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <SPIx_Init+0x6c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <SPIx_Init+0x6c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <SPIx_Init+0x6c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <SPIx_Init+0x6c>)
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <SPIx_Init+0x6c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <SPIx_Init+0x6c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <SPIx_Init+0x6c>)
 8001ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <SPIx_Init+0x6c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <SPIx_Init+0x6c>)
 8001ae2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ae6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <SPIx_Init+0x6c>)
 8001aea:	f000 f873 	bl	8001bd4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001aee:	4802      	ldr	r0, [pc, #8]	; (8001af8 <SPIx_Init+0x6c>)
 8001af0:	f003 fae3 	bl	80050ba <HAL_SPI_Init>
  } 
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000034c 	.word	0x2000034c
 8001afc:	40015000 	.word	0x40015000

08001b00 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <SPIx_Read+0x38>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f107 0108 	add.w	r1, r7, #8
 8001b1a:	4808      	ldr	r0, [pc, #32]	; (8001b3c <SPIx_Read+0x3c>)
 8001b1c:	f003 fcce 	bl	80054bc <HAL_SPI_Receive>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001b2a:	f000 f847 	bl	8001bbc <SPIx_Error>
  }
  
  return readvalue;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000070 	.word	0x20000070
 8001b3c:	2000034c 	.word	0x2000034c

08001b40 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <SPIx_Write+0x34>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	1db9      	adds	r1, r7, #6
 8001b54:	2201      	movs	r2, #1
 8001b56:	4808      	ldr	r0, [pc, #32]	; (8001b78 <SPIx_Write+0x38>)
 8001b58:	f003 fb74 	bl	8005244 <HAL_SPI_Transmit>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001b66:	f000 f829 	bl	8001bbc <SPIx_Error>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000070 	.word	0x20000070
 8001b78:	2000034c 	.word	0x2000034c

08001b7c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <SPIx_WriteRead+0x38>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f107 020f 	add.w	r2, r7, #15
 8001b92:	1df9      	adds	r1, r7, #7
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <SPIx_WriteRead+0x3c>)
 8001b9a:	f003 fda0 	bl	80056de <HAL_SPI_TransmitReceive>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001ba4:	f000 f80a 	bl	8001bbc <SPIx_Error>
  }
  
  return receivedbyte;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000070 	.word	0x20000070
 8001bb8:	2000034c 	.word	0x2000034c

08001bbc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001bc0:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <SPIx_Error+0x14>)
 8001bc2:	f003 fb03 	bl	80051cc <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001bc6:	f7ff ff61 	bl	8001a8c <SPIx_Init>
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000034c 	.word	0x2000034c

08001bd4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <SPIx_MspInit+0x6c>)
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <SPIx_MspInit+0x6c>)
 8001be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bea:	6453      	str	r3, [r2, #68]	; 0x44
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <SPIx_MspInit+0x6c>)
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <SPIx_MspInit+0x6c>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <SPIx_MspInit+0x6c>)
 8001c02:	f043 0320 	orr.w	r3, r3, #32
 8001c06:	6313      	str	r3, [r2, #48]	; 0x30
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <SPIx_MspInit+0x6c>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001c14:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c22:	2301      	movs	r3, #1
 8001c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001c26:	2305      	movs	r3, #5
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <SPIx_MspInit+0x70>)
 8001c32:	f001 fe93 	bl	800395c <HAL_GPIO_Init>
}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40021400 	.word	0x40021400

08001c48 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <LCD_IO_Init+0xe0>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d164      	bne.n	8001d20 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <LCD_IO_Init+0xe0>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <LCD_IO_Init+0xe4>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	4a31      	ldr	r2, [pc, #196]	; (8001d2c <LCD_IO_Init+0xe4>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <LCD_IO_Init+0xe4>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4827      	ldr	r0, [pc, #156]	; (8001d30 <LCD_IO_Init+0xe8>)
 8001c92:	f001 fe63 	bl	800395c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <LCD_IO_Init+0xe4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <LCD_IO_Init+0xe4>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <LCD_IO_Init+0xe4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4819      	ldr	r0, [pc, #100]	; (8001d30 <LCD_IO_Init+0xe8>)
 8001ccc:	f001 fe46 	bl	800395c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <LCD_IO_Init+0xe4>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <LCD_IO_Init+0xe4>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <LCD_IO_Init+0xe4>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001cec:	2304      	movs	r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	4619      	mov	r1, r3
 8001d02:	480c      	ldr	r0, [pc, #48]	; (8001d34 <LCD_IO_Init+0xec>)
 8001d04:	f001 fe2a 	bl	800395c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <LCD_IO_Init+0xec>)
 8001d0e:	f001 ffd1 	bl	8003cb4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001d12:	2201      	movs	r2, #1
 8001d14:	2104      	movs	r1, #4
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <LCD_IO_Init+0xec>)
 8001d18:	f001 ffcc 	bl	8003cb4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001d1c:	f7ff feb6 	bl	8001a8c <SPIx_Init>
  }
}
 8001d20:	bf00      	nop
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200003a4 	.word	0x200003a4
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40020800 	.word	0x40020800

08001d38 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <LCD_IO_WriteData+0x3c>)
 8001d4a:	f001 ffb3 	bl	8003cb4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2104      	movs	r1, #4
 8001d52:	4809      	ldr	r0, [pc, #36]	; (8001d78 <LCD_IO_WriteData+0x40>)
 8001d54:	f001 ffae 	bl	8003cb4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fef0 	bl	8001b40 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d60:	2201      	movs	r2, #1
 8001d62:	2104      	movs	r1, #4
 8001d64:	4804      	ldr	r0, [pc, #16]	; (8001d78 <LCD_IO_WriteData+0x40>)
 8001d66:	f001 ffa5 	bl	8003cb4 <HAL_GPIO_WritePin>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40020800 	.word	0x40020800

08001d7c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001d86:	2200      	movs	r2, #0
 8001d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d8c:	480a      	ldr	r0, [pc, #40]	; (8001db8 <LCD_IO_WriteReg+0x3c>)
 8001d8e:	f001 ff91 	bl	8003cb4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001d92:	2200      	movs	r2, #0
 8001d94:	2104      	movs	r1, #4
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <LCD_IO_WriteReg+0x40>)
 8001d98:	f001 ff8c 	bl	8003cb4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fecd 	bl	8001b40 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001da6:	2201      	movs	r2, #1
 8001da8:	2104      	movs	r1, #4
 8001daa:	4804      	ldr	r0, [pc, #16]	; (8001dbc <LCD_IO_WriteReg+0x40>)
 8001dac:	f001 ff82 	bl	8003cb4 <HAL_GPIO_WritePin>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40020800 	.word	0x40020800

08001dc0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460a      	mov	r2, r1
 8001dca:	80fb      	strh	r3, [r7, #6]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	4810      	ldr	r0, [pc, #64]	; (8001e1c <LCD_IO_ReadData+0x5c>)
 8001dda:	f001 ff6b 	bl	8003cb4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de4:	480e      	ldr	r0, [pc, #56]	; (8001e20 <LCD_IO_ReadData+0x60>)
 8001de6:	f001 ff65 	bl	8003cb4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fea7 	bl	8001b40 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001df2:	797b      	ldrb	r3, [r7, #5]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fe83 	bl	8001b00 <SPIx_Read>
 8001dfa:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <LCD_IO_ReadData+0x60>)
 8001e04:	f001 ff56 	bl	8003cb4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	4803      	ldr	r0, [pc, #12]	; (8001e1c <LCD_IO_ReadData+0x5c>)
 8001e0e:	f001 ff51 	bl	8003cb4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020c00 	.word	0x40020c00

08001e24 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f001 f80b 	bl	8002e48 <HAL_Delay>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <GYRO_IO_Init+0x8c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <GYRO_IO_Init+0x8c>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <GYRO_IO_Init+0x8c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	4619      	mov	r1, r3
 8001e74:	4815      	ldr	r0, [pc, #84]	; (8001ecc <GYRO_IO_Init+0x90>)
 8001e76:	f001 fd71 	bl	800395c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	4813      	ldr	r0, [pc, #76]	; (8001ecc <GYRO_IO_Init+0x90>)
 8001e80:	f001 ff18 	bl	8003cb4 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <GYRO_IO_Init+0x8c>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <GYRO_IO_Init+0x8c>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6313      	str	r3, [r2, #48]	; 0x30
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <GYRO_IO_Init+0x8c>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001ea0:	2306      	movs	r3, #6
 8001ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <GYRO_IO_Init+0x94>)
 8001eb8:	f001 fd50 	bl	800395c <HAL_GPIO_Init>

  SPIx_Init();
 8001ebc:	f7ff fde6 	bl	8001a8c <SPIx_Init>
}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001ee4:	883b      	ldrh	r3, [r7, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d903      	bls.n	8001ef2 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	480f      	ldr	r0, [pc, #60]	; (8001f34 <GYRO_IO_Write+0x60>)
 8001ef8:	f001 fedc 	bl	8003cb4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fe3c 	bl	8001b7c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001f04:	e00a      	b.n	8001f1c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fe36 	bl	8001b7c <SPIx_WriteRead>
    NumByteToWrite--;
 8001f10:	883b      	ldrh	r3, [r7, #0]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8001f1c:	883b      	ldrh	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f1      	bne.n	8001f06 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001f22:	2201      	movs	r2, #1
 8001f24:	2102      	movs	r1, #2
 8001f26:	4803      	ldr	r0, [pc, #12]	; (8001f34 <GYRO_IO_Write+0x60>)
 8001f28:	f001 fec4 	bl	8003cb4 <HAL_GPIO_WritePin>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40020800 	.word	0x40020800

08001f38 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
 8001f44:	4613      	mov	r3, r2
 8001f46:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001f48:	883b      	ldrh	r3, [r7, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d904      	bls.n	8001f58 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001f54:	70fb      	strb	r3, [r7, #3]
 8001f56:	e003      	b.n	8001f60 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f5e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001f60:	2200      	movs	r2, #0
 8001f62:	2102      	movs	r1, #2
 8001f64:	4810      	ldr	r0, [pc, #64]	; (8001fa8 <GYRO_IO_Read+0x70>)
 8001f66:	f001 fea5 	bl	8003cb4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fe05 	bl	8001b7c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001f72:	e00c      	b.n	8001f8e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff fe01 	bl	8001b7c <SPIx_WriteRead>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001f82:	883b      	ldrh	r3, [r7, #0]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8001f8e:	883b      	ldrh	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ef      	bne.n	8001f74 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001f94:	2201      	movs	r2, #1
 8001f96:	2102      	movs	r1, #2
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <GYRO_IO_Read+0x70>)
 8001f9a:	f001 fe8b 	bl	8003cb4 <HAL_GPIO_WritePin>
}  
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40020800 	.word	0x40020800

08001fac <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8001fba:	2300      	movs	r3, #0
 8001fbc:	703b      	strb	r3, [r7, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <BSP_GYRO_Init+0xc4>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4798      	blx	r3
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2bd4      	cmp	r3, #212	; 0xd4
 8001fcc:	d005      	beq.n	8001fda <BSP_GYRO_Init+0x2e>
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <BSP_GYRO_Init+0xc4>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	4798      	blx	r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2bd5      	cmp	r3, #213	; 0xd5
 8001fd8:	d145      	bne.n	8002066 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <BSP_GYRO_Init+0xc8>)
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <BSP_GYRO_Init+0xc4>)
 8001fde:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8001fe8:	2307      	movs	r3, #7
 8001fea:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8001fec:	2330      	movs	r3, #48	; 0x30
 8001fee:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001ffc:	793a      	ldrb	r2, [r7, #4]
 8001ffe:	797b      	ldrb	r3, [r7, #5]
 8002000:	4313      	orrs	r3, r2
 8002002:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002004:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002006:	4313      	orrs	r3, r2
 8002008:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800200a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800200c:	4313      	orrs	r3, r2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002012:	7a3a      	ldrb	r2, [r7, #8]
 8002014:	7a7b      	ldrb	r3, [r7, #9]
 8002016:	4313      	orrs	r3, r2
 8002018:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800201a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800201c:	4313      	orrs	r3, r2
 800201e:	b2db      	uxtb	r3, r3
 8002020:	b29b      	uxth	r3, r3
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	b29a      	uxth	r2, r3
 8002026:	89bb      	ldrh	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <BSP_GYRO_Init+0xc8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	89ba      	ldrh	r2, [r7, #12]
 8002034:	4610      	mov	r0, r2
 8002036:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002038:	2300      	movs	r3, #0
 800203a:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 800203c:	2300      	movs	r3, #0
 800203e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002040:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002042:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002044:	4313      	orrs	r3, r2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <BSP_GYRO_Init+0xc8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	89ba      	ldrh	r2, [r7, #12]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	4610      	mov	r0, r2
 8002056:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <BSP_GYRO_Init+0xc8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	2010      	movs	r0, #16
 8002060:	4798      	blx	r3

    ret = GYRO_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000003c 	.word	0x2000003c
 8002074:	200003a8 	.word	0x200003a8

08002078 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <BSP_GYRO_GetXYZ+0x24>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <BSP_GYRO_GetXYZ+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
  }
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200003a8 	.word	0x200003a8

080020a0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <BSP_LCD_Init+0xbc>)
 80020a6:	4a2e      	ldr	r2, [pc, #184]	; (8002160 <BSP_LCD_Init+0xc0>)
 80020a8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <BSP_LCD_Init+0xbc>)
 80020ac:	2209      	movs	r2, #9
 80020ae:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80020b0:	4b2a      	ldr	r3, [pc, #168]	; (800215c <BSP_LCD_Init+0xbc>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <BSP_LCD_Init+0xbc>)
 80020b8:	221d      	movs	r2, #29
 80020ba:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <BSP_LCD_Init+0xbc>)
 80020be:	2203      	movs	r2, #3
 80020c0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80020c2:	4b26      	ldr	r3, [pc, #152]	; (800215c <BSP_LCD_Init+0xbc>)
 80020c4:	f240 120d 	movw	r2, #269	; 0x10d
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <BSP_LCD_Init+0xbc>)
 80020cc:	f240 1243 	movw	r2, #323	; 0x143
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <BSP_LCD_Init+0xbc>)
 80020d4:	f240 1217 	movw	r2, #279	; 0x117
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <BSP_LCD_Init+0xbc>)
 80020dc:	f240 1247 	movw	r2, #327	; 0x147
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <BSP_LCD_Init+0xbc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <BSP_LCD_Init+0xbc>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <BSP_LCD_Init+0xbc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <BSP_LCD_Init+0xc4>)
 80020fc:	2208      	movs	r2, #8
 80020fe:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <BSP_LCD_Init+0xc4>)
 8002102:	22c0      	movs	r2, #192	; 0xc0
 8002104:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <BSP_LCD_Init+0xc4>)
 8002108:	2204      	movs	r2, #4
 800210a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <BSP_LCD_Init+0xc4>)
 800210e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002114:	4813      	ldr	r0, [pc, #76]	; (8002164 <BSP_LCD_Init+0xc4>)
 8002116:	f002 fd75 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <BSP_LCD_Init+0xbc>)
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <BSP_LCD_Init+0xbc>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <BSP_LCD_Init+0xbc>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <BSP_LCD_Init+0xbc>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002132:	f000 fa5f 	bl	80025f4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <BSP_LCD_Init+0xbc>)
 8002138:	f001 fdd6 	bl	8003ce8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <BSP_LCD_Init+0xc8>)
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <BSP_LCD_Init+0xcc>)
 8002140:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <BSP_LCD_Init+0xc8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800214a:	f000 fc41 	bl	80029d0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800214e:	4808      	ldr	r0, [pc, #32]	; (8002170 <BSP_LCD_Init+0xd0>)
 8002150:	f000 f8ce 	bl	80022f0 <BSP_LCD_SetFont>

  return LCD_OK;
 8002154:	2300      	movs	r3, #0
}  
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200003ac 	.word	0x200003ac
 8002160:	40016800 	.word	0x40016800
 8002164:	20000494 	.word	0x20000494
 8002168:	200004e0 	.word	0x200004e0
 800216c:	20000004 	.word	0x20000004
 8002170:	20000074 	.word	0x20000074

08002174 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <BSP_LCD_GetXSize+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	4798      	blx	r3
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200004e0 	.word	0x200004e0

0800218c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <BSP_LCD_GetYSize+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	4798      	blx	r3
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200004e0 	.word	0x200004e0

080021a4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b090      	sub	sp, #64	; 0x40
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80021b4:	f7ff ffde 	bl	8002174 <BSP_LCD_GetXSize>
 80021b8:	4603      	mov	r3, r0
 80021ba:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80021c0:	f7ff ffe4 	bl	800218c <BSP_LCD_GetYSize>
 80021c4:	4603      	mov	r3, r0
 80021c6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80021d0:	23ff      	movs	r3, #255	; 0xff
 80021d2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80021ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80021f0:	2307      	movs	r3, #7
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80021f4:	f7ff ffbe 	bl	8002174 <BSP_LCD_GetXSize>
 80021f8:	4603      	mov	r3, r0
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80021fc:	f7ff ffc6 	bl	800218c <BSP_LCD_GetYSize>
 8002200:	4603      	mov	r3, r0
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002204:	88fa      	ldrh	r2, [r7, #6]
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4619      	mov	r1, r3
 800220c:	4814      	ldr	r0, [pc, #80]	; (8002260 <BSP_LCD_LayerDefaultInit+0xbc>)
 800220e:	f001 fe45 	bl	8003e9c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	4913      	ldr	r1, [pc, #76]	; (8002264 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3304      	adds	r3, #4
 8002222:	f04f 32ff 	mov.w	r2, #4294967295
 8002226:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	490e      	ldr	r1, [pc, #56]	; (8002264 <BSP_LCD_LayerDefaultInit+0xc0>)
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3308      	adds	r3, #8
 8002238:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <BSP_LCD_LayerDefaultInit+0xc4>)
 800223a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	4909      	ldr	r1, [pc, #36]	; (8002264 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800224e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002252:	f001 fe61 	bl	8003f18 <HAL_LTDC_EnableDither>
}
 8002256:	bf00      	nop
 8002258:	3740      	adds	r7, #64	; 0x40
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200003ac 	.word	0x200003ac
 8002264:	200004c8 	.word	0x200004c8
 8002268:	20000074 	.word	0x20000074

0800226c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <BSP_LCD_SelectLayer+0x1c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200004c4 	.word	0x200004c4

0800228c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <BSP_LCD_SetTextColor+0x28>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <BSP_LCD_SetTextColor+0x2c>)
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	601a      	str	r2, [r3, #0]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	200004c4 	.word	0x200004c4
 80022b8:	200004c8 	.word	0x200004c8

080022bc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <BSP_LCD_SetBackColor+0x2c>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4908      	ldr	r1, [pc, #32]	; (80022ec <BSP_LCD_SetBackColor+0x30>)
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3304      	adds	r3, #4
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	200004c4 	.word	0x200004c4
 80022ec:	200004c8 	.word	0x200004c8

080022f0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <BSP_LCD_SetFont+0x2c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4908      	ldr	r1, [pc, #32]	; (8002320 <BSP_LCD_SetFont+0x30>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3308      	adds	r3, #8
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200004c4 	.word	0x200004c4
 8002320:	200004c8 	.word	0x200004c8

08002324 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <BSP_LCD_GetFont+0x24>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4907      	ldr	r1, [pc, #28]	; (800234c <BSP_LCD_GetFont+0x28>)
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	3308      	adds	r3, #8
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200004c4 	.word	0x200004c4
 800234c:	200004c8 	.word	0x200004c8

08002350 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002352:	b085      	sub	sp, #20
 8002354:	af02      	add	r7, sp, #8
 8002356:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <BSP_LCD_Clear+0x48>)
 800235a:	681c      	ldr	r4, [r3, #0]
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <BSP_LCD_Clear+0x48>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0e      	ldr	r2, [pc, #56]	; (800239c <BSP_LCD_Clear+0x4c>)
 8002362:	2134      	movs	r1, #52	; 0x34
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	335c      	adds	r3, #92	; 0x5c
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461e      	mov	r6, r3
 8002370:	f7ff ff00 	bl	8002174 <BSP_LCD_GetXSize>
 8002374:	4605      	mov	r5, r0
 8002376:	f7ff ff09 	bl	800218c <BSP_LCD_GetYSize>
 800237a:	4602      	mov	r2, r0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2300      	movs	r3, #0
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	462a      	mov	r2, r5
 8002388:	4631      	mov	r1, r6
 800238a:	4620      	mov	r0, r4
 800238c:	f000 fae8 	bl	8002960 <FillBuffer>
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002398:	200004c4 	.word	0x200004c4
 800239c:	200003ac 	.word	0x200003ac

080023a0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
 80023aa:	460b      	mov	r3, r1
 80023ac:	80bb      	strh	r3, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <BSP_LCD_DisplayChar+0x80>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	491b      	ldr	r1, [pc, #108]	; (8002424 <BSP_LCD_DisplayChar+0x84>)
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	3308      	adds	r3, #8
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <BSP_LCD_DisplayChar+0x80>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4c14      	ldr	r4, [pc, #80]	; (8002424 <BSP_LCD_DisplayChar+0x84>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4423      	add	r3, r4
 80023de:	3308      	adds	r3, #8
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023e4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <BSP_LCD_DisplayChar+0x80>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4c0d      	ldr	r4, [pc, #52]	; (8002424 <BSP_LCD_DisplayChar+0x84>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4423      	add	r3, r4
 80023f8:	3308      	adds	r3, #8
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	889b      	ldrh	r3, [r3, #4]
 80023fe:	3307      	adds	r3, #7
 8002400:	2b00      	cmp	r3, #0
 8002402:	da00      	bge.n	8002406 <BSP_LCD_DisplayChar+0x66>
 8002404:	3307      	adds	r3, #7
 8002406:	10db      	asrs	r3, r3, #3
 8002408:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800240c:	18ca      	adds	r2, r1, r3
 800240e:	88b9      	ldrh	r1, [r7, #4]
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f9ea 	bl	80027ec <DrawChar>
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bd90      	pop	{r4, r7, pc}
 8002420:	200004c4 	.word	0x200004c4
 8002424:	200004c8 	.word	0x200004c8

08002428 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	60ba      	str	r2, [r7, #8]
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	81fb      	strh	r3, [r7, #14]
 8002436:	460b      	mov	r3, r1
 8002438:	81bb      	strh	r3, [r7, #12]
 800243a:	4613      	mov	r3, r2
 800243c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800243e:	2301      	movs	r3, #1
 8002440:	83fb      	strh	r3, [r7, #30]
 8002442:	2300      	movs	r3, #0
 8002444:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002452:	e002      	b.n	800245a <BSP_LCD_DisplayStringAt+0x32>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	3301      	adds	r3, #1
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	617a      	str	r2, [r7, #20]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f6      	bne.n	8002454 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002466:	f7ff fe85 	bl	8002174 <BSP_LCD_GetXSize>
 800246a:	4601      	mov	r1, r0
 800246c:	4b4b      	ldr	r3, [pc, #300]	; (800259c <BSP_LCD_DisplayStringAt+0x174>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	484b      	ldr	r0, [pc, #300]	; (80025a0 <BSP_LCD_DisplayStringAt+0x178>)
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4403      	add	r3, r0
 800247c:	3308      	adds	r3, #8
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	889b      	ldrh	r3, [r3, #4]
 8002482:	fbb1 f3f3 	udiv	r3, r1, r3
 8002486:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d01c      	beq.n	80024c8 <BSP_LCD_DisplayStringAt+0xa0>
 800248e:	2b03      	cmp	r3, #3
 8002490:	dc33      	bgt.n	80024fa <BSP_LCD_DisplayStringAt+0xd2>
 8002492:	2b01      	cmp	r3, #1
 8002494:	d002      	beq.n	800249c <BSP_LCD_DisplayStringAt+0x74>
 8002496:	2b02      	cmp	r3, #2
 8002498:	d019      	beq.n	80024ce <BSP_LCD_DisplayStringAt+0xa6>
 800249a:	e02e      	b.n	80024fa <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	1ad1      	subs	r1, r2, r3
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <BSP_LCD_DisplayStringAt+0x174>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	483e      	ldr	r0, [pc, #248]	; (80025a0 <BSP_LCD_DisplayStringAt+0x178>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4403      	add	r3, r0
 80024b2:	3308      	adds	r3, #8
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	889b      	ldrh	r3, [r3, #4]
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	89fb      	ldrh	r3, [r7, #14]
 80024c2:	4413      	add	r3, r2
 80024c4:	83fb      	strh	r3, [r7, #30]
      break;
 80024c6:	e01b      	b.n	8002500 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80024c8:	89fb      	ldrh	r3, [r7, #14]
 80024ca:	83fb      	strh	r3, [r7, #30]
      break;
 80024cc:	e018      	b.n	8002500 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	b299      	uxth	r1, r3
 80024d6:	4b31      	ldr	r3, [pc, #196]	; (800259c <BSP_LCD_DisplayStringAt+0x174>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4831      	ldr	r0, [pc, #196]	; (80025a0 <BSP_LCD_DisplayStringAt+0x178>)
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4403      	add	r3, r0
 80024e6:	3308      	adds	r3, #8
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	889b      	ldrh	r3, [r3, #4]
 80024ec:	fb11 f303 	smulbb	r3, r1, r3
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	4413      	add	r3, r2
 80024f6:	83fb      	strh	r3, [r7, #30]
      break;
 80024f8:	e002      	b.n	8002500 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80024fa:	89fb      	ldrh	r3, [r7, #14]
 80024fc:	83fb      	strh	r3, [r7, #30]
      break;
 80024fe:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002500:	e01a      	b.n	8002538 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	89b9      	ldrh	r1, [r7, #12]
 8002508:	8bfb      	ldrh	r3, [r7, #30]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff48 	bl	80023a0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <BSP_LCD_DisplayStringAt+0x174>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4922      	ldr	r1, [pc, #136]	; (80025a0 <BSP_LCD_DisplayStringAt+0x178>)
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3308      	adds	r3, #8
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	889a      	ldrh	r2, [r3, #4]
 8002526:	8bfb      	ldrh	r3, [r7, #30]
 8002528:	4413      	add	r3, r2
 800252a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	3301      	adds	r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
    i++;
 8002532:	8bbb      	ldrh	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2dc      	uxtb	r4, r3
 8002546:	f7ff fe15 	bl	8002174 <BSP_LCD_GetXSize>
 800254a:	8bb9      	ldrh	r1, [r7, #28]
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <BSP_LCD_DisplayStringAt+0x174>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4d13      	ldr	r5, [pc, #76]	; (80025a0 <BSP_LCD_DisplayStringAt+0x178>)
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	442b      	add	r3, r5
 800255c:	3308      	adds	r3, #8
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	889b      	ldrh	r3, [r3, #4]
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	1ac3      	subs	r3, r0, r3
 8002568:	b299      	uxth	r1, r3
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <BSP_LCD_DisplayStringAt+0x174>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	480c      	ldr	r0, [pc, #48]	; (80025a0 <BSP_LCD_DisplayStringAt+0x178>)
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4403      	add	r3, r0
 800257a:	3308      	adds	r3, #8
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	889b      	ldrh	r3, [r3, #4]
 8002580:	4299      	cmp	r1, r3
 8002582:	bf2c      	ite	cs
 8002584:	2301      	movcs	r3, #1
 8002586:	2300      	movcc	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4023      	ands	r3, r4
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1b7      	bne.n	8002502 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bdb0      	pop	{r4, r5, r7, pc}
 800259c:	200004c4 	.word	0x200004c4
 80025a0:	200004c8 	.word	0x200004c8

080025a4 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80025b0:	f7ff feb8 	bl	8002324 <BSP_LCD_GetFont>
 80025b4:	4603      	mov	r3, r0
 80025b6:	88db      	ldrh	r3, [r3, #6]
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	fb12 f303 	smulbb	r3, r2, r3
 80025be:	b299      	uxth	r1, r3
 80025c0:	2303      	movs	r3, #3
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7ff ff2f 	bl	8002428 <BSP_LCD_DisplayStringAt>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <BSP_LCD_DisplayOn+0x1c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80025e2:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <BSP_LCD_DisplayOn+0x1c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4798      	blx	r3
  }
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200004e0 	.word	0x200004e0

080025f4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	; 0x38
 80025f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
 80025fe:	4b61      	ldr	r3, [pc, #388]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	4a60      	ldr	r2, [pc, #384]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002604:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002608:	6453      	str	r3, [r2, #68]	; 0x44
 800260a:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <BSP_LCD_MspInit+0x190>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <BSP_LCD_MspInit+0x190>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a59      	ldr	r2, [pc, #356]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b57      	ldr	r3, [pc, #348]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a52      	ldr	r2, [pc, #328]	; (8002784 <BSP_LCD_MspInit+0x190>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b50      	ldr	r3, [pc, #320]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a4b      	ldr	r2, [pc, #300]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b49      	ldr	r3, [pc, #292]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b45      	ldr	r3, [pc, #276]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a44      	ldr	r2, [pc, #272]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b42      	ldr	r3, [pc, #264]	; (8002784 <BSP_LCD_MspInit+0x190>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <BSP_LCD_MspInit+0x190>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a3d      	ldr	r2, [pc, #244]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <BSP_LCD_MspInit+0x190>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <BSP_LCD_MspInit+0x190>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a36      	ldr	r2, [pc, #216]	; (8002784 <BSP_LCD_MspInit+0x190>)
 80026ac:	f043 0320 	orr.w	r3, r3, #32
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b34      	ldr	r3, [pc, #208]	; (8002784 <BSP_LCD_MspInit+0x190>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	4b30      	ldr	r3, [pc, #192]	; (8002784 <BSP_LCD_MspInit+0x190>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <BSP_LCD_MspInit+0x190>)
 80026c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <BSP_LCD_MspInit+0x190>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80026da:	f641 0358 	movw	r3, #6232	; 0x1858
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80026e8:	2302      	movs	r3, #2
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80026ec:	230e      	movs	r3, #14
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80026f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f4:	4619      	mov	r1, r3
 80026f6:	4824      	ldr	r0, [pc, #144]	; (8002788 <BSP_LCD_MspInit+0x194>)
 80026f8:	f001 f930 	bl	800395c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80026fc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002706:	4619      	mov	r1, r3
 8002708:	4820      	ldr	r0, [pc, #128]	; (800278c <BSP_LCD_MspInit+0x198>)
 800270a:	f001 f927 	bl	800395c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800270e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002718:	4619      	mov	r1, r3
 800271a:	481d      	ldr	r0, [pc, #116]	; (8002790 <BSP_LCD_MspInit+0x19c>)
 800271c:	f001 f91e 	bl	800395c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002720:	2348      	movs	r3, #72	; 0x48
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002728:	4619      	mov	r1, r3
 800272a:	481a      	ldr	r0, [pc, #104]	; (8002794 <BSP_LCD_MspInit+0x1a0>)
 800272c:	f001 f916 	bl	800395c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273a:	4619      	mov	r1, r3
 800273c:	4816      	ldr	r0, [pc, #88]	; (8002798 <BSP_LCD_MspInit+0x1a4>)
 800273e:	f001 f90d 	bl	800395c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002742:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274c:	4619      	mov	r1, r3
 800274e:	4813      	ldr	r0, [pc, #76]	; (800279c <BSP_LCD_MspInit+0x1a8>)
 8002750:	f001 f904 	bl	800395c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002754:	2303      	movs	r3, #3
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002758:	2309      	movs	r3, #9
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800275c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002760:	4619      	mov	r1, r3
 8002762:	480a      	ldr	r0, [pc, #40]	; (800278c <BSP_LCD_MspInit+0x198>)
 8002764:	f001 f8fa 	bl	800395c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800276e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002772:	4619      	mov	r1, r3
 8002774:	4809      	ldr	r0, [pc, #36]	; (800279c <BSP_LCD_MspInit+0x1a8>)
 8002776:	f001 f8f1 	bl	800395c <HAL_GPIO_Init>
}
 800277a:	bf00      	nop
 800277c:	3738      	adds	r7, #56	; 0x38
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40020000 	.word	0x40020000
 800278c:	40020400 	.word	0x40020400
 8002790:	40020800 	.word	0x40020800
 8002794:	40020c00 	.word	0x40020c00
 8002798:	40021400 	.word	0x40021400
 800279c:	40021800 	.word	0x40021800

080027a0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	603a      	str	r2, [r7, #0]
 80027aa:	80fb      	strh	r3, [r7, #6]
 80027ac:	460b      	mov	r3, r1
 80027ae:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <BSP_LCD_DrawPixel+0x44>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <BSP_LCD_DrawPixel+0x48>)
 80027b6:	2134      	movs	r1, #52	; 0x34
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	335c      	adds	r3, #92	; 0x5c
 80027c0:	681c      	ldr	r4, [r3, #0]
 80027c2:	88bd      	ldrh	r5, [r7, #4]
 80027c4:	f7ff fcd6 	bl	8002174 <BSP_LCD_GetXSize>
 80027c8:	4603      	mov	r3, r0
 80027ca:	fb03 f205 	mul.w	r2, r3, r5
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4423      	add	r3, r4
 80027d6:	461a      	mov	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdb0      	pop	{r4, r5, r7, pc}
 80027e4:	200004c4 	.word	0x200004c4
 80027e8:	200003ac 	.word	0x200003ac

080027ec <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	603a      	str	r2, [r7, #0]
 80027f6:	80fb      	strh	r3, [r7, #6]
 80027f8:	460b      	mov	r3, r1
 80027fa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002808:	4b53      	ldr	r3, [pc, #332]	; (8002958 <DrawChar+0x16c>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4953      	ldr	r1, [pc, #332]	; (800295c <DrawChar+0x170>)
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3308      	adds	r3, #8
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	88db      	ldrh	r3, [r3, #6]
 800281e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002820:	4b4d      	ldr	r3, [pc, #308]	; (8002958 <DrawChar+0x16c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	494d      	ldr	r1, [pc, #308]	; (800295c <DrawChar+0x170>)
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3308      	adds	r3, #8
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	889b      	ldrh	r3, [r3, #4]
 8002836:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002838:	8a3b      	ldrh	r3, [r7, #16]
 800283a:	3307      	adds	r3, #7
 800283c:	2b00      	cmp	r3, #0
 800283e:	da00      	bge.n	8002842 <DrawChar+0x56>
 8002840:	3307      	adds	r3, #7
 8002842:	10db      	asrs	r3, r3, #3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	b2da      	uxtb	r2, r3
 800284a:	8a3b      	ldrh	r3, [r7, #16]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	e076      	b.n	8002946 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002858:	8a3b      	ldrh	r3, [r7, #16]
 800285a:	3307      	adds	r3, #7
 800285c:	2b00      	cmp	r3, #0
 800285e:	da00      	bge.n	8002862 <DrawChar+0x76>
 8002860:	3307      	adds	r3, #7
 8002862:	10db      	asrs	r3, r3, #3
 8002864:	461a      	mov	r2, r3
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	4413      	add	r3, r2
 8002870:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002872:	8a3b      	ldrh	r3, [r7, #16]
 8002874:	3307      	adds	r3, #7
 8002876:	2b00      	cmp	r3, #0
 8002878:	da00      	bge.n	800287c <DrawChar+0x90>
 800287a:	3307      	adds	r3, #7
 800287c:	10db      	asrs	r3, r3, #3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d002      	beq.n	8002888 <DrawChar+0x9c>
 8002882:	2b02      	cmp	r3, #2
 8002884:	d004      	beq.n	8002890 <DrawChar+0xa4>
 8002886:	e00c      	b.n	80028a2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	617b      	str	r3, [r7, #20]
      break;
 800288e:	e016      	b.n	80028be <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	3201      	adds	r2, #1
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
      break;
 80028a0:	e00d      	b.n	80028be <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	041a      	lsls	r2, r3, #16
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3301      	adds	r3, #1
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	4313      	orrs	r3, r2
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	3202      	adds	r2, #2
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
      break;
 80028bc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	e036      	b.n	8002932 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80028c4:	8a3a      	ldrh	r2, [r7, #16]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad2      	subs	r2, r2, r3
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	4413      	add	r3, r2
 80028ce:	3b01      	subs	r3, #1
 80028d0:	2201      	movs	r2, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	4413      	add	r3, r2
 80028e8:	b298      	uxth	r0, r3
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <DrawChar+0x16c>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	491b      	ldr	r1, [pc, #108]	; (800295c <DrawChar+0x170>)
 80028f0:	4613      	mov	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	88bb      	ldrh	r3, [r7, #4]
 80028fe:	4619      	mov	r1, r3
 8002900:	f7ff ff4e 	bl	80027a0 <BSP_LCD_DrawPixel>
 8002904:	e012      	b.n	800292c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	b29a      	uxth	r2, r3
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	4413      	add	r3, r2
 800290e:	b298      	uxth	r0, r3
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <DrawChar+0x16c>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4911      	ldr	r1, [pc, #68]	; (800295c <DrawChar+0x170>)
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	3304      	adds	r3, #4
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	4619      	mov	r1, r3
 8002928:	f7ff ff3a 	bl	80027a0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	3301      	adds	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	8a3b      	ldrh	r3, [r7, #16]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3c4      	bcc.n	80028c4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800293a:	88bb      	ldrh	r3, [r7, #4]
 800293c:	3301      	adds	r3, #1
 800293e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	3301      	adds	r3, #1
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	8a7b      	ldrh	r3, [r7, #18]
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	429a      	cmp	r2, r3
 800294c:	d384      	bcc.n	8002858 <DrawChar+0x6c>
  }
}
 800294e:	bf00      	nop
 8002950:	bf00      	nop
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200004c4 	.word	0x200004c4
 800295c:	200004c8 	.word	0x200004c8

08002960 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <FillBuffer+0x68>)
 8002970:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002974:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <FillBuffer+0x68>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800297c:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <FillBuffer+0x68>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <FillBuffer+0x68>)
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <FillBuffer+0x6c>)
 8002986:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002988:	480f      	ldr	r0, [pc, #60]	; (80029c8 <FillBuffer+0x68>)
 800298a:	f000 fd51 	bl	8003430 <HAL_DMA2D_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d115      	bne.n	80029c0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002994:	68f9      	ldr	r1, [r7, #12]
 8002996:	480c      	ldr	r0, [pc, #48]	; (80029c8 <FillBuffer+0x68>)
 8002998:	f000 feb2 	bl	8003700 <HAL_DMA2D_ConfigLayer>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10e      	bne.n	80029c0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69f9      	ldr	r1, [r7, #28]
 80029ac:	4806      	ldr	r0, [pc, #24]	; (80029c8 <FillBuffer+0x68>)
 80029ae:	f000 fd92 	bl	80034d6 <HAL_DMA2D_Start>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80029b8:	210a      	movs	r1, #10
 80029ba:	4803      	ldr	r0, [pc, #12]	; (80029c8 <FillBuffer+0x68>)
 80029bc:	f000 fdb6 	bl	800352c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000454 	.word	0x20000454
 80029cc:	4002b000 	.word	0x4002b000

080029d0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 80029d6:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <BSP_SDRAM_Init+0xb0>)
 80029d8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <BSP_SDRAM_Init+0xb4>)
 80029dc:	2202      	movs	r2, #2
 80029de:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <BSP_SDRAM_Init+0xb4>)
 80029e2:	2207      	movs	r2, #7
 80029e4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80029e6:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <BSP_SDRAM_Init+0xb4>)
 80029e8:	2204      	movs	r2, #4
 80029ea:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <BSP_SDRAM_Init+0xb4>)
 80029ee:	2207      	movs	r2, #7
 80029f0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <BSP_SDRAM_Init+0xb4>)
 80029f4:	2202      	movs	r2, #2
 80029f6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <BSP_SDRAM_Init+0xb4>)
 80029fa:	2202      	movs	r2, #2
 80029fc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <BSP_SDRAM_Init+0xb4>)
 8002a00:	2202      	movs	r2, #2
 8002a02:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a12:	2204      	movs	r2, #4
 8002a14:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a18:	2210      	movs	r2, #16
 8002a1a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a1e:	2240      	movs	r2, #64	; 0x40
 8002a20:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a24:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002a28:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a36:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002a46:	2100      	movs	r1, #0
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a4a:	f000 f87f 	bl	8002b4c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002a4e:	490d      	ldr	r1, [pc, #52]	; (8002a84 <BSP_SDRAM_Init+0xb4>)
 8002a50:	480a      	ldr	r0, [pc, #40]	; (8002a7c <BSP_SDRAM_Init+0xac>)
 8002a52:	f002 fa97 	bl	8004f84 <HAL_SDRAM_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <BSP_SDRAM_Init+0xb8>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e002      	b.n	8002a6a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <BSP_SDRAM_Init+0xb8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002a6a:	f240 506a 	movw	r0, #1386	; 0x56a
 8002a6e:	f000 f80d 	bl	8002a8c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <BSP_SDRAM_Init+0xb8>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200004e4 	.word	0x200004e4
 8002a80:	a0000140 	.word	0xa0000140
 8002a84:	20000518 	.word	0x20000518
 8002a88:	2000007c 	.word	0x2000007c

08002a8c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002a98:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab4:	4923      	ldr	r1, [pc, #140]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ab6:	4824      	ldr	r0, [pc, #144]	; (8002b48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ab8:	f002 faa2 	bl	8005000 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002abc:	2001      	movs	r0, #1
 8002abe:	f000 f9c3 	bl	8002e48 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aca:	2208      	movs	r2, #8
 8002acc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ade:	4919      	ldr	r1, [pc, #100]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae0:	4819      	ldr	r0, [pc, #100]	; (8002b48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ae2:	f002 fa8d 	bl	8005000 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae8:	2203      	movs	r2, #3
 8002aea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aee:	2208      	movs	r2, #8
 8002af0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002af4:	2204      	movs	r2, #4
 8002af6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b02:	4910      	ldr	r1, [pc, #64]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b04:	4810      	ldr	r0, [pc, #64]	; (8002b48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b06:	f002 fa7b 	bl	8005000 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002b0a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002b0e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b12:	2204      	movs	r2, #4
 8002b14:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b18:	2208      	movs	r2, #8
 8002b1a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b26:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2c:	4905      	ldr	r1, [pc, #20]	; (8002b44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b2e:	4806      	ldr	r0, [pc, #24]	; (8002b48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b30:	f002 fa66 	bl	8005000 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4804      	ldr	r0, [pc, #16]	; (8002b48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b38:	f002 fa97 	bl	800506a <HAL_SDRAM_ProgramRefreshRate>
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000534 	.word	0x20000534
 8002b48:	200004e4 	.word	0x200004e4

08002b4c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b090      	sub	sp, #64	; 0x40
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80ec 	beq.w	8002d36 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b62:	4b77      	ldr	r3, [pc, #476]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	4a76      	ldr	r2, [pc, #472]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6393      	str	r3, [r2, #56]	; 0x38
 8002b6e:	4b74      	ldr	r3, [pc, #464]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a6f      	ldr	r2, [pc, #444]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002b84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	4b69      	ldr	r3, [pc, #420]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a68      	ldr	r2, [pc, #416]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b66      	ldr	r3, [pc, #408]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a61      	ldr	r2, [pc, #388]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b5f      	ldr	r3, [pc, #380]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	4b5b      	ldr	r3, [pc, #364]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a5a      	ldr	r2, [pc, #360]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b58      	ldr	r3, [pc, #352]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	4b54      	ldr	r3, [pc, #336]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a53      	ldr	r2, [pc, #332]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002bf4:	f043 0310 	orr.w	r3, r3, #16
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b51      	ldr	r3, [pc, #324]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	4b4d      	ldr	r3, [pc, #308]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a4c      	ldr	r2, [pc, #304]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002c10:	f043 0320 	orr.w	r3, r3, #32
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a45      	ldr	r2, [pc, #276]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <BSP_SDRAM_MspInit+0x1f4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002c42:	2302      	movs	r3, #2
 8002c44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002c4e:	2360      	movs	r3, #96	; 0x60
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c56:	4619      	mov	r1, r3
 8002c58:	483a      	ldr	r0, [pc, #232]	; (8002d44 <BSP_SDRAM_MspInit+0x1f8>)
 8002c5a:	f000 fe7f 	bl	800395c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002c5e:	2301      	movs	r3, #1
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c66:	4619      	mov	r1, r3
 8002c68:	4837      	ldr	r0, [pc, #220]	; (8002d48 <BSP_SDRAM_MspInit+0x1fc>)
 8002c6a:	f000 fe77 	bl	800395c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002c6e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4834      	ldr	r0, [pc, #208]	; (8002d4c <BSP_SDRAM_MspInit+0x200>)
 8002c7c:	f000 fe6e 	bl	800395c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002c80:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4830      	ldr	r0, [pc, #192]	; (8002d50 <BSP_SDRAM_MspInit+0x204>)
 8002c8e:	f000 fe65 	bl	800395c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002c92:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	482d      	ldr	r0, [pc, #180]	; (8002d54 <BSP_SDRAM_MspInit+0x208>)
 8002ca0:	f000 fe5c 	bl	800395c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002ca4:	f248 1333 	movw	r3, #33075	; 0x8133
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4829      	ldr	r0, [pc, #164]	; (8002d58 <BSP_SDRAM_MspInit+0x20c>)
 8002cb2:	f000 fe53 	bl	800395c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002cb6:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cd8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002cdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ce0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cee:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002cfc:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002d02:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002d0a:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <BSP_SDRAM_MspInit+0x214>)
 8002d0c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
 8002d14:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002d1a:	4810      	ldr	r0, [pc, #64]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002d1c:	f000 fa78 	bl	8003210 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002d20:	480e      	ldr	r0, [pc, #56]	; (8002d5c <BSP_SDRAM_MspInit+0x210>)
 8002d22:	f000 f9c7 	bl	80030b4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	210f      	movs	r1, #15
 8002d2a:	2038      	movs	r0, #56	; 0x38
 8002d2c:	f000 f98b 	bl	8003046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d30:	2038      	movs	r0, #56	; 0x38
 8002d32:	f000 f9a4 	bl	800307e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002d36:	bf00      	nop
 8002d38:	3740      	adds	r7, #64	; 0x40
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40021400 	.word	0x40021400
 8002d58:	40021800 	.word	0x40021800
 8002d5c:	20000544 	.word	0x20000544
 8002d60:	40026410 	.word	0x40026410

08002d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_Init+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	; (8002da4 <HAL_Init+0x40>)
 8002d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <HAL_Init+0x40>)
 8002d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <HAL_Init+0x40>)
 8002d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	f000 f94f 	bl	8003030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d92:	200f      	movs	r0, #15
 8002d94:	f000 f808 	bl	8002da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d98:	f7fe f98c 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023c00 	.word	0x40023c00

08002da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_InitTick+0x54>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_InitTick+0x58>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f967 	bl	800309a <HAL_SYSTICK_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00e      	b.n	8002df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b0f      	cmp	r3, #15
 8002dda:	d80a      	bhi.n	8002df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f000 f92f 	bl	8003046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de8:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <HAL_InitTick+0x5c>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	20000084 	.word	0x20000084
 8002e04:	20000080 	.word	0x20000080

08002e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_IncTick+0x20>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x24>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <HAL_IncTick+0x24>)
 8002e1a:	6013      	str	r3, [r2, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000084 	.word	0x20000084
 8002e2c:	200005a4 	.word	0x200005a4

08002e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return uwTick;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_GetTick+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	200005a4 	.word	0x200005a4

08002e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff ffee 	bl	8002e30 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d005      	beq.n	8002e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_Delay+0x44>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e6e:	bf00      	nop
 8002e70:	f7ff ffde 	bl	8002e30 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d8f7      	bhi.n	8002e70 <HAL_Delay+0x28>
  {
  }
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000084 	.word	0x20000084

08002e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eac:	4013      	ands	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	60d3      	str	r3, [r2, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	f003 0307 	and.w	r3, r3, #7
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db0b      	blt.n	8002f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4907      	ldr	r1, [pc, #28]	; (8002f2c <__NVIC_EnableIRQ+0x38>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2001      	movs	r0, #1
 8002f16:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000e100 	.word	0xe000e100

08002f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	db0a      	blt.n	8002f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	490c      	ldr	r1, [pc, #48]	; (8002f7c <__NVIC_SetPriority+0x4c>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	440b      	add	r3, r1
 8002f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f58:	e00a      	b.n	8002f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4908      	ldr	r1, [pc, #32]	; (8002f80 <__NVIC_SetPriority+0x50>)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	3b04      	subs	r3, #4
 8002f68:	0112      	lsls	r2, r2, #4
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	761a      	strb	r2, [r3, #24]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000e100 	.word	0xe000e100
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f1c3 0307 	rsb	r3, r3, #7
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	bf28      	it	cs
 8002fa2:	2304      	movcs	r3, #4
 8002fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d902      	bls.n	8002fb4 <NVIC_EncodePriority+0x30>
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3b03      	subs	r3, #3
 8002fb2:	e000      	b.n	8002fb6 <NVIC_EncodePriority+0x32>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43d9      	mvns	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	4313      	orrs	r3, r2
         );
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffc:	d301      	bcc.n	8003002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00f      	b.n	8003022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <SysTick_Config+0x40>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300a:	210f      	movs	r1, #15
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f7ff ff8e 	bl	8002f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <SysTick_Config+0x40>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <SysTick_Config+0x40>)
 800301c:	2207      	movs	r2, #7
 800301e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	e000e010 	.word	0xe000e010

08003030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff29 	bl	8002e90 <__NVIC_SetPriorityGrouping>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003058:	f7ff ff3e 	bl	8002ed8 <__NVIC_GetPriorityGrouping>
 800305c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff ff8e 	bl	8002f84 <NVIC_EncodePriority>
 8003068:	4602      	mov	r2, r0
 800306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff5d 	bl	8002f30 <__NVIC_SetPriority>
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff31 	bl	8002ef4 <__NVIC_EnableIRQ>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ffa2 	bl	8002fec <SysTick_Config>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030c0:	f7ff feb6 	bl	8002e30 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e099      	b.n	8003204 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f0:	e00f      	b.n	8003112 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f2:	f7ff fe9d 	bl	8002e30 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d908      	bls.n	8003112 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2203      	movs	r2, #3
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e078      	b.n	8003204 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e8      	bne.n	80030f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_DMA_Init+0x158>)
 800312c:	4013      	ands	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2b04      	cmp	r3, #4
 800316a:	d107      	bne.n	800317c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4313      	orrs	r3, r2
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0307 	bic.w	r3, r3, #7
 8003192:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d117      	bne.n	80031d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00e      	beq.n	80031d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f8bd 	bl	8003338 <DMA_CheckFifoParam>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2240      	movs	r2, #64	; 0x40
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031d2:	2301      	movs	r3, #1
 80031d4:	e016      	b.n	8003204 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f874 	bl	80032cc <DMA_CalcBaseAndBitshift>
 80031e4:	4603      	mov	r3, r0
 80031e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	223f      	movs	r2, #63	; 0x3f
 80031ee:	409a      	lsls	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	f010803f 	.word	0xf010803f

08003210 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e050      	b.n	80032c4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d101      	bne.n	8003232 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	e048      	b.n	80032c4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2221      	movs	r2, #33	; 0x21
 8003270:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f82a 	bl	80032cc <DMA_CalcBaseAndBitshift>
 8003278:	4603      	mov	r3, r0
 800327a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	223f      	movs	r2, #63	; 0x3f
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3b10      	subs	r3, #16
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <DMA_CalcBaseAndBitshift+0x64>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <DMA_CalcBaseAndBitshift+0x68>)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d909      	bls.n	800330e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	1d1a      	adds	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	659a      	str	r2, [r3, #88]	; 0x58
 800330c:	e007      	b.n	800331e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	aaaaaaab 	.word	0xaaaaaaab
 8003334:	0800a7f8 	.word	0x0800a7f8

08003338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11f      	bne.n	8003392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d856      	bhi.n	8003406 <DMA_CheckFifoParam+0xce>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <DMA_CheckFifoParam+0x28>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003371 	.word	0x08003371
 8003364:	08003383 	.word	0x08003383
 8003368:	08003371 	.word	0x08003371
 800336c:	08003407 	.word	0x08003407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d046      	beq.n	800340a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003380:	e043      	b.n	800340a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800338a:	d140      	bne.n	800340e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003390:	e03d      	b.n	800340e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339a:	d121      	bne.n	80033e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d837      	bhi.n	8003412 <DMA_CheckFifoParam+0xda>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <DMA_CheckFifoParam+0x70>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033bf 	.word	0x080033bf
 80033b0:	080033b9 	.word	0x080033b9
 80033b4:	080033d1 	.word	0x080033d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e030      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d025      	beq.n	8003416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ce:	e022      	b.n	8003416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033d8:	d11f      	bne.n	800341a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033de:	e01c      	b.n	800341a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d903      	bls.n	80033ee <DMA_CheckFifoParam+0xb6>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d003      	beq.n	80033f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033ec:	e018      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
      break;
 80033f2:	e015      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e00b      	b.n	800341e <DMA_CheckFifoParam+0xe6>
      break;
 8003406:	bf00      	nop
 8003408:	e00a      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
 800340c:	e008      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800340e:	bf00      	nop
 8003410:	e006      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 8003412:	bf00      	nop
 8003414:	e004      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;   
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800341e:	bf00      	nop
    }
  } 
  
  return status; 
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop

08003430 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e03b      	b.n	80034ba <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f833 	bl	80034c2 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	f023 0107 	bic.w	r1, r3, #7
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800349a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d1      	ldr	r1, [r2, #12]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	430b      	orrs	r3, r1
 80034a8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af02      	add	r7, sp, #8
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_DMA2D_Start+0x1c>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e018      	b.n	8003524 <HAL_DMA2D_Start+0x4e>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f989 	bl	8003824 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d056      	beq.n	80035f6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003548:	f7ff fc72 	bl	8002e30 <HAL_GetTick>
 800354c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800354e:	e04b      	b.n	80035e8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800355e:	2b00      	cmp	r3, #0
 8003560:	d023      	beq.n	80035aa <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	f043 0202 	orr.w	r2, r3, #2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2221      	movs	r2, #33	; 0x21
 8003594:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0a5      	b.n	80036f6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d01a      	beq.n	80035e8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7ff fc3d 	bl	8002e30 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <HAL_DMA2D_PollForTransfer+0x9c>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2203      	movs	r2, #3
 80035d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e086      	b.n	80036f6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ac      	beq.n	8003550 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d061      	beq.n	80036dc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003618:	f7ff fc0a 	bl	8002e30 <HAL_GetTick>
 800361c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800361e:	e056      	b.n	80036ce <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800362e:	2b00      	cmp	r3, #0
 8003630:	d02e      	beq.n	8003690 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	f043 0204 	orr.w	r2, r3, #4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	f043 0202 	orr.w	r2, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	f043 0201 	orr.w	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2229      	movs	r2, #41	; 0x29
 800367a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2204      	movs	r2, #4
 8003680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e032      	b.n	80036f6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003696:	d01a      	beq.n	80036ce <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003698:	f7ff fbca 	bl	8002e30 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d302      	bcc.n	80036ae <HAL_DMA2D_PollForTransfer+0x182>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10f      	bne.n	80036ce <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	f043 0220 	orr.w	r2, r3, #32
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e013      	b.n	80036f6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0a1      	beq.n	8003620 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2212      	movs	r2, #18
 80036e2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_DMA2D_ConfigLayer+0x20>
 800371c:	2302      	movs	r3, #2
 800371e:	e079      	b.n	8003814 <HAL_DMA2D_ConfigLayer+0x114>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	3318      	adds	r3, #24
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800374a:	4b35      	ldr	r3, [pc, #212]	; (8003820 <HAL_DMA2D_ConfigLayer+0x120>)
 800374c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b0a      	cmp	r3, #10
 8003754:	d003      	beq.n	800375e <HAL_DMA2D_ConfigLayer+0x5e>
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b09      	cmp	r3, #9
 800375c:	d107      	bne.n	800376e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e005      	b.n	800377a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	061b      	lsls	r3, r3, #24
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d120      	bne.n	80037c2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43db      	mvns	r3, r3
 800378a:	ea02 0103 	and.w	r1, r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	430a      	orrs	r2, r1
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b0a      	cmp	r3, #10
 80037a8:	d003      	beq.n	80037b2 <HAL_DMA2D_ConfigLayer+0xb2>
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b09      	cmp	r3, #9
 80037b0:	d127      	bne.n	8003802 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
 80037c0:	e01f      	b.n	8003802 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	ea02 0103 	and.w	r1, r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b0a      	cmp	r3, #10
 80037ea:	d003      	beq.n	80037f4 <HAL_DMA2D_ConfigLayer+0xf4>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d106      	bne.n	8003802 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003800:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	ff03000f 	.word	0xff03000f

08003824 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003824:	b480      	push	{r7}
 8003826:	b08b      	sub	sp, #44	; 0x2c
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	041a      	lsls	r2, r3, #16
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	431a      	orrs	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800385c:	d174      	bne.n	8003948 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003864:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800386c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003874:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d108      	bne.n	8003896 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	431a      	orrs	r2, r3
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	4313      	orrs	r3, r2
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	e053      	b.n	800393e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d106      	bne.n	80038ac <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
 80038aa:	e048      	b.n	800393e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d111      	bne.n	80038d8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	0cdb      	lsrs	r3, r3, #19
 80038b8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	0a9b      	lsrs	r3, r3, #10
 80038be:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	08db      	lsrs	r3, r3, #3
 80038c4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	02db      	lsls	r3, r3, #11
 80038ce:	4313      	orrs	r3, r2
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	e032      	b.n	800393e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d117      	bne.n	8003910 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	0fdb      	lsrs	r3, r3, #31
 80038e4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	0cdb      	lsrs	r3, r3, #19
 80038ea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	0adb      	lsrs	r3, r3, #11
 80038f0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	08db      	lsrs	r3, r3, #3
 80038f6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	029b      	lsls	r3, r3, #10
 8003900:	431a      	orrs	r2, r3
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	03db      	lsls	r3, r3, #15
 8003906:	4313      	orrs	r3, r2
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
 800390e:	e016      	b.n	800393e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	0f1b      	lsrs	r3, r3, #28
 8003914:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	0d1b      	lsrs	r3, r3, #20
 800391a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	0b1b      	lsrs	r3, r3, #12
 8003920:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	011a      	lsls	r2, r3, #4
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	431a      	orrs	r2, r3
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	031b      	lsls	r3, r3, #12
 8003936:	4313      	orrs	r3, r2
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003946:	e003      	b.n	8003950 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	60da      	str	r2, [r3, #12]
}
 8003950:	bf00      	nop
 8003952:	372c      	adds	r7, #44	; 0x2c
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e177      	b.n	8003c68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003978:	2201      	movs	r2, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	f040 8166 	bne.w	8003c62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d005      	beq.n	80039ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d130      	bne.n	8003a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039e4:	2201      	movs	r2, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 0201 	and.w	r2, r3, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d017      	beq.n	8003a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d123      	bne.n	8003aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80c0 	beq.w	8003c62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	4b66      	ldr	r3, [pc, #408]	; (8003c80 <HAL_GPIO_Init+0x324>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	4a65      	ldr	r2, [pc, #404]	; (8003c80 <HAL_GPIO_Init+0x324>)
 8003aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af0:	6453      	str	r3, [r2, #68]	; 0x44
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_GPIO_Init+0x324>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003afe:	4a61      	ldr	r2, [pc, #388]	; (8003c84 <HAL_GPIO_Init+0x328>)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	3302      	adds	r3, #2
 8003b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <HAL_GPIO_Init+0x32c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d037      	beq.n	8003b9a <HAL_GPIO_Init+0x23e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a57      	ldr	r2, [pc, #348]	; (8003c8c <HAL_GPIO_Init+0x330>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d031      	beq.n	8003b96 <HAL_GPIO_Init+0x23a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a56      	ldr	r2, [pc, #344]	; (8003c90 <HAL_GPIO_Init+0x334>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02b      	beq.n	8003b92 <HAL_GPIO_Init+0x236>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <HAL_GPIO_Init+0x338>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d025      	beq.n	8003b8e <HAL_GPIO_Init+0x232>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a54      	ldr	r2, [pc, #336]	; (8003c98 <HAL_GPIO_Init+0x33c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01f      	beq.n	8003b8a <HAL_GPIO_Init+0x22e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a53      	ldr	r2, [pc, #332]	; (8003c9c <HAL_GPIO_Init+0x340>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d019      	beq.n	8003b86 <HAL_GPIO_Init+0x22a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a52      	ldr	r2, [pc, #328]	; (8003ca0 <HAL_GPIO_Init+0x344>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_GPIO_Init+0x226>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a51      	ldr	r2, [pc, #324]	; (8003ca4 <HAL_GPIO_Init+0x348>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00d      	beq.n	8003b7e <HAL_GPIO_Init+0x222>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a50      	ldr	r2, [pc, #320]	; (8003ca8 <HAL_GPIO_Init+0x34c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <HAL_GPIO_Init+0x21e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a4f      	ldr	r2, [pc, #316]	; (8003cac <HAL_GPIO_Init+0x350>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_GPIO_Init+0x21a>
 8003b72:	2309      	movs	r3, #9
 8003b74:	e012      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b76:	230a      	movs	r3, #10
 8003b78:	e010      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	e00e      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b7e:	2307      	movs	r3, #7
 8003b80:	e00c      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b82:	2306      	movs	r3, #6
 8003b84:	e00a      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b86:	2305      	movs	r3, #5
 8003b88:	e008      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	e006      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e004      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_GPIO_Init+0x240>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	f002 0203 	and.w	r2, r2, #3
 8003ba2:	0092      	lsls	r2, r2, #2
 8003ba4:	4093      	lsls	r3, r2
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bac:	4935      	ldr	r1, [pc, #212]	; (8003c84 <HAL_GPIO_Init+0x328>)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_GPIO_Init+0x354>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bde:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <HAL_GPIO_Init+0x354>)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be4:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_GPIO_Init+0x354>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c08:	4a29      	ldr	r2, [pc, #164]	; (8003cb0 <HAL_GPIO_Init+0x354>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_GPIO_Init+0x354>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c32:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <HAL_GPIO_Init+0x354>)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c38:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <HAL_GPIO_Init+0x354>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <HAL_GPIO_Init+0x354>)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3301      	adds	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b0f      	cmp	r3, #15
 8003c6c:	f67f ae84 	bls.w	8003978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40020000 	.word	0x40020000
 8003c8c:	40020400 	.word	0x40020400
 8003c90:	40020800 	.word	0x40020800
 8003c94:	40020c00 	.word	0x40020c00
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40021400 	.word	0x40021400
 8003ca0:	40021800 	.word	0x40021800
 8003ca4:	40021c00 	.word	0x40021c00
 8003ca8:	40022000 	.word	0x40022000
 8003cac:	40022400 	.word	0x40022400
 8003cb0:	40013c00 	.word	0x40013c00

08003cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cc4:	787b      	ldrb	r3, [r7, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cd0:	e003      	b.n	8003cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	041a      	lsls	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	619a      	str	r2, [r3, #24]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0bf      	b.n	8003e7a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f8ba 	bl	8003e88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d2a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d40:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6899      	ldr	r1, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_LTDC_Init+0x19c>)
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6899      	ldr	r1, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68d9      	ldr	r1, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b3e      	ldr	r3, [pc, #248]	; (8003e84 <HAL_LTDC_Init+0x19c>)
 8003d8a:	400b      	ands	r3, r1
 8003d8c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1a      	ldr	r2, [r3, #32]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6919      	ldr	r1, [r3, #16]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b33      	ldr	r3, [pc, #204]	; (8003e84 <HAL_LTDC_Init+0x19c>)
 8003db8:	400b      	ands	r3, r1
 8003dba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6919      	ldr	r1, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6959      	ldr	r1, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <HAL_LTDC_Init+0x19c>)
 8003de6:	400b      	ands	r3, r1
 8003de8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6959      	ldr	r1, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0206 	orr.w	r2, r2, #6
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	f000f800 	.word	0xf000f800

08003e88 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e9c:	b5b0      	push	{r4, r5, r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_LTDC_ConfigLayer+0x1a>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e02c      	b.n	8003f10 <HAL_LTDC_ConfigLayer+0x74>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2134      	movs	r1, #52	; 0x34
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4614      	mov	r4, r2
 8003eda:	461d      	mov	r5, r3
 8003edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f83b 	bl	8003f6c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2201      	movs	r2, #1
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bdb0      	pop	{r4, r5, r7, pc}

08003f18 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_LTDC_EnableDither+0x16>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e016      	b.n	8003f5c <HAL_LTDC_EnableDither+0x44>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <HAL_LTDC_EnableDither+0x50>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <HAL_LTDC_EnableDither+0x50>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40016800 	.word	0x40016800

08003f6c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f88:	4413      	add	r3, r2
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	4413      	add	r3, r2
 8003f9a:	3384      	adds	r3, #132	; 0x84
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	01d2      	lsls	r2, r2, #7
 8003fa8:	440a      	add	r2, r1
 8003faa:	3284      	adds	r2, #132	; 0x84
 8003fac:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fb0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fc2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fc4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	01db      	lsls	r3, r3, #7
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3384      	adds	r3, #132	; 0x84
 8003fd4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fda:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fea:	4413      	add	r3, r2
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	01db      	lsls	r3, r3, #7
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3384      	adds	r3, #132	; 0x84
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	4611      	mov	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	01d2      	lsls	r2, r2, #7
 800400a:	440a      	add	r2, r1
 800400c:	3284      	adds	r2, #132	; 0x84
 800400e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004012:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004022:	4413      	add	r3, r2
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4619      	mov	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	01db      	lsls	r3, r3, #7
 8004030:	440b      	add	r3, r1
 8004032:	3384      	adds	r3, #132	; 0x84
 8004034:	4619      	mov	r1, r3
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	01db      	lsls	r3, r3, #7
 8004046:	4413      	add	r3, r2
 8004048:	3384      	adds	r3, #132	; 0x84
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	4611      	mov	r1, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	01d2      	lsls	r2, r2, #7
 8004056:	440a      	add	r2, r1
 8004058:	3284      	adds	r2, #132	; 0x84
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	01db      	lsls	r3, r3, #7
 800406a:	4413      	add	r3, r2
 800406c:	3384      	adds	r3, #132	; 0x84
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	061b      	lsls	r3, r3, #24
 8004090:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	01db      	lsls	r3, r3, #7
 800409c:	4413      	add	r3, r2
 800409e:	3384      	adds	r3, #132	; 0x84
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	01db      	lsls	r3, r3, #7
 80040ac:	4413      	add	r3, r2
 80040ae:	3384      	adds	r3, #132	; 0x84
 80040b0:	461a      	mov	r2, r3
 80040b2:	2300      	movs	r3, #0
 80040b4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040bc:	461a      	mov	r2, r3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4619      	mov	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	01db      	lsls	r3, r3, #7
 80040d0:	440b      	add	r3, r1
 80040d2:	3384      	adds	r3, #132	; 0x84
 80040d4:	4619      	mov	r1, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	01db      	lsls	r3, r3, #7
 80040e6:	4413      	add	r3, r2
 80040e8:	3384      	adds	r3, #132	; 0x84
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	4611      	mov	r1, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	01d2      	lsls	r2, r2, #7
 80040f6:	440a      	add	r2, r1
 80040f8:	3284      	adds	r2, #132	; 0x84
 80040fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	01db      	lsls	r3, r3, #7
 800410a:	4413      	add	r3, r2
 800410c:	3384      	adds	r3, #132	; 0x84
 800410e:	461a      	mov	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	01db      	lsls	r3, r3, #7
 8004120:	4413      	add	r3, r2
 8004122:	3384      	adds	r3, #132	; 0x84
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	4611      	mov	r1, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	01d2      	lsls	r2, r2, #7
 8004130:	440a      	add	r2, r1
 8004132:	3284      	adds	r2, #132	; 0x84
 8004134:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004138:	f023 0307 	bic.w	r3, r3, #7
 800413c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	6809      	ldr	r1, [r1, #0]
 800414a:	4608      	mov	r0, r1
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	01c9      	lsls	r1, r1, #7
 8004150:	4401      	add	r1, r0
 8004152:	3184      	adds	r1, #132	; 0x84
 8004154:	4313      	orrs	r3, r2
 8004156:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	01db      	lsls	r3, r3, #7
 8004162:	4413      	add	r3, r2
 8004164:	3384      	adds	r3, #132	; 0x84
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	01db      	lsls	r3, r3, #7
 8004172:	4413      	add	r3, r2
 8004174:	3384      	adds	r3, #132	; 0x84
 8004176:	461a      	mov	r2, r3
 8004178:	2300      	movs	r3, #0
 800417a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	01db      	lsls	r3, r3, #7
 8004186:	4413      	add	r3, r2
 8004188:	3384      	adds	r3, #132	; 0x84
 800418a:	461a      	mov	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800419a:	2304      	movs	r3, #4
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e01b      	b.n	80041d8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d102      	bne.n	80041ae <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80041a8:	2303      	movs	r3, #3
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	e014      	b.n	80041d8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d00b      	beq.n	80041ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d007      	beq.n	80041ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d003      	beq.n	80041ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041ca:	2b07      	cmp	r3, #7
 80041cc:	d102      	bne.n	80041d4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80041ce:	2302      	movs	r3, #2
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e001      	b.n	80041d8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80041d4:	2301      	movs	r3, #1
 80041d6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	01db      	lsls	r3, r3, #7
 80041e2:	4413      	add	r3, r2
 80041e4:	3384      	adds	r3, #132	; 0x84
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	4611      	mov	r1, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	01d2      	lsls	r2, r2, #7
 80041f2:	440a      	add	r2, r1
 80041f4:	3284      	adds	r2, #132	; 0x84
 80041f6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80041fa:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	1acb      	subs	r3, r1, r3
 8004212:	69f9      	ldr	r1, [r7, #28]
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	6809      	ldr	r1, [r1, #0]
 800421e:	4608      	mov	r0, r1
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	01c9      	lsls	r1, r1, #7
 8004224:	4401      	add	r1, r0
 8004226:	3184      	adds	r1, #132	; 0x84
 8004228:	4313      	orrs	r3, r2
 800422a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	01db      	lsls	r3, r3, #7
 8004236:	4413      	add	r3, r2
 8004238:	3384      	adds	r3, #132	; 0x84
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	4611      	mov	r1, r2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	01d2      	lsls	r2, r2, #7
 8004246:	440a      	add	r2, r1
 8004248:	3284      	adds	r2, #132	; 0x84
 800424a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800424e:	f023 0307 	bic.w	r3, r3, #7
 8004252:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	01db      	lsls	r3, r3, #7
 800425e:	4413      	add	r3, r2
 8004260:	3384      	adds	r3, #132	; 0x84
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	4413      	add	r3, r2
 8004276:	3384      	adds	r3, #132	; 0x84
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	4611      	mov	r1, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	01d2      	lsls	r2, r2, #7
 8004284:	440a      	add	r2, r1
 8004286:	3284      	adds	r2, #132	; 0x84
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6013      	str	r3, [r2, #0]
}
 800428e:	bf00      	nop
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_PWREx_EnableOverDrive+0x90>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_PWREx_EnableOverDrive+0x90>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b4:	6413      	str	r3, [r2, #64]	; 0x40
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_PWREx_EnableOverDrive+0x90>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042c2:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_PWREx_EnableOverDrive+0x94>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042c8:	f7fe fdb2 	bl	8002e30 <HAL_GetTick>
 80042cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042ce:	e009      	b.n	80042e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042d0:	f7fe fdae 	bl	8002e30 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042de:	d901      	bls.n	80042e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e01f      	b.n	8004324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d1ee      	bne.n	80042d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042f8:	f7fe fd9a 	bl	8002e30 <HAL_GetTick>
 80042fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042fe:	e009      	b.n	8004314 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004300:	f7fe fd96 	bl	8002e30 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800430e:	d901      	bls.n	8004314 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e007      	b.n	8004324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_PWREx_EnableOverDrive+0x98>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004320:	d1ee      	bne.n	8004300 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	420e0040 	.word	0x420e0040
 8004334:	40007000 	.word	0x40007000
 8004338:	420e0044 	.word	0x420e0044

0800433c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e267      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d075      	beq.n	8004446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800435a:	4b88      	ldr	r3, [pc, #544]	; (800457c <HAL_RCC_OscConfig+0x240>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d00c      	beq.n	8004380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004366:	4b85      	ldr	r3, [pc, #532]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436e:	2b08      	cmp	r3, #8
 8004370:	d112      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004372:	4b82      	ldr	r3, [pc, #520]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437e:	d10b      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	4b7e      	ldr	r3, [pc, #504]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d05b      	beq.n	8004444 <HAL_RCC_OscConfig+0x108>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d157      	bne.n	8004444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e242      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x74>
 80043a2:	4b76      	ldr	r3, [pc, #472]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a75      	ldr	r2, [pc, #468]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e01d      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x98>
 80043ba:	4b70      	ldr	r3, [pc, #448]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6f      	ldr	r2, [pc, #444]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b6d      	ldr	r3, [pc, #436]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6c      	ldr	r2, [pc, #432]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043d4:	4b69      	ldr	r3, [pc, #420]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a68      	ldr	r2, [pc, #416]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b66      	ldr	r3, [pc, #408]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a65      	ldr	r2, [pc, #404]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80043e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fe fd1c 	bl	8002e30 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fe fd18 	bl	8002e30 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e207      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b5b      	ldr	r3, [pc, #364]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0xc0>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fe fd08 	bl	8002e30 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004424:	f7fe fd04 	bl	8002e30 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1f3      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	4b51      	ldr	r3, [pc, #324]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0xe8>
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d063      	beq.n	800451a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004452:	4b4a      	ldr	r3, [pc, #296]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004466:	2b08      	cmp	r3, #8
 8004468:	d11c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446a:	4b44      	ldr	r3, [pc, #272]	; (800457c <HAL_RCC_OscConfig+0x240>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	4b41      	ldr	r3, [pc, #260]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e1c7      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448e:	4b3b      	ldr	r3, [pc, #236]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4937      	ldr	r1, [pc, #220]	; (800457c <HAL_RCC_OscConfig+0x240>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	e03a      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ac:	4b34      	ldr	r3, [pc, #208]	; (8004580 <HAL_RCC_OscConfig+0x244>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fe fcbd 	bl	8002e30 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ba:	f7fe fcb9 	bl	8002e30 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e1a8      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044cc:	4b2b      	ldr	r3, [pc, #172]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b28      	ldr	r3, [pc, #160]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4925      	ldr	r1, [pc, #148]	; (800457c <HAL_RCC_OscConfig+0x240>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]
 80044ec:	e015      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <HAL_RCC_OscConfig+0x244>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fe fc9c 	bl	8002e30 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044fc:	f7fe fc98 	bl	8002e30 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e187      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	4b1b      	ldr	r3, [pc, #108]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d036      	beq.n	8004594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452e:	4b15      	ldr	r3, [pc, #84]	; (8004584 <HAL_RCC_OscConfig+0x248>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fe fc7c 	bl	8002e30 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800453c:	f7fe fc78 	bl	8002e30 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e167      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_OscConfig+0x240>)
 8004550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x200>
 800455a:	e01b      	b.n	8004594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <HAL_RCC_OscConfig+0x248>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7fe fc65 	bl	8002e30 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	e00e      	b.n	8004588 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456a:	f7fe fc61 	bl	8002e30 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d907      	bls.n	8004588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e150      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
 800457c:	40023800 	.word	0x40023800
 8004580:	42470000 	.word	0x42470000
 8004584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	4b88      	ldr	r3, [pc, #544]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 800458a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ea      	bne.n	800456a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8097 	beq.w	80046d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b81      	ldr	r3, [pc, #516]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	4b7d      	ldr	r3, [pc, #500]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a7c      	ldr	r2, [pc, #496]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	4b7a      	ldr	r3, [pc, #488]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d2:	4b77      	ldr	r3, [pc, #476]	; (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d118      	bne.n	8004610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045de:	4b74      	ldr	r3, [pc, #464]	; (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a73      	ldr	r2, [pc, #460]	; (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ea:	f7fe fc21 	bl	8002e30 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7fe fc1d 	bl	8002e30 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e10c      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_OscConfig+0x474>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d106      	bne.n	8004626 <HAL_RCC_OscConfig+0x2ea>
 8004618:	4b64      	ldr	r3, [pc, #400]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a63      	ldr	r2, [pc, #396]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
 8004624:	e01c      	b.n	8004660 <HAL_RCC_OscConfig+0x324>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b05      	cmp	r3, #5
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x30c>
 800462e:	4b5f      	ldr	r3, [pc, #380]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a5e      	ldr	r2, [pc, #376]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
 800463a:	4b5c      	ldr	r3, [pc, #368]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a5b      	ldr	r2, [pc, #364]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0x324>
 8004648:	4b58      	ldr	r3, [pc, #352]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4a57      	ldr	r2, [pc, #348]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
 8004654:	4b55      	ldr	r3, [pc, #340]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4a54      	ldr	r2, [pc, #336]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 800465a:	f023 0304 	bic.w	r3, r3, #4
 800465e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fe fbe2 	bl	8002e30 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fe fbde 	bl	8002e30 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e0cb      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004686:	4b49      	ldr	r3, [pc, #292]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ee      	beq.n	8004670 <HAL_RCC_OscConfig+0x334>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004694:	f7fe fbcc 	bl	8002e30 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fe fbc8 	bl	8002e30 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0b5      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b2:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ee      	bne.n	800469c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d105      	bne.n	80046d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c4:	4b39      	ldr	r3, [pc, #228]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	4a38      	ldr	r2, [pc, #224]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 80046ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a1 	beq.w	800481c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d05c      	beq.n	80047a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d141      	bne.n	8004772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ee:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <HAL_RCC_OscConfig+0x478>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fe fb9c 	bl	8002e30 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fe fb98 	bl	8002e30 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e087      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	4b27      	ldr	r3, [pc, #156]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	019b      	lsls	r3, r3, #6
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	3b01      	subs	r3, #1
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	061b      	lsls	r3, r3, #24
 800473e:	491b      	ldr	r1, [pc, #108]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_RCC_OscConfig+0x478>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474a:	f7fe fb71 	bl	8002e30 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004752:	f7fe fb6d 	bl	8002e30 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e05c      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004764:	4b11      	ldr	r3, [pc, #68]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x416>
 8004770:	e054      	b.n	800481c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_RCC_OscConfig+0x478>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe fb5a 	bl	8002e30 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004780:	f7fe fb56 	bl	8002e30 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e045      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_RCC_OscConfig+0x470>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x444>
 800479e:	e03d      	b.n	800481c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e038      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000
 80047b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <HAL_RCC_OscConfig+0x4ec>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d028      	beq.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d121      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d11a      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d111      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	3b01      	subs	r3, #1
 8004802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d107      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800

0800482c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0cc      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b68      	ldr	r3, [pc, #416]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d90c      	bls.n	8004868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b8      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004880:	4b59      	ldr	r3, [pc, #356]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a58      	ldr	r2, [pc, #352]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800488a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b50      	ldr	r3, [pc, #320]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	494d      	ldr	r1, [pc, #308]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d044      	beq.n	800494c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d119      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e067      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4934      	ldr	r1, [pc, #208]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800491c:	f7fe fa88 	bl	8002e30 <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fe fa84 	bl	8002e30 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e04f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d20c      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e032      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4916      	ldr	r1, [pc, #88]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490e      	ldr	r1, [pc, #56]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049b2:	f000 f821 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	490a      	ldr	r1, [pc, #40]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <HAL_RCC_ClockConfig+0x1c8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe f9e8 	bl	8002da8 <HAL_InitTick>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00
 80049e8:	40023800 	.word	0x40023800
 80049ec:	08008d30 	.word	0x08008d30
 80049f0:	20000000 	.word	0x20000000
 80049f4:	20000080 	.word	0x20000080

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b094      	sub	sp, #80	; 0x50
 80049fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	647b      	str	r3, [r7, #68]	; 0x44
 8004a04:	2300      	movs	r3, #0
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a08:	2300      	movs	r3, #0
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a10:	4b79      	ldr	r3, [pc, #484]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d00d      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x40>
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	f200 80e1 	bhi.w	8004be4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x34>
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d003      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a2a:	e0db      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b73      	ldr	r3, [pc, #460]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a30:	e0db      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a32:	4b73      	ldr	r3, [pc, #460]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a36:	e0d8      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a38:	4b6f      	ldr	r3, [pc, #444]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a42:	4b6d      	ldr	r3, [pc, #436]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d063      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4e:	4b6a      	ldr	r3, [pc, #424]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	2200      	movs	r2, #0
 8004a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a60:	633b      	str	r3, [r7, #48]	; 0x30
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
 8004a66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	f04f 0000 	mov.w	r0, #0
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	0159      	lsls	r1, r3, #5
 8004a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a7c:	0150      	lsls	r0, r2, #5
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4621      	mov	r1, r4
 8004a84:	1a51      	subs	r1, r2, r1
 8004a86:	6139      	str	r1, [r7, #16]
 8004a88:	4629      	mov	r1, r5
 8004a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	018b      	lsls	r3, r1, #6
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	018a      	lsls	r2, r1, #6
 8004aaa:	4651      	mov	r1, sl
 8004aac:	ebb2 0801 	subs.w	r8, r2, r1
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aca:	4690      	mov	r8, r2
 8004acc:	4699      	mov	r9, r3
 8004ace:	4623      	mov	r3, r4
 8004ad0:	eb18 0303 	adds.w	r3, r8, r3
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	eb49 0303 	adc.w	r3, r9, r3
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004aea:	4629      	mov	r1, r5
 8004aec:	024b      	lsls	r3, r1, #9
 8004aee:	4621      	mov	r1, r4
 8004af0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004af4:	4621      	mov	r1, r4
 8004af6:	024a      	lsls	r2, r1, #9
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afe:	2200      	movs	r2, #0
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b08:	f7fc f85e 	bl	8000bc8 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4613      	mov	r3, r2
 8004b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b14:	e058      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b16:	4b38      	ldr	r3, [pc, #224]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	099b      	lsrs	r3, r3, #6
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	4611      	mov	r1, r2
 8004b22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	0159      	lsls	r1, r3, #5
 8004b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b42:	0150      	lsls	r0, r2, #5
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4641      	mov	r1, r8
 8004b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b4e:	4649      	mov	r1, r9
 8004b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b68:	ebb2 040a 	subs.w	r4, r2, sl
 8004b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	00eb      	lsls	r3, r5, #3
 8004b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7e:	00e2      	lsls	r2, r4, #3
 8004b80:	4614      	mov	r4, r2
 8004b82:	461d      	mov	r5, r3
 8004b84:	4643      	mov	r3, r8
 8004b86:	18e3      	adds	r3, r4, r3
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	eb45 0303 	adc.w	r3, r5, r3
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	028b      	lsls	r3, r1, #10
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ba8:	4621      	mov	r1, r4
 8004baa:	028a      	lsls	r2, r1, #10
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	61fa      	str	r2, [r7, #28]
 8004bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bbc:	f7fc f804 	bl	8000bc8 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004be2:	e002      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3750      	adds	r7, #80	; 0x50
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d075      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c38:	4b91      	ldr	r3, [pc, #580]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c3e:	f7fe f8f7 	bl	8002e30 <HAL_GetTick>
 8004c42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c46:	f7fe f8f3 	bl	8002e30 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e189      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c58:	4b8a      	ldr	r3, [pc, #552]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f0      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d009      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	019a      	lsls	r2, r3, #6
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	071b      	lsls	r3, r3, #28
 8004c7c:	4981      	ldr	r1, [pc, #516]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01f      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c90:	4b7c      	ldr	r3, [pc, #496]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c96:	0f1b      	lsrs	r3, r3, #28
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	019a      	lsls	r2, r3, #6
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	431a      	orrs	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	071b      	lsls	r3, r3, #28
 8004cb0:	4974      	ldr	r1, [pc, #464]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cb8:	4b72      	ldr	r3, [pc, #456]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cbe:	f023 021f 	bic.w	r2, r3, #31
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	496e      	ldr	r1, [pc, #440]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	019a      	lsls	r2, r3, #6
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	071b      	lsls	r3, r3, #28
 8004cf0:	4964      	ldr	r1, [pc, #400]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf8:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cfe:	f7fe f897 	bl	8002e30 <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d06:	f7fe f893 	bl	8002e30 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e129      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d18:	4b5a      	ldr	r3, [pc, #360]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d079      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d3c:	4b52      	ldr	r3, [pc, #328]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d42:	f7fe f875 	bl	8002e30 <HAL_GetTick>
 8004d46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d4a:	f7fe f871 	bl	8002e30 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e107      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d5c:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d68:	d0ef      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d020      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d76:	4b43      	ldr	r3, [pc, #268]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	0f1b      	lsrs	r3, r3, #28
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	019a      	lsls	r2, r3, #6
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	431a      	orrs	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	071b      	lsls	r3, r3, #28
 8004d96:	493b      	ldr	r1, [pc, #236]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d9e:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	4934      	ldr	r1, [pc, #208]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01e      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	0e1b      	lsrs	r3, r3, #24
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	019a      	lsls	r2, r3, #6
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	071b      	lsls	r3, r3, #28
 8004de4:	4927      	ldr	r1, [pc, #156]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	4922      	ldr	r1, [pc, #136]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e02:	4b21      	ldr	r3, [pc, #132]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e08:	f7fe f812 	bl	8002e30 <HAL_GetTick>
 8004e0c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e10:	f7fe f80e 	bl	8002e30 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0a4      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e22:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e2e:	d1ef      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 808b 	beq.w	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a0f      	ldr	r2, [pc, #60]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e66:	f7fd ffe3 	bl	8002e30 <HAL_GetTick>
 8004e6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e6c:	e010      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e6e:	f7fd ffdf 	bl	8002e30 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d909      	bls.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e075      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e80:	42470068 	.word	0x42470068
 8004e84:	40023800 	.word	0x40023800
 8004e88:	42470070 	.word	0x42470070
 8004e8c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e90:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0e8      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d02f      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d028      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eba:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eca:	4b2c      	ldr	r3, [pc, #176]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ed0:	4a29      	ldr	r2, [pc, #164]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ed6:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d114      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ee2:	f7fd ffa5 	bl	8002e30 <HAL_GetTick>
 8004ee6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fd ffa1 	bl	8002e30 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e035      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f00:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ee      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f18:	d10d      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f1a:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2e:	4912      	ldr	r1, [pc, #72]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	608b      	str	r3, [r1, #8]
 8004f34:	e005      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	4a0f      	ldr	r2, [pc, #60]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f40:	6093      	str	r3, [r2, #8]
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4e:	490a      	ldr	r1, [pc, #40]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004f68:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40007000 	.word	0x40007000
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	42470e40 	.word	0x42470e40
 8004f80:	424711e0 	.word	0x424711e0

08004f84 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e025      	b.n	8004fe4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f81d 	bl	8004fec <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	f000 fe6b 	bl	8005ca0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	f000 fec0 	bl	8005d5a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005012:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d101      	bne.n	800501e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800501a:	2302      	movs	r3, #2
 800501c:	e021      	b.n	8005062 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800501e:	7dfb      	ldrb	r3, [r7, #23]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d002      	beq.n	800502a <HAL_SDRAM_SendCommand+0x2a>
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b05      	cmp	r3, #5
 8005028:	d118      	bne.n	800505c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fef6 	bl	8005e2c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d104      	bne.n	8005052 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2205      	movs	r2, #5
 800504c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005050:	e006      	b.n	8005060 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800505a:	e001      	b.n	8005060 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d101      	bne.n	8005084 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005080:	2302      	movs	r3, #2
 8005082:	e016      	b.n	80050b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d10f      	bne.n	80050b0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 ff01 	bl	8005ea6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e07b      	b.n	80051c4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d108      	bne.n	80050e6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050dc:	d009      	beq.n	80050f2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	61da      	str	r2, [r3, #28]
 80050e4:	e005      	b.n	80050f2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f885 	bl	800521c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005128:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	ea42 0103 	orr.w	r1, r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	0c1b      	lsrs	r3, r3, #16
 8005190:	f003 0104 	and.w	r1, r3, #4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	f003 0210 	and.w	r2, r3, #16
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69da      	ldr	r2, [r3, #28]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e01a      	b.n	8005214 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f81a 	bl	8005230 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_SPI_Transmit+0x22>
 8005262:	2302      	movs	r3, #2
 8005264:	e126      	b.n	80054b4 <HAL_SPI_Transmit+0x270>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800526e:	f7fd fddf 	bl	8002e30 <HAL_GetTick>
 8005272:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d002      	beq.n	800528a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005284:	2302      	movs	r3, #2
 8005286:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005288:	e10b      	b.n	80054a2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_SPI_Transmit+0x52>
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	77fb      	strb	r3, [r7, #31]
    goto error;
 800529a:	e102      	b.n	80054a2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2203      	movs	r2, #3
 80052a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	88fa      	ldrh	r2, [r7, #6]
 80052ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e2:	d10f      	bne.n	8005304 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005302:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530e:	2b40      	cmp	r3, #64	; 0x40
 8005310:	d007      	beq.n	8005322 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005320:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800532a:	d14b      	bne.n	80053c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_SPI_Transmit+0xf6>
 8005334:	8afb      	ldrh	r3, [r7, #22]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d13e      	bne.n	80053b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	881a      	ldrh	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	1c9a      	adds	r2, r3, #2
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800535e:	e02b      	b.n	80053b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b02      	cmp	r3, #2
 800536c:	d112      	bne.n	8005394 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	86da      	strh	r2, [r3, #54]	; 0x36
 8005392:	e011      	b.n	80053b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005394:	f7fd fd4c 	bl	8002e30 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d803      	bhi.n	80053ac <HAL_SPI_Transmit+0x168>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d102      	bne.n	80053b2 <HAL_SPI_Transmit+0x16e>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053b6:	e074      	b.n	80054a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1ce      	bne.n	8005360 <HAL_SPI_Transmit+0x11c>
 80053c2:	e04c      	b.n	800545e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <HAL_SPI_Transmit+0x18e>
 80053cc:	8afb      	ldrh	r3, [r7, #22]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d140      	bne.n	8005454 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053f8:	e02c      	b.n	8005454 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b02      	cmp	r3, #2
 8005406:	d113      	bne.n	8005430 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	330c      	adds	r3, #12
 8005412:	7812      	ldrb	r2, [r2, #0]
 8005414:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	86da      	strh	r2, [r3, #54]	; 0x36
 800542e:	e011      	b.n	8005454 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005430:	f7fd fcfe 	bl	8002e30 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d803      	bhi.n	8005448 <HAL_SPI_Transmit+0x204>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d102      	bne.n	800544e <HAL_SPI_Transmit+0x20a>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005452:	e026      	b.n	80054a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1cd      	bne.n	80053fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fbda 	bl	8005c1c <SPI_EndRxTxTransaction>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e000      	b.n	80054a2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80054a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3720      	adds	r7, #32
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d8:	d112      	bne.n	8005500 <HAL_SPI_Receive+0x44>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10e      	bne.n	8005500 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2204      	movs	r2, #4
 80054e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	4613      	mov	r3, r2
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f8f1 	bl	80056de <HAL_SPI_TransmitReceive>
 80054fc:	4603      	mov	r3, r0
 80054fe:	e0ea      	b.n	80056d6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_SPI_Receive+0x52>
 800550a:	2302      	movs	r3, #2
 800550c:	e0e3      	b.n	80056d6 <HAL_SPI_Receive+0x21a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005516:	f7fd fc8b 	bl	8002e30 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d002      	beq.n	800552e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005528:	2302      	movs	r3, #2
 800552a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800552c:	e0ca      	b.n	80056c4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_SPI_Receive+0x7e>
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800553e:	e0c1      	b.n	80056c4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2204      	movs	r2, #4
 8005544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005586:	d10f      	bne.n	80055a8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005596:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d007      	beq.n	80055c6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d162      	bne.n	8005694 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055ce:	e02e      	b.n	800562e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d115      	bne.n	800560a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f103 020c 	add.w	r2, r3, #12
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005608:	e011      	b.n	800562e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800560a:	f7fd fc11 	bl	8002e30 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d803      	bhi.n	8005622 <HAL_SPI_Receive+0x166>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d102      	bne.n	8005628 <HAL_SPI_Receive+0x16c>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800562c:	e04a      	b.n	80056c4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1cb      	bne.n	80055d0 <HAL_SPI_Receive+0x114>
 8005638:	e031      	b.n	800569e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b01      	cmp	r3, #1
 8005646:	d113      	bne.n	8005670 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	b292      	uxth	r2, r2
 8005654:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	1c9a      	adds	r2, r3, #2
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800566e:	e011      	b.n	8005694 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005670:	f7fd fbde 	bl	8002e30 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d803      	bhi.n	8005688 <HAL_SPI_Receive+0x1cc>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d102      	bne.n	800568e <HAL_SPI_Receive+0x1d2>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d102      	bne.n	8005694 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005692:	e017      	b.n	80056c4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1cd      	bne.n	800563a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fa54 	bl	8005b50 <SPI_EndRxTransaction>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2220      	movs	r2, #32
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	75fb      	strb	r3, [r7, #23]
 80056c0:	e000      	b.n	80056c4 <HAL_SPI_Receive+0x208>
  }

error :
 80056c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b08c      	sub	sp, #48	; 0x30
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
 80056ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056ec:	2301      	movs	r3, #1
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_SPI_TransmitReceive+0x26>
 8005700:	2302      	movs	r3, #2
 8005702:	e18a      	b.n	8005a1a <HAL_SPI_TransmitReceive+0x33c>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800570c:	f7fd fb90 	bl	8002e30 <HAL_GetTick>
 8005710:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005722:	887b      	ldrh	r3, [r7, #2]
 8005724:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005726:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800572a:	2b01      	cmp	r3, #1
 800572c:	d00f      	beq.n	800574e <HAL_SPI_TransmitReceive+0x70>
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005734:	d107      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x68>
 800573e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005742:	2b04      	cmp	r3, #4
 8005744:	d003      	beq.n	800574e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005746:	2302      	movs	r3, #2
 8005748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800574c:	e15b      	b.n	8005a06 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_SPI_TransmitReceive+0x82>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_SPI_TransmitReceive+0x82>
 800575a:	887b      	ldrh	r3, [r7, #2]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d103      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005766:	e14e      	b.n	8005a06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b04      	cmp	r3, #4
 8005772:	d003      	beq.n	800577c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2205      	movs	r2, #5
 8005778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	887a      	ldrh	r2, [r7, #2]
 800578c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	887a      	ldrh	r2, [r7, #2]
 8005792:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	887a      	ldrh	r2, [r7, #2]
 800579e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	887a      	ldrh	r2, [r7, #2]
 80057a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d007      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d8:	d178      	bne.n	80058cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_SPI_TransmitReceive+0x10a>
 80057e2:	8b7b      	ldrh	r3, [r7, #26]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d166      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ec:	881a      	ldrh	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	1c9a      	adds	r2, r3, #2
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800580c:	e053      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b02      	cmp	r3, #2
 800581a:	d11b      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x176>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d016      	beq.n	8005854 <HAL_SPI_TransmitReceive+0x176>
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d113      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	881a      	ldrh	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	1c9a      	adds	r2, r3, #2
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d119      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x1b8>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d014      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	b292      	uxth	r2, r2
 8005878:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	1c9a      	adds	r2, r3, #2
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005892:	2301      	movs	r3, #1
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005896:	f7fd facb 	bl	8002e30 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d807      	bhi.n	80058b6 <HAL_SPI_TransmitReceive+0x1d8>
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d003      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058b4:	e0a7      	b.n	8005a06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1a6      	bne.n	800580e <HAL_SPI_TransmitReceive+0x130>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1a1      	bne.n	800580e <HAL_SPI_TransmitReceive+0x130>
 80058ca:	e07c      	b.n	80059c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_SPI_TransmitReceive+0x1fc>
 80058d4:	8b7b      	ldrh	r3, [r7, #26]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d16b      	bne.n	80059b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005900:	e057      	b.n	80059b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d11c      	bne.n	800594a <HAL_SPI_TransmitReceive+0x26c>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d017      	beq.n	800594a <HAL_SPI_TransmitReceive+0x26c>
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d114      	bne.n	800594a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d119      	bne.n	800598c <HAL_SPI_TransmitReceive+0x2ae>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d014      	beq.n	800598c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005988:	2301      	movs	r3, #1
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800598c:	f7fd fa50 	bl	8002e30 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005998:	429a      	cmp	r2, r3
 800599a:	d803      	bhi.n	80059a4 <HAL_SPI_TransmitReceive+0x2c6>
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d102      	bne.n	80059aa <HAL_SPI_TransmitReceive+0x2cc>
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059b0:	e029      	b.n	8005a06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1a2      	bne.n	8005902 <HAL_SPI_TransmitReceive+0x224>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d19d      	bne.n	8005902 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f926 	bl	8005c1c <SPI_EndRxTxTransaction>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d006      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059e2:	e010      	b.n	8005a06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10b      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	e000      	b.n	8005a06 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3730      	adds	r7, #48	; 0x30
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a30:	b2db      	uxtb	r3, r3
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a50:	f7fd f9ee 	bl	8002e30 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a60:	f7fd f9e6 	bl	8002e30 <HAL_GetTick>
 8005a64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a66:	4b39      	ldr	r3, [pc, #228]	; (8005b4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	015b      	lsls	r3, r3, #5
 8005a6c:	0d1b      	lsrs	r3, r3, #20
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a76:	e054      	b.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d050      	beq.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a80:	f7fd f9d6 	bl	8002e30 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d902      	bls.n	8005a96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d13d      	bne.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005aa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aae:	d111      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab8:	d004      	beq.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac2:	d107      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005adc:	d10f      	bne.n	8005afe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005afc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e017      	b.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	bf0c      	ite	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	2300      	movne	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d19b      	bne.n	8005a78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000000 	.word	0x20000000

08005b50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b64:	d111      	bne.n	8005b8a <SPI_EndRxTransaction+0x3a>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b6e:	d004      	beq.n	8005b7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b78:	d107      	bne.n	8005b8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b92:	d12a      	bne.n	8005bea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9c:	d012      	beq.n	8005bc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2180      	movs	r1, #128	; 0x80
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7ff ff49 	bl	8005a40 <SPI_WaitFlagStateUntilTimeout>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d02d      	beq.n	8005c10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	f043 0220 	orr.w	r2, r3, #32
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e026      	b.n	8005c12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2101      	movs	r1, #1
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff ff36 	bl	8005a40 <SPI_WaitFlagStateUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01a      	beq.n	8005c10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e013      	b.n	8005c12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff ff23 	bl	8005a40 <SPI_WaitFlagStateUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e000      	b.n	8005c12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <SPI_EndRxTxTransaction+0x7c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <SPI_EndRxTxTransaction+0x80>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	0d5b      	lsrs	r3, r3, #21
 8005c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c46:	d112      	bne.n	8005c6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2180      	movs	r1, #128	; 0x80
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff fef4 	bl	8005a40 <SPI_WaitFlagStateUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d016      	beq.n	8005c8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	f043 0220 	orr.w	r2, r3, #32
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e00f      	b.n	8005c8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c84:	2b80      	cmp	r3, #128	; 0x80
 8005c86:	d0f2      	beq.n	8005c6e <SPI_EndRxTxTransaction+0x52>
 8005c88:	e000      	b.n	8005c8c <SPI_EndRxTxTransaction+0x70>
        break;
 8005c8a:	bf00      	nop
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000000 	.word	0x20000000
 8005c9c:	165e9f81 	.word	0x165e9f81

08005ca0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d123      	bne.n	8005cfa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	6851      	ldr	r1, [r2, #4]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	6892      	ldr	r2, [r2, #8]
 8005cc6:	4311      	orrs	r1, r2
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	68d2      	ldr	r2, [r2, #12]
 8005ccc:	4311      	orrs	r1, r2
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	6912      	ldr	r2, [r2, #16]
 8005cd2:	4311      	orrs	r1, r2
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	6952      	ldr	r2, [r2, #20]
 8005cd8:	4311      	orrs	r1, r2
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	6992      	ldr	r2, [r2, #24]
 8005cde:	4311      	orrs	r1, r2
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	69d2      	ldr	r2, [r2, #28]
 8005ce4:	4311      	orrs	r1, r2
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	6a12      	ldr	r2, [r2, #32]
 8005cea:	4311      	orrs	r1, r2
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	e028      	b.n	8005d4c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	69d9      	ldr	r1, [r3, #28]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	4319      	orrs	r1, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	430b      	orrs	r3, r1
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	6851      	ldr	r1, [r2, #4]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	6892      	ldr	r2, [r2, #8]
 8005d2c:	4311      	orrs	r1, r2
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	68d2      	ldr	r2, [r2, #12]
 8005d32:	4311      	orrs	r1, r2
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	6912      	ldr	r2, [r2, #16]
 8005d38:	4311      	orrs	r1, r2
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	6952      	ldr	r2, [r2, #20]
 8005d3e:	4311      	orrs	r1, r2
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	6992      	ldr	r2, [r2, #24]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d128      	bne.n	8005dbe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1e59      	subs	r1, r3, #1
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	4319      	orrs	r1, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	4319      	orrs	r1, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	031b      	lsls	r3, r3, #12
 8005d96:	4319      	orrs	r1, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	4319      	orrs	r1, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	051b      	lsls	r3, r3, #20
 8005daa:	4319      	orrs	r1, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	061b      	lsls	r3, r3, #24
 8005db4:	430b      	orrs	r3, r1
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	e02f      	b.n	8005e1e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	68d2      	ldr	r2, [r2, #12]
 8005dce:	3a01      	subs	r2, #1
 8005dd0:	0311      	lsls	r1, r2, #12
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	6952      	ldr	r2, [r2, #20]
 8005dd6:	3a01      	subs	r2, #1
 8005dd8:	0512      	lsls	r2, r2, #20
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1e59      	subs	r1, r3, #1
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	4319      	orrs	r1, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	021b      	lsls	r3, r3, #8
 8005e02:	4319      	orrs	r1, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	041b      	lsls	r3, r3, #16
 8005e0c:	4319      	orrs	r1, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	430b      	orrs	r3, r1
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	0d9b      	lsrs	r3, r3, #22
 8005e42:	059b      	lsls	r3, r3, #22
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	6811      	ldr	r1, [r2, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	6852      	ldr	r2, [r2, #4]
 8005e4c:	4311      	orrs	r1, r2
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	6892      	ldr	r2, [r2, #8]
 8005e52:	3a01      	subs	r2, #1
 8005e54:	0152      	lsls	r2, r2, #5
 8005e56:	4311      	orrs	r1, r2
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	68d2      	ldr	r2, [r2, #12]
 8005e5c:	0252      	lsls	r2, r2, #9
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	431a      	orrs	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8005e66:	f7fc ffe3 	bl	8002e30 <HAL_GetTick>
 8005e6a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005e6c:	e010      	b.n	8005e90 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d00c      	beq.n	8005e90 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <FMC_SDRAM_SendCommand+0x60>
 8005e7c:	f7fc ffd8 	bl	8002e30 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d201      	bcs.n	8005e90 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e006      	b.n	8005e9e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d0e8      	beq.n	8005e6e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005eb8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	0052      	lsls	r2, r2, #1
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <__errno>:
 8005ed4:	4b01      	ldr	r3, [pc, #4]	; (8005edc <__errno+0x8>)
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	20000088 	.word	0x20000088

08005ee0 <__libc_init_array>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4d0d      	ldr	r5, [pc, #52]	; (8005f18 <__libc_init_array+0x38>)
 8005ee4:	4c0d      	ldr	r4, [pc, #52]	; (8005f1c <__libc_init_array+0x3c>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	2600      	movs	r6, #0
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	d109      	bne.n	8005f04 <__libc_init_array+0x24>
 8005ef0:	4d0b      	ldr	r5, [pc, #44]	; (8005f20 <__libc_init_array+0x40>)
 8005ef2:	4c0c      	ldr	r4, [pc, #48]	; (8005f24 <__libc_init_array+0x44>)
 8005ef4:	f002 ff04 	bl	8008d00 <_init>
 8005ef8:	1b64      	subs	r4, r4, r5
 8005efa:	10a4      	asrs	r4, r4, #2
 8005efc:	2600      	movs	r6, #0
 8005efe:	42a6      	cmp	r6, r4
 8005f00:	d105      	bne.n	8005f0e <__libc_init_array+0x2e>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f08:	4798      	blx	r3
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7ee      	b.n	8005eec <__libc_init_array+0xc>
 8005f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f12:	4798      	blx	r3
 8005f14:	3601      	adds	r6, #1
 8005f16:	e7f2      	b.n	8005efe <__libc_init_array+0x1e>
 8005f18:	0800abe4 	.word	0x0800abe4
 8005f1c:	0800abe4 	.word	0x0800abe4
 8005f20:	0800abe4 	.word	0x0800abe4
 8005f24:	0800abe8 	.word	0x0800abe8

08005f28 <memset>:
 8005f28:	4402      	add	r2, r0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d100      	bne.n	8005f32 <memset+0xa>
 8005f30:	4770      	bx	lr
 8005f32:	f803 1b01 	strb.w	r1, [r3], #1
 8005f36:	e7f9      	b.n	8005f2c <memset+0x4>

08005f38 <__cvt>:
 8005f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	ec55 4b10 	vmov	r4, r5, d0
 8005f40:	2d00      	cmp	r5, #0
 8005f42:	460e      	mov	r6, r1
 8005f44:	4619      	mov	r1, r3
 8005f46:	462b      	mov	r3, r5
 8005f48:	bfbb      	ittet	lt
 8005f4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f4e:	461d      	movlt	r5, r3
 8005f50:	2300      	movge	r3, #0
 8005f52:	232d      	movlt	r3, #45	; 0x2d
 8005f54:	700b      	strb	r3, [r1, #0]
 8005f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f5c:	4691      	mov	r9, r2
 8005f5e:	f023 0820 	bic.w	r8, r3, #32
 8005f62:	bfbc      	itt	lt
 8005f64:	4622      	movlt	r2, r4
 8005f66:	4614      	movlt	r4, r2
 8005f68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f6c:	d005      	beq.n	8005f7a <__cvt+0x42>
 8005f6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f72:	d100      	bne.n	8005f76 <__cvt+0x3e>
 8005f74:	3601      	adds	r6, #1
 8005f76:	2102      	movs	r1, #2
 8005f78:	e000      	b.n	8005f7c <__cvt+0x44>
 8005f7a:	2103      	movs	r1, #3
 8005f7c:	ab03      	add	r3, sp, #12
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	ab02      	add	r3, sp, #8
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	ec45 4b10 	vmov	d0, r4, r5
 8005f88:	4653      	mov	r3, sl
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	f000 fcec 	bl	8006968 <_dtoa_r>
 8005f90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f94:	4607      	mov	r7, r0
 8005f96:	d102      	bne.n	8005f9e <__cvt+0x66>
 8005f98:	f019 0f01 	tst.w	r9, #1
 8005f9c:	d022      	beq.n	8005fe4 <__cvt+0xac>
 8005f9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fa2:	eb07 0906 	add.w	r9, r7, r6
 8005fa6:	d110      	bne.n	8005fca <__cvt+0x92>
 8005fa8:	783b      	ldrb	r3, [r7, #0]
 8005faa:	2b30      	cmp	r3, #48	; 0x30
 8005fac:	d10a      	bne.n	8005fc4 <__cvt+0x8c>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	f7fa fd97 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fba:	b918      	cbnz	r0, 8005fc4 <__cvt+0x8c>
 8005fbc:	f1c6 0601 	rsb	r6, r6, #1
 8005fc0:	f8ca 6000 	str.w	r6, [sl]
 8005fc4:	f8da 3000 	ldr.w	r3, [sl]
 8005fc8:	4499      	add	r9, r3
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7fa fd89 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fd6:	b108      	cbz	r0, 8005fdc <__cvt+0xa4>
 8005fd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fdc:	2230      	movs	r2, #48	; 0x30
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	454b      	cmp	r3, r9
 8005fe2:	d307      	bcc.n	8005ff4 <__cvt+0xbc>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fe8:	1bdb      	subs	r3, r3, r7
 8005fea:	4638      	mov	r0, r7
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	b004      	add	sp, #16
 8005ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff4:	1c59      	adds	r1, r3, #1
 8005ff6:	9103      	str	r1, [sp, #12]
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	e7f0      	b.n	8005fde <__cvt+0xa6>

08005ffc <__exponent>:
 8005ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ffe:	4603      	mov	r3, r0
 8006000:	2900      	cmp	r1, #0
 8006002:	bfb8      	it	lt
 8006004:	4249      	neglt	r1, r1
 8006006:	f803 2b02 	strb.w	r2, [r3], #2
 800600a:	bfb4      	ite	lt
 800600c:	222d      	movlt	r2, #45	; 0x2d
 800600e:	222b      	movge	r2, #43	; 0x2b
 8006010:	2909      	cmp	r1, #9
 8006012:	7042      	strb	r2, [r0, #1]
 8006014:	dd2a      	ble.n	800606c <__exponent+0x70>
 8006016:	f10d 0407 	add.w	r4, sp, #7
 800601a:	46a4      	mov	ip, r4
 800601c:	270a      	movs	r7, #10
 800601e:	46a6      	mov	lr, r4
 8006020:	460a      	mov	r2, r1
 8006022:	fb91 f6f7 	sdiv	r6, r1, r7
 8006026:	fb07 1516 	mls	r5, r7, r6, r1
 800602a:	3530      	adds	r5, #48	; 0x30
 800602c:	2a63      	cmp	r2, #99	; 0x63
 800602e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006032:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006036:	4631      	mov	r1, r6
 8006038:	dcf1      	bgt.n	800601e <__exponent+0x22>
 800603a:	3130      	adds	r1, #48	; 0x30
 800603c:	f1ae 0502 	sub.w	r5, lr, #2
 8006040:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006044:	1c44      	adds	r4, r0, #1
 8006046:	4629      	mov	r1, r5
 8006048:	4561      	cmp	r1, ip
 800604a:	d30a      	bcc.n	8006062 <__exponent+0x66>
 800604c:	f10d 0209 	add.w	r2, sp, #9
 8006050:	eba2 020e 	sub.w	r2, r2, lr
 8006054:	4565      	cmp	r5, ip
 8006056:	bf88      	it	hi
 8006058:	2200      	movhi	r2, #0
 800605a:	4413      	add	r3, r2
 800605c:	1a18      	subs	r0, r3, r0
 800605e:	b003      	add	sp, #12
 8006060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006066:	f804 2f01 	strb.w	r2, [r4, #1]!
 800606a:	e7ed      	b.n	8006048 <__exponent+0x4c>
 800606c:	2330      	movs	r3, #48	; 0x30
 800606e:	3130      	adds	r1, #48	; 0x30
 8006070:	7083      	strb	r3, [r0, #2]
 8006072:	70c1      	strb	r1, [r0, #3]
 8006074:	1d03      	adds	r3, r0, #4
 8006076:	e7f1      	b.n	800605c <__exponent+0x60>

08006078 <_printf_float>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	ed2d 8b02 	vpush	{d8}
 8006080:	b08d      	sub	sp, #52	; 0x34
 8006082:	460c      	mov	r4, r1
 8006084:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006088:	4616      	mov	r6, r2
 800608a:	461f      	mov	r7, r3
 800608c:	4605      	mov	r5, r0
 800608e:	f001 fa59 	bl	8007544 <_localeconv_r>
 8006092:	f8d0 a000 	ldr.w	sl, [r0]
 8006096:	4650      	mov	r0, sl
 8006098:	f7fa f8aa 	bl	80001f0 <strlen>
 800609c:	2300      	movs	r3, #0
 800609e:	930a      	str	r3, [sp, #40]	; 0x28
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	9305      	str	r3, [sp, #20]
 80060a4:	f8d8 3000 	ldr.w	r3, [r8]
 80060a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060ac:	3307      	adds	r3, #7
 80060ae:	f023 0307 	bic.w	r3, r3, #7
 80060b2:	f103 0208 	add.w	r2, r3, #8
 80060b6:	f8c8 2000 	str.w	r2, [r8]
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80060c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060ca:	9307      	str	r3, [sp, #28]
 80060cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80060d0:	ee08 0a10 	vmov	s16, r0
 80060d4:	4b9f      	ldr	r3, [pc, #636]	; (8006354 <_printf_float+0x2dc>)
 80060d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	f7fa fd35 	bl	8000b4c <__aeabi_dcmpun>
 80060e2:	bb88      	cbnz	r0, 8006148 <_printf_float+0xd0>
 80060e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060e8:	4b9a      	ldr	r3, [pc, #616]	; (8006354 <_printf_float+0x2dc>)
 80060ea:	f04f 32ff 	mov.w	r2, #4294967295
 80060ee:	f7fa fd0f 	bl	8000b10 <__aeabi_dcmple>
 80060f2:	bb48      	cbnz	r0, 8006148 <_printf_float+0xd0>
 80060f4:	2200      	movs	r2, #0
 80060f6:	2300      	movs	r3, #0
 80060f8:	4640      	mov	r0, r8
 80060fa:	4649      	mov	r1, r9
 80060fc:	f7fa fcfe 	bl	8000afc <__aeabi_dcmplt>
 8006100:	b110      	cbz	r0, 8006108 <_printf_float+0x90>
 8006102:	232d      	movs	r3, #45	; 0x2d
 8006104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006108:	4b93      	ldr	r3, [pc, #588]	; (8006358 <_printf_float+0x2e0>)
 800610a:	4894      	ldr	r0, [pc, #592]	; (800635c <_printf_float+0x2e4>)
 800610c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006110:	bf94      	ite	ls
 8006112:	4698      	movls	r8, r3
 8006114:	4680      	movhi	r8, r0
 8006116:	2303      	movs	r3, #3
 8006118:	6123      	str	r3, [r4, #16]
 800611a:	9b05      	ldr	r3, [sp, #20]
 800611c:	f023 0204 	bic.w	r2, r3, #4
 8006120:	6022      	str	r2, [r4, #0]
 8006122:	f04f 0900 	mov.w	r9, #0
 8006126:	9700      	str	r7, [sp, #0]
 8006128:	4633      	mov	r3, r6
 800612a:	aa0b      	add	r2, sp, #44	; 0x2c
 800612c:	4621      	mov	r1, r4
 800612e:	4628      	mov	r0, r5
 8006130:	f000 f9d8 	bl	80064e4 <_printf_common>
 8006134:	3001      	adds	r0, #1
 8006136:	f040 8090 	bne.w	800625a <_printf_float+0x1e2>
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
 800613e:	b00d      	add	sp, #52	; 0x34
 8006140:	ecbd 8b02 	vpop	{d8}
 8006144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006148:	4642      	mov	r2, r8
 800614a:	464b      	mov	r3, r9
 800614c:	4640      	mov	r0, r8
 800614e:	4649      	mov	r1, r9
 8006150:	f7fa fcfc 	bl	8000b4c <__aeabi_dcmpun>
 8006154:	b140      	cbz	r0, 8006168 <_printf_float+0xf0>
 8006156:	464b      	mov	r3, r9
 8006158:	2b00      	cmp	r3, #0
 800615a:	bfbc      	itt	lt
 800615c:	232d      	movlt	r3, #45	; 0x2d
 800615e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006162:	487f      	ldr	r0, [pc, #508]	; (8006360 <_printf_float+0x2e8>)
 8006164:	4b7f      	ldr	r3, [pc, #508]	; (8006364 <_printf_float+0x2ec>)
 8006166:	e7d1      	b.n	800610c <_printf_float+0x94>
 8006168:	6863      	ldr	r3, [r4, #4]
 800616a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800616e:	9206      	str	r2, [sp, #24]
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	d13f      	bne.n	80061f4 <_printf_float+0x17c>
 8006174:	2306      	movs	r3, #6
 8006176:	6063      	str	r3, [r4, #4]
 8006178:	9b05      	ldr	r3, [sp, #20]
 800617a:	6861      	ldr	r1, [r4, #4]
 800617c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006180:	2300      	movs	r3, #0
 8006182:	9303      	str	r3, [sp, #12]
 8006184:	ab0a      	add	r3, sp, #40	; 0x28
 8006186:	e9cd b301 	strd	fp, r3, [sp, #4]
 800618a:	ab09      	add	r3, sp, #36	; 0x24
 800618c:	ec49 8b10 	vmov	d0, r8, r9
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	6022      	str	r2, [r4, #0]
 8006194:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006198:	4628      	mov	r0, r5
 800619a:	f7ff fecd 	bl	8005f38 <__cvt>
 800619e:	9b06      	ldr	r3, [sp, #24]
 80061a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061a2:	2b47      	cmp	r3, #71	; 0x47
 80061a4:	4680      	mov	r8, r0
 80061a6:	d108      	bne.n	80061ba <_printf_float+0x142>
 80061a8:	1cc8      	adds	r0, r1, #3
 80061aa:	db02      	blt.n	80061b2 <_printf_float+0x13a>
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	4299      	cmp	r1, r3
 80061b0:	dd41      	ble.n	8006236 <_printf_float+0x1be>
 80061b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80061b6:	fa5f fb8b 	uxtb.w	fp, fp
 80061ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061be:	d820      	bhi.n	8006202 <_printf_float+0x18a>
 80061c0:	3901      	subs	r1, #1
 80061c2:	465a      	mov	r2, fp
 80061c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061c8:	9109      	str	r1, [sp, #36]	; 0x24
 80061ca:	f7ff ff17 	bl	8005ffc <__exponent>
 80061ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061d0:	1813      	adds	r3, r2, r0
 80061d2:	2a01      	cmp	r2, #1
 80061d4:	4681      	mov	r9, r0
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	dc02      	bgt.n	80061e0 <_printf_float+0x168>
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	07d2      	lsls	r2, r2, #31
 80061de:	d501      	bpl.n	80061e4 <_printf_float+0x16c>
 80061e0:	3301      	adds	r3, #1
 80061e2:	6123      	str	r3, [r4, #16]
 80061e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d09c      	beq.n	8006126 <_printf_float+0xae>
 80061ec:	232d      	movs	r3, #45	; 0x2d
 80061ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f2:	e798      	b.n	8006126 <_printf_float+0xae>
 80061f4:	9a06      	ldr	r2, [sp, #24]
 80061f6:	2a47      	cmp	r2, #71	; 0x47
 80061f8:	d1be      	bne.n	8006178 <_printf_float+0x100>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1bc      	bne.n	8006178 <_printf_float+0x100>
 80061fe:	2301      	movs	r3, #1
 8006200:	e7b9      	b.n	8006176 <_printf_float+0xfe>
 8006202:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006206:	d118      	bne.n	800623a <_printf_float+0x1c2>
 8006208:	2900      	cmp	r1, #0
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	dd0b      	ble.n	8006226 <_printf_float+0x1ae>
 800620e:	6121      	str	r1, [r4, #16]
 8006210:	b913      	cbnz	r3, 8006218 <_printf_float+0x1a0>
 8006212:	6822      	ldr	r2, [r4, #0]
 8006214:	07d0      	lsls	r0, r2, #31
 8006216:	d502      	bpl.n	800621e <_printf_float+0x1a6>
 8006218:	3301      	adds	r3, #1
 800621a:	440b      	add	r3, r1
 800621c:	6123      	str	r3, [r4, #16]
 800621e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006220:	f04f 0900 	mov.w	r9, #0
 8006224:	e7de      	b.n	80061e4 <_printf_float+0x16c>
 8006226:	b913      	cbnz	r3, 800622e <_printf_float+0x1b6>
 8006228:	6822      	ldr	r2, [r4, #0]
 800622a:	07d2      	lsls	r2, r2, #31
 800622c:	d501      	bpl.n	8006232 <_printf_float+0x1ba>
 800622e:	3302      	adds	r3, #2
 8006230:	e7f4      	b.n	800621c <_printf_float+0x1a4>
 8006232:	2301      	movs	r3, #1
 8006234:	e7f2      	b.n	800621c <_printf_float+0x1a4>
 8006236:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800623a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623c:	4299      	cmp	r1, r3
 800623e:	db05      	blt.n	800624c <_printf_float+0x1d4>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	6121      	str	r1, [r4, #16]
 8006244:	07d8      	lsls	r0, r3, #31
 8006246:	d5ea      	bpl.n	800621e <_printf_float+0x1a6>
 8006248:	1c4b      	adds	r3, r1, #1
 800624a:	e7e7      	b.n	800621c <_printf_float+0x1a4>
 800624c:	2900      	cmp	r1, #0
 800624e:	bfd4      	ite	le
 8006250:	f1c1 0202 	rsble	r2, r1, #2
 8006254:	2201      	movgt	r2, #1
 8006256:	4413      	add	r3, r2
 8006258:	e7e0      	b.n	800621c <_printf_float+0x1a4>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	055a      	lsls	r2, r3, #21
 800625e:	d407      	bmi.n	8006270 <_printf_float+0x1f8>
 8006260:	6923      	ldr	r3, [r4, #16]
 8006262:	4642      	mov	r2, r8
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	d12c      	bne.n	80062c8 <_printf_float+0x250>
 800626e:	e764      	b.n	800613a <_printf_float+0xc2>
 8006270:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006274:	f240 80e0 	bls.w	8006438 <_printf_float+0x3c0>
 8006278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800627c:	2200      	movs	r2, #0
 800627e:	2300      	movs	r3, #0
 8006280:	f7fa fc32 	bl	8000ae8 <__aeabi_dcmpeq>
 8006284:	2800      	cmp	r0, #0
 8006286:	d034      	beq.n	80062f2 <_printf_float+0x27a>
 8006288:	4a37      	ldr	r2, [pc, #220]	; (8006368 <_printf_float+0x2f0>)
 800628a:	2301      	movs	r3, #1
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	f43f af51 	beq.w	800613a <_printf_float+0xc2>
 8006298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800629c:	429a      	cmp	r2, r3
 800629e:	db02      	blt.n	80062a6 <_printf_float+0x22e>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07d8      	lsls	r0, r3, #31
 80062a4:	d510      	bpl.n	80062c8 <_printf_float+0x250>
 80062a6:	ee18 3a10 	vmov	r3, s16
 80062aa:	4652      	mov	r2, sl
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	47b8      	blx	r7
 80062b2:	3001      	adds	r0, #1
 80062b4:	f43f af41 	beq.w	800613a <_printf_float+0xc2>
 80062b8:	f04f 0800 	mov.w	r8, #0
 80062bc:	f104 091a 	add.w	r9, r4, #26
 80062c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c2:	3b01      	subs	r3, #1
 80062c4:	4543      	cmp	r3, r8
 80062c6:	dc09      	bgt.n	80062dc <_printf_float+0x264>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	079b      	lsls	r3, r3, #30
 80062cc:	f100 8105 	bmi.w	80064da <_printf_float+0x462>
 80062d0:	68e0      	ldr	r0, [r4, #12]
 80062d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d4:	4298      	cmp	r0, r3
 80062d6:	bfb8      	it	lt
 80062d8:	4618      	movlt	r0, r3
 80062da:	e730      	b.n	800613e <_printf_float+0xc6>
 80062dc:	2301      	movs	r3, #1
 80062de:	464a      	mov	r2, r9
 80062e0:	4631      	mov	r1, r6
 80062e2:	4628      	mov	r0, r5
 80062e4:	47b8      	blx	r7
 80062e6:	3001      	adds	r0, #1
 80062e8:	f43f af27 	beq.w	800613a <_printf_float+0xc2>
 80062ec:	f108 0801 	add.w	r8, r8, #1
 80062f0:	e7e6      	b.n	80062c0 <_printf_float+0x248>
 80062f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	dc39      	bgt.n	800636c <_printf_float+0x2f4>
 80062f8:	4a1b      	ldr	r2, [pc, #108]	; (8006368 <_printf_float+0x2f0>)
 80062fa:	2301      	movs	r3, #1
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	f43f af19 	beq.w	800613a <_printf_float+0xc2>
 8006308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800630c:	4313      	orrs	r3, r2
 800630e:	d102      	bne.n	8006316 <_printf_float+0x29e>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	07d9      	lsls	r1, r3, #31
 8006314:	d5d8      	bpl.n	80062c8 <_printf_float+0x250>
 8006316:	ee18 3a10 	vmov	r3, s16
 800631a:	4652      	mov	r2, sl
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f af09 	beq.w	800613a <_printf_float+0xc2>
 8006328:	f04f 0900 	mov.w	r9, #0
 800632c:	f104 0a1a 	add.w	sl, r4, #26
 8006330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006332:	425b      	negs	r3, r3
 8006334:	454b      	cmp	r3, r9
 8006336:	dc01      	bgt.n	800633c <_printf_float+0x2c4>
 8006338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633a:	e792      	b.n	8006262 <_printf_float+0x1ea>
 800633c:	2301      	movs	r3, #1
 800633e:	4652      	mov	r2, sl
 8006340:	4631      	mov	r1, r6
 8006342:	4628      	mov	r0, r5
 8006344:	47b8      	blx	r7
 8006346:	3001      	adds	r0, #1
 8006348:	f43f aef7 	beq.w	800613a <_printf_float+0xc2>
 800634c:	f109 0901 	add.w	r9, r9, #1
 8006350:	e7ee      	b.n	8006330 <_printf_float+0x2b8>
 8006352:	bf00      	nop
 8006354:	7fefffff 	.word	0x7fefffff
 8006358:	0800a804 	.word	0x0800a804
 800635c:	0800a808 	.word	0x0800a808
 8006360:	0800a810 	.word	0x0800a810
 8006364:	0800a80c 	.word	0x0800a80c
 8006368:	0800a814 	.word	0x0800a814
 800636c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800636e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006370:	429a      	cmp	r2, r3
 8006372:	bfa8      	it	ge
 8006374:	461a      	movge	r2, r3
 8006376:	2a00      	cmp	r2, #0
 8006378:	4691      	mov	r9, r2
 800637a:	dc37      	bgt.n	80063ec <_printf_float+0x374>
 800637c:	f04f 0b00 	mov.w	fp, #0
 8006380:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006384:	f104 021a 	add.w	r2, r4, #26
 8006388:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800638a:	9305      	str	r3, [sp, #20]
 800638c:	eba3 0309 	sub.w	r3, r3, r9
 8006390:	455b      	cmp	r3, fp
 8006392:	dc33      	bgt.n	80063fc <_printf_float+0x384>
 8006394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006398:	429a      	cmp	r2, r3
 800639a:	db3b      	blt.n	8006414 <_printf_float+0x39c>
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	07da      	lsls	r2, r3, #31
 80063a0:	d438      	bmi.n	8006414 <_printf_float+0x39c>
 80063a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a4:	9a05      	ldr	r2, [sp, #20]
 80063a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063a8:	1a9a      	subs	r2, r3, r2
 80063aa:	eba3 0901 	sub.w	r9, r3, r1
 80063ae:	4591      	cmp	r9, r2
 80063b0:	bfa8      	it	ge
 80063b2:	4691      	movge	r9, r2
 80063b4:	f1b9 0f00 	cmp.w	r9, #0
 80063b8:	dc35      	bgt.n	8006426 <_printf_float+0x3ae>
 80063ba:	f04f 0800 	mov.w	r8, #0
 80063be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063c2:	f104 0a1a 	add.w	sl, r4, #26
 80063c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	eba3 0309 	sub.w	r3, r3, r9
 80063d0:	4543      	cmp	r3, r8
 80063d2:	f77f af79 	ble.w	80062c8 <_printf_float+0x250>
 80063d6:	2301      	movs	r3, #1
 80063d8:	4652      	mov	r2, sl
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	47b8      	blx	r7
 80063e0:	3001      	adds	r0, #1
 80063e2:	f43f aeaa 	beq.w	800613a <_printf_float+0xc2>
 80063e6:	f108 0801 	add.w	r8, r8, #1
 80063ea:	e7ec      	b.n	80063c6 <_printf_float+0x34e>
 80063ec:	4613      	mov	r3, r2
 80063ee:	4631      	mov	r1, r6
 80063f0:	4642      	mov	r2, r8
 80063f2:	4628      	mov	r0, r5
 80063f4:	47b8      	blx	r7
 80063f6:	3001      	adds	r0, #1
 80063f8:	d1c0      	bne.n	800637c <_printf_float+0x304>
 80063fa:	e69e      	b.n	800613a <_printf_float+0xc2>
 80063fc:	2301      	movs	r3, #1
 80063fe:	4631      	mov	r1, r6
 8006400:	4628      	mov	r0, r5
 8006402:	9205      	str	r2, [sp, #20]
 8006404:	47b8      	blx	r7
 8006406:	3001      	adds	r0, #1
 8006408:	f43f ae97 	beq.w	800613a <_printf_float+0xc2>
 800640c:	9a05      	ldr	r2, [sp, #20]
 800640e:	f10b 0b01 	add.w	fp, fp, #1
 8006412:	e7b9      	b.n	8006388 <_printf_float+0x310>
 8006414:	ee18 3a10 	vmov	r3, s16
 8006418:	4652      	mov	r2, sl
 800641a:	4631      	mov	r1, r6
 800641c:	4628      	mov	r0, r5
 800641e:	47b8      	blx	r7
 8006420:	3001      	adds	r0, #1
 8006422:	d1be      	bne.n	80063a2 <_printf_float+0x32a>
 8006424:	e689      	b.n	800613a <_printf_float+0xc2>
 8006426:	9a05      	ldr	r2, [sp, #20]
 8006428:	464b      	mov	r3, r9
 800642a:	4442      	add	r2, r8
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	47b8      	blx	r7
 8006432:	3001      	adds	r0, #1
 8006434:	d1c1      	bne.n	80063ba <_printf_float+0x342>
 8006436:	e680      	b.n	800613a <_printf_float+0xc2>
 8006438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800643a:	2a01      	cmp	r2, #1
 800643c:	dc01      	bgt.n	8006442 <_printf_float+0x3ca>
 800643e:	07db      	lsls	r3, r3, #31
 8006440:	d538      	bpl.n	80064b4 <_printf_float+0x43c>
 8006442:	2301      	movs	r3, #1
 8006444:	4642      	mov	r2, r8
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	f43f ae74 	beq.w	800613a <_printf_float+0xc2>
 8006452:	ee18 3a10 	vmov	r3, s16
 8006456:	4652      	mov	r2, sl
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	f43f ae6b 	beq.w	800613a <_printf_float+0xc2>
 8006464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006468:	2200      	movs	r2, #0
 800646a:	2300      	movs	r3, #0
 800646c:	f7fa fb3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006470:	b9d8      	cbnz	r0, 80064aa <_printf_float+0x432>
 8006472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006474:	f108 0201 	add.w	r2, r8, #1
 8006478:	3b01      	subs	r3, #1
 800647a:	4631      	mov	r1, r6
 800647c:	4628      	mov	r0, r5
 800647e:	47b8      	blx	r7
 8006480:	3001      	adds	r0, #1
 8006482:	d10e      	bne.n	80064a2 <_printf_float+0x42a>
 8006484:	e659      	b.n	800613a <_printf_float+0xc2>
 8006486:	2301      	movs	r3, #1
 8006488:	4652      	mov	r2, sl
 800648a:	4631      	mov	r1, r6
 800648c:	4628      	mov	r0, r5
 800648e:	47b8      	blx	r7
 8006490:	3001      	adds	r0, #1
 8006492:	f43f ae52 	beq.w	800613a <_printf_float+0xc2>
 8006496:	f108 0801 	add.w	r8, r8, #1
 800649a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	4543      	cmp	r3, r8
 80064a0:	dcf1      	bgt.n	8006486 <_printf_float+0x40e>
 80064a2:	464b      	mov	r3, r9
 80064a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064a8:	e6dc      	b.n	8006264 <_printf_float+0x1ec>
 80064aa:	f04f 0800 	mov.w	r8, #0
 80064ae:	f104 0a1a 	add.w	sl, r4, #26
 80064b2:	e7f2      	b.n	800649a <_printf_float+0x422>
 80064b4:	2301      	movs	r3, #1
 80064b6:	4642      	mov	r2, r8
 80064b8:	e7df      	b.n	800647a <_printf_float+0x402>
 80064ba:	2301      	movs	r3, #1
 80064bc:	464a      	mov	r2, r9
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	f43f ae38 	beq.w	800613a <_printf_float+0xc2>
 80064ca:	f108 0801 	add.w	r8, r8, #1
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064d2:	1a5b      	subs	r3, r3, r1
 80064d4:	4543      	cmp	r3, r8
 80064d6:	dcf0      	bgt.n	80064ba <_printf_float+0x442>
 80064d8:	e6fa      	b.n	80062d0 <_printf_float+0x258>
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	f104 0919 	add.w	r9, r4, #25
 80064e2:	e7f4      	b.n	80064ce <_printf_float+0x456>

080064e4 <_printf_common>:
 80064e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e8:	4616      	mov	r6, r2
 80064ea:	4699      	mov	r9, r3
 80064ec:	688a      	ldr	r2, [r1, #8]
 80064ee:	690b      	ldr	r3, [r1, #16]
 80064f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064f4:	4293      	cmp	r3, r2
 80064f6:	bfb8      	it	lt
 80064f8:	4613      	movlt	r3, r2
 80064fa:	6033      	str	r3, [r6, #0]
 80064fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006500:	4607      	mov	r7, r0
 8006502:	460c      	mov	r4, r1
 8006504:	b10a      	cbz	r2, 800650a <_printf_common+0x26>
 8006506:	3301      	adds	r3, #1
 8006508:	6033      	str	r3, [r6, #0]
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	0699      	lsls	r1, r3, #26
 800650e:	bf42      	ittt	mi
 8006510:	6833      	ldrmi	r3, [r6, #0]
 8006512:	3302      	addmi	r3, #2
 8006514:	6033      	strmi	r3, [r6, #0]
 8006516:	6825      	ldr	r5, [r4, #0]
 8006518:	f015 0506 	ands.w	r5, r5, #6
 800651c:	d106      	bne.n	800652c <_printf_common+0x48>
 800651e:	f104 0a19 	add.w	sl, r4, #25
 8006522:	68e3      	ldr	r3, [r4, #12]
 8006524:	6832      	ldr	r2, [r6, #0]
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	42ab      	cmp	r3, r5
 800652a:	dc26      	bgt.n	800657a <_printf_common+0x96>
 800652c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006530:	1e13      	subs	r3, r2, #0
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	bf18      	it	ne
 8006536:	2301      	movne	r3, #1
 8006538:	0692      	lsls	r2, r2, #26
 800653a:	d42b      	bmi.n	8006594 <_printf_common+0xb0>
 800653c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006540:	4649      	mov	r1, r9
 8006542:	4638      	mov	r0, r7
 8006544:	47c0      	blx	r8
 8006546:	3001      	adds	r0, #1
 8006548:	d01e      	beq.n	8006588 <_printf_common+0xa4>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	68e5      	ldr	r5, [r4, #12]
 800654e:	6832      	ldr	r2, [r6, #0]
 8006550:	f003 0306 	and.w	r3, r3, #6
 8006554:	2b04      	cmp	r3, #4
 8006556:	bf08      	it	eq
 8006558:	1aad      	subeq	r5, r5, r2
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	6922      	ldr	r2, [r4, #16]
 800655e:	bf0c      	ite	eq
 8006560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006564:	2500      	movne	r5, #0
 8006566:	4293      	cmp	r3, r2
 8006568:	bfc4      	itt	gt
 800656a:	1a9b      	subgt	r3, r3, r2
 800656c:	18ed      	addgt	r5, r5, r3
 800656e:	2600      	movs	r6, #0
 8006570:	341a      	adds	r4, #26
 8006572:	42b5      	cmp	r5, r6
 8006574:	d11a      	bne.n	80065ac <_printf_common+0xc8>
 8006576:	2000      	movs	r0, #0
 8006578:	e008      	b.n	800658c <_printf_common+0xa8>
 800657a:	2301      	movs	r3, #1
 800657c:	4652      	mov	r2, sl
 800657e:	4649      	mov	r1, r9
 8006580:	4638      	mov	r0, r7
 8006582:	47c0      	blx	r8
 8006584:	3001      	adds	r0, #1
 8006586:	d103      	bne.n	8006590 <_printf_common+0xac>
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006590:	3501      	adds	r5, #1
 8006592:	e7c6      	b.n	8006522 <_printf_common+0x3e>
 8006594:	18e1      	adds	r1, r4, r3
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	2030      	movs	r0, #48	; 0x30
 800659a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800659e:	4422      	add	r2, r4
 80065a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065a8:	3302      	adds	r3, #2
 80065aa:	e7c7      	b.n	800653c <_printf_common+0x58>
 80065ac:	2301      	movs	r3, #1
 80065ae:	4622      	mov	r2, r4
 80065b0:	4649      	mov	r1, r9
 80065b2:	4638      	mov	r0, r7
 80065b4:	47c0      	blx	r8
 80065b6:	3001      	adds	r0, #1
 80065b8:	d0e6      	beq.n	8006588 <_printf_common+0xa4>
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7d9      	b.n	8006572 <_printf_common+0x8e>
	...

080065c0 <_printf_i>:
 80065c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c4:	7e0f      	ldrb	r7, [r1, #24]
 80065c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065c8:	2f78      	cmp	r7, #120	; 0x78
 80065ca:	4691      	mov	r9, r2
 80065cc:	4680      	mov	r8, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	469a      	mov	sl, r3
 80065d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065d6:	d807      	bhi.n	80065e8 <_printf_i+0x28>
 80065d8:	2f62      	cmp	r7, #98	; 0x62
 80065da:	d80a      	bhi.n	80065f2 <_printf_i+0x32>
 80065dc:	2f00      	cmp	r7, #0
 80065de:	f000 80d8 	beq.w	8006792 <_printf_i+0x1d2>
 80065e2:	2f58      	cmp	r7, #88	; 0x58
 80065e4:	f000 80a3 	beq.w	800672e <_printf_i+0x16e>
 80065e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065f0:	e03a      	b.n	8006668 <_printf_i+0xa8>
 80065f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065f6:	2b15      	cmp	r3, #21
 80065f8:	d8f6      	bhi.n	80065e8 <_printf_i+0x28>
 80065fa:	a101      	add	r1, pc, #4	; (adr r1, 8006600 <_printf_i+0x40>)
 80065fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006600:	08006659 	.word	0x08006659
 8006604:	0800666d 	.word	0x0800666d
 8006608:	080065e9 	.word	0x080065e9
 800660c:	080065e9 	.word	0x080065e9
 8006610:	080065e9 	.word	0x080065e9
 8006614:	080065e9 	.word	0x080065e9
 8006618:	0800666d 	.word	0x0800666d
 800661c:	080065e9 	.word	0x080065e9
 8006620:	080065e9 	.word	0x080065e9
 8006624:	080065e9 	.word	0x080065e9
 8006628:	080065e9 	.word	0x080065e9
 800662c:	08006779 	.word	0x08006779
 8006630:	0800669d 	.word	0x0800669d
 8006634:	0800675b 	.word	0x0800675b
 8006638:	080065e9 	.word	0x080065e9
 800663c:	080065e9 	.word	0x080065e9
 8006640:	0800679b 	.word	0x0800679b
 8006644:	080065e9 	.word	0x080065e9
 8006648:	0800669d 	.word	0x0800669d
 800664c:	080065e9 	.word	0x080065e9
 8006650:	080065e9 	.word	0x080065e9
 8006654:	08006763 	.word	0x08006763
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	1d1a      	adds	r2, r3, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	602a      	str	r2, [r5, #0]
 8006660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006668:	2301      	movs	r3, #1
 800666a:	e0a3      	b.n	80067b4 <_printf_i+0x1f4>
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	6829      	ldr	r1, [r5, #0]
 8006670:	0606      	lsls	r6, r0, #24
 8006672:	f101 0304 	add.w	r3, r1, #4
 8006676:	d50a      	bpl.n	800668e <_printf_i+0xce>
 8006678:	680e      	ldr	r6, [r1, #0]
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	2e00      	cmp	r6, #0
 800667e:	da03      	bge.n	8006688 <_printf_i+0xc8>
 8006680:	232d      	movs	r3, #45	; 0x2d
 8006682:	4276      	negs	r6, r6
 8006684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006688:	485e      	ldr	r0, [pc, #376]	; (8006804 <_printf_i+0x244>)
 800668a:	230a      	movs	r3, #10
 800668c:	e019      	b.n	80066c2 <_printf_i+0x102>
 800668e:	680e      	ldr	r6, [r1, #0]
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006696:	bf18      	it	ne
 8006698:	b236      	sxthne	r6, r6
 800669a:	e7ef      	b.n	800667c <_printf_i+0xbc>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	6820      	ldr	r0, [r4, #0]
 80066a0:	1d19      	adds	r1, r3, #4
 80066a2:	6029      	str	r1, [r5, #0]
 80066a4:	0601      	lsls	r1, r0, #24
 80066a6:	d501      	bpl.n	80066ac <_printf_i+0xec>
 80066a8:	681e      	ldr	r6, [r3, #0]
 80066aa:	e002      	b.n	80066b2 <_printf_i+0xf2>
 80066ac:	0646      	lsls	r6, r0, #25
 80066ae:	d5fb      	bpl.n	80066a8 <_printf_i+0xe8>
 80066b0:	881e      	ldrh	r6, [r3, #0]
 80066b2:	4854      	ldr	r0, [pc, #336]	; (8006804 <_printf_i+0x244>)
 80066b4:	2f6f      	cmp	r7, #111	; 0x6f
 80066b6:	bf0c      	ite	eq
 80066b8:	2308      	moveq	r3, #8
 80066ba:	230a      	movne	r3, #10
 80066bc:	2100      	movs	r1, #0
 80066be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066c2:	6865      	ldr	r5, [r4, #4]
 80066c4:	60a5      	str	r5, [r4, #8]
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	bfa2      	ittt	ge
 80066ca:	6821      	ldrge	r1, [r4, #0]
 80066cc:	f021 0104 	bicge.w	r1, r1, #4
 80066d0:	6021      	strge	r1, [r4, #0]
 80066d2:	b90e      	cbnz	r6, 80066d8 <_printf_i+0x118>
 80066d4:	2d00      	cmp	r5, #0
 80066d6:	d04d      	beq.n	8006774 <_printf_i+0x1b4>
 80066d8:	4615      	mov	r5, r2
 80066da:	fbb6 f1f3 	udiv	r1, r6, r3
 80066de:	fb03 6711 	mls	r7, r3, r1, r6
 80066e2:	5dc7      	ldrb	r7, [r0, r7]
 80066e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066e8:	4637      	mov	r7, r6
 80066ea:	42bb      	cmp	r3, r7
 80066ec:	460e      	mov	r6, r1
 80066ee:	d9f4      	bls.n	80066da <_printf_i+0x11a>
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d10b      	bne.n	800670c <_printf_i+0x14c>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	07de      	lsls	r6, r3, #31
 80066f8:	d508      	bpl.n	800670c <_printf_i+0x14c>
 80066fa:	6923      	ldr	r3, [r4, #16]
 80066fc:	6861      	ldr	r1, [r4, #4]
 80066fe:	4299      	cmp	r1, r3
 8006700:	bfde      	ittt	le
 8006702:	2330      	movle	r3, #48	; 0x30
 8006704:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006708:	f105 35ff 	addle.w	r5, r5, #4294967295
 800670c:	1b52      	subs	r2, r2, r5
 800670e:	6122      	str	r2, [r4, #16]
 8006710:	f8cd a000 	str.w	sl, [sp]
 8006714:	464b      	mov	r3, r9
 8006716:	aa03      	add	r2, sp, #12
 8006718:	4621      	mov	r1, r4
 800671a:	4640      	mov	r0, r8
 800671c:	f7ff fee2 	bl	80064e4 <_printf_common>
 8006720:	3001      	adds	r0, #1
 8006722:	d14c      	bne.n	80067be <_printf_i+0x1fe>
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	b004      	add	sp, #16
 800672a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672e:	4835      	ldr	r0, [pc, #212]	; (8006804 <_printf_i+0x244>)
 8006730:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006734:	6829      	ldr	r1, [r5, #0]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	f851 6b04 	ldr.w	r6, [r1], #4
 800673c:	6029      	str	r1, [r5, #0]
 800673e:	061d      	lsls	r5, r3, #24
 8006740:	d514      	bpl.n	800676c <_printf_i+0x1ac>
 8006742:	07df      	lsls	r7, r3, #31
 8006744:	bf44      	itt	mi
 8006746:	f043 0320 	orrmi.w	r3, r3, #32
 800674a:	6023      	strmi	r3, [r4, #0]
 800674c:	b91e      	cbnz	r6, 8006756 <_printf_i+0x196>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	f023 0320 	bic.w	r3, r3, #32
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	2310      	movs	r3, #16
 8006758:	e7b0      	b.n	80066bc <_printf_i+0xfc>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	f043 0320 	orr.w	r3, r3, #32
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	2378      	movs	r3, #120	; 0x78
 8006764:	4828      	ldr	r0, [pc, #160]	; (8006808 <_printf_i+0x248>)
 8006766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800676a:	e7e3      	b.n	8006734 <_printf_i+0x174>
 800676c:	0659      	lsls	r1, r3, #25
 800676e:	bf48      	it	mi
 8006770:	b2b6      	uxthmi	r6, r6
 8006772:	e7e6      	b.n	8006742 <_printf_i+0x182>
 8006774:	4615      	mov	r5, r2
 8006776:	e7bb      	b.n	80066f0 <_printf_i+0x130>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	6826      	ldr	r6, [r4, #0]
 800677c:	6961      	ldr	r1, [r4, #20]
 800677e:	1d18      	adds	r0, r3, #4
 8006780:	6028      	str	r0, [r5, #0]
 8006782:	0635      	lsls	r5, r6, #24
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	d501      	bpl.n	800678c <_printf_i+0x1cc>
 8006788:	6019      	str	r1, [r3, #0]
 800678a:	e002      	b.n	8006792 <_printf_i+0x1d2>
 800678c:	0670      	lsls	r0, r6, #25
 800678e:	d5fb      	bpl.n	8006788 <_printf_i+0x1c8>
 8006790:	8019      	strh	r1, [r3, #0]
 8006792:	2300      	movs	r3, #0
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	4615      	mov	r5, r2
 8006798:	e7ba      	b.n	8006710 <_printf_i+0x150>
 800679a:	682b      	ldr	r3, [r5, #0]
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	602a      	str	r2, [r5, #0]
 80067a0:	681d      	ldr	r5, [r3, #0]
 80067a2:	6862      	ldr	r2, [r4, #4]
 80067a4:	2100      	movs	r1, #0
 80067a6:	4628      	mov	r0, r5
 80067a8:	f7f9 fd2a 	bl	8000200 <memchr>
 80067ac:	b108      	cbz	r0, 80067b2 <_printf_i+0x1f2>
 80067ae:	1b40      	subs	r0, r0, r5
 80067b0:	6060      	str	r0, [r4, #4]
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	2300      	movs	r3, #0
 80067b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067bc:	e7a8      	b.n	8006710 <_printf_i+0x150>
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	462a      	mov	r2, r5
 80067c2:	4649      	mov	r1, r9
 80067c4:	4640      	mov	r0, r8
 80067c6:	47d0      	blx	sl
 80067c8:	3001      	adds	r0, #1
 80067ca:	d0ab      	beq.n	8006724 <_printf_i+0x164>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	079b      	lsls	r3, r3, #30
 80067d0:	d413      	bmi.n	80067fa <_printf_i+0x23a>
 80067d2:	68e0      	ldr	r0, [r4, #12]
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	4298      	cmp	r0, r3
 80067d8:	bfb8      	it	lt
 80067da:	4618      	movlt	r0, r3
 80067dc:	e7a4      	b.n	8006728 <_printf_i+0x168>
 80067de:	2301      	movs	r3, #1
 80067e0:	4632      	mov	r2, r6
 80067e2:	4649      	mov	r1, r9
 80067e4:	4640      	mov	r0, r8
 80067e6:	47d0      	blx	sl
 80067e8:	3001      	adds	r0, #1
 80067ea:	d09b      	beq.n	8006724 <_printf_i+0x164>
 80067ec:	3501      	adds	r5, #1
 80067ee:	68e3      	ldr	r3, [r4, #12]
 80067f0:	9903      	ldr	r1, [sp, #12]
 80067f2:	1a5b      	subs	r3, r3, r1
 80067f4:	42ab      	cmp	r3, r5
 80067f6:	dcf2      	bgt.n	80067de <_printf_i+0x21e>
 80067f8:	e7eb      	b.n	80067d2 <_printf_i+0x212>
 80067fa:	2500      	movs	r5, #0
 80067fc:	f104 0619 	add.w	r6, r4, #25
 8006800:	e7f5      	b.n	80067ee <_printf_i+0x22e>
 8006802:	bf00      	nop
 8006804:	0800a816 	.word	0x0800a816
 8006808:	0800a827 	.word	0x0800a827

0800680c <siprintf>:
 800680c:	b40e      	push	{r1, r2, r3}
 800680e:	b500      	push	{lr}
 8006810:	b09c      	sub	sp, #112	; 0x70
 8006812:	ab1d      	add	r3, sp, #116	; 0x74
 8006814:	9002      	str	r0, [sp, #8]
 8006816:	9006      	str	r0, [sp, #24]
 8006818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800681c:	4809      	ldr	r0, [pc, #36]	; (8006844 <siprintf+0x38>)
 800681e:	9107      	str	r1, [sp, #28]
 8006820:	9104      	str	r1, [sp, #16]
 8006822:	4909      	ldr	r1, [pc, #36]	; (8006848 <siprintf+0x3c>)
 8006824:	f853 2b04 	ldr.w	r2, [r3], #4
 8006828:	9105      	str	r1, [sp, #20]
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	a902      	add	r1, sp, #8
 8006830:	f001 fb78 	bl	8007f24 <_svfiprintf_r>
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	b01c      	add	sp, #112	; 0x70
 800683c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006840:	b003      	add	sp, #12
 8006842:	4770      	bx	lr
 8006844:	20000088 	.word	0x20000088
 8006848:	ffff0208 	.word	0xffff0208

0800684c <quorem>:
 800684c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	6903      	ldr	r3, [r0, #16]
 8006852:	690c      	ldr	r4, [r1, #16]
 8006854:	42a3      	cmp	r3, r4
 8006856:	4607      	mov	r7, r0
 8006858:	f2c0 8081 	blt.w	800695e <quorem+0x112>
 800685c:	3c01      	subs	r4, #1
 800685e:	f101 0814 	add.w	r8, r1, #20
 8006862:	f100 0514 	add.w	r5, r0, #20
 8006866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006874:	3301      	adds	r3, #1
 8006876:	429a      	cmp	r2, r3
 8006878:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800687c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006880:	fbb2 f6f3 	udiv	r6, r2, r3
 8006884:	d331      	bcc.n	80068ea <quorem+0x9e>
 8006886:	f04f 0e00 	mov.w	lr, #0
 800688a:	4640      	mov	r0, r8
 800688c:	46ac      	mov	ip, r5
 800688e:	46f2      	mov	sl, lr
 8006890:	f850 2b04 	ldr.w	r2, [r0], #4
 8006894:	b293      	uxth	r3, r2
 8006896:	fb06 e303 	mla	r3, r6, r3, lr
 800689a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ebaa 0303 	sub.w	r3, sl, r3
 80068a4:	f8dc a000 	ldr.w	sl, [ip]
 80068a8:	0c12      	lsrs	r2, r2, #16
 80068aa:	fa13 f38a 	uxtah	r3, r3, sl
 80068ae:	fb06 e202 	mla	r2, r6, r2, lr
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	9b00      	ldr	r3, [sp, #0]
 80068b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068ba:	b292      	uxth	r2, r2
 80068bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80068c8:	4581      	cmp	r9, r0
 80068ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068ce:	f84c 3b04 	str.w	r3, [ip], #4
 80068d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068d6:	d2db      	bcs.n	8006890 <quorem+0x44>
 80068d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80068dc:	b92b      	cbnz	r3, 80068ea <quorem+0x9e>
 80068de:	9b01      	ldr	r3, [sp, #4]
 80068e0:	3b04      	subs	r3, #4
 80068e2:	429d      	cmp	r5, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	d32e      	bcc.n	8006946 <quorem+0xfa>
 80068e8:	613c      	str	r4, [r7, #16]
 80068ea:	4638      	mov	r0, r7
 80068ec:	f001 f8c6 	bl	8007a7c <__mcmp>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	db24      	blt.n	800693e <quorem+0xf2>
 80068f4:	3601      	adds	r6, #1
 80068f6:	4628      	mov	r0, r5
 80068f8:	f04f 0c00 	mov.w	ip, #0
 80068fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006900:	f8d0 e000 	ldr.w	lr, [r0]
 8006904:	b293      	uxth	r3, r2
 8006906:	ebac 0303 	sub.w	r3, ip, r3
 800690a:	0c12      	lsrs	r2, r2, #16
 800690c:	fa13 f38e 	uxtah	r3, r3, lr
 8006910:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006918:	b29b      	uxth	r3, r3
 800691a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800691e:	45c1      	cmp	r9, r8
 8006920:	f840 3b04 	str.w	r3, [r0], #4
 8006924:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006928:	d2e8      	bcs.n	80068fc <quorem+0xb0>
 800692a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800692e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006932:	b922      	cbnz	r2, 800693e <quorem+0xf2>
 8006934:	3b04      	subs	r3, #4
 8006936:	429d      	cmp	r5, r3
 8006938:	461a      	mov	r2, r3
 800693a:	d30a      	bcc.n	8006952 <quorem+0x106>
 800693c:	613c      	str	r4, [r7, #16]
 800693e:	4630      	mov	r0, r6
 8006940:	b003      	add	sp, #12
 8006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	3b04      	subs	r3, #4
 800694a:	2a00      	cmp	r2, #0
 800694c:	d1cc      	bne.n	80068e8 <quorem+0x9c>
 800694e:	3c01      	subs	r4, #1
 8006950:	e7c7      	b.n	80068e2 <quorem+0x96>
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	3b04      	subs	r3, #4
 8006956:	2a00      	cmp	r2, #0
 8006958:	d1f0      	bne.n	800693c <quorem+0xf0>
 800695a:	3c01      	subs	r4, #1
 800695c:	e7eb      	b.n	8006936 <quorem+0xea>
 800695e:	2000      	movs	r0, #0
 8006960:	e7ee      	b.n	8006940 <quorem+0xf4>
 8006962:	0000      	movs	r0, r0
 8006964:	0000      	movs	r0, r0
	...

08006968 <_dtoa_r>:
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	ed2d 8b04 	vpush	{d8-d9}
 8006970:	ec57 6b10 	vmov	r6, r7, d0
 8006974:	b093      	sub	sp, #76	; 0x4c
 8006976:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006978:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800697c:	9106      	str	r1, [sp, #24]
 800697e:	ee10 aa10 	vmov	sl, s0
 8006982:	4604      	mov	r4, r0
 8006984:	9209      	str	r2, [sp, #36]	; 0x24
 8006986:	930c      	str	r3, [sp, #48]	; 0x30
 8006988:	46bb      	mov	fp, r7
 800698a:	b975      	cbnz	r5, 80069aa <_dtoa_r+0x42>
 800698c:	2010      	movs	r0, #16
 800698e:	f000 fddd 	bl	800754c <malloc>
 8006992:	4602      	mov	r2, r0
 8006994:	6260      	str	r0, [r4, #36]	; 0x24
 8006996:	b920      	cbnz	r0, 80069a2 <_dtoa_r+0x3a>
 8006998:	4ba7      	ldr	r3, [pc, #668]	; (8006c38 <_dtoa_r+0x2d0>)
 800699a:	21ea      	movs	r1, #234	; 0xea
 800699c:	48a7      	ldr	r0, [pc, #668]	; (8006c3c <_dtoa_r+0x2d4>)
 800699e:	f001 fbd1 	bl	8008144 <__assert_func>
 80069a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069a6:	6005      	str	r5, [r0, #0]
 80069a8:	60c5      	str	r5, [r0, #12]
 80069aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	b151      	cbz	r1, 80069c6 <_dtoa_r+0x5e>
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	604a      	str	r2, [r1, #4]
 80069b4:	2301      	movs	r3, #1
 80069b6:	4093      	lsls	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 fe1c 	bl	80075f8 <_Bfree>
 80069c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	1e3b      	subs	r3, r7, #0
 80069c8:	bfaa      	itet	ge
 80069ca:	2300      	movge	r3, #0
 80069cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80069d0:	f8c8 3000 	strge.w	r3, [r8]
 80069d4:	4b9a      	ldr	r3, [pc, #616]	; (8006c40 <_dtoa_r+0x2d8>)
 80069d6:	bfbc      	itt	lt
 80069d8:	2201      	movlt	r2, #1
 80069da:	f8c8 2000 	strlt.w	r2, [r8]
 80069de:	ea33 030b 	bics.w	r3, r3, fp
 80069e2:	d11b      	bne.n	8006a1c <_dtoa_r+0xb4>
 80069e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069f0:	4333      	orrs	r3, r6
 80069f2:	f000 8592 	beq.w	800751a <_dtoa_r+0xbb2>
 80069f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f8:	b963      	cbnz	r3, 8006a14 <_dtoa_r+0xac>
 80069fa:	4b92      	ldr	r3, [pc, #584]	; (8006c44 <_dtoa_r+0x2dc>)
 80069fc:	e022      	b.n	8006a44 <_dtoa_r+0xdc>
 80069fe:	4b92      	ldr	r3, [pc, #584]	; (8006c48 <_dtoa_r+0x2e0>)
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	3308      	adds	r3, #8
 8006a04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	9801      	ldr	r0, [sp, #4]
 8006a0a:	b013      	add	sp, #76	; 0x4c
 8006a0c:	ecbd 8b04 	vpop	{d8-d9}
 8006a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a14:	4b8b      	ldr	r3, [pc, #556]	; (8006c44 <_dtoa_r+0x2dc>)
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	3303      	adds	r3, #3
 8006a1a:	e7f3      	b.n	8006a04 <_dtoa_r+0x9c>
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2300      	movs	r3, #0
 8006a20:	4650      	mov	r0, sl
 8006a22:	4659      	mov	r1, fp
 8006a24:	f7fa f860 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a28:	ec4b ab19 	vmov	d9, sl, fp
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	b158      	cbz	r0, 8006a48 <_dtoa_r+0xe0>
 8006a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a32:	2301      	movs	r3, #1
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 856b 	beq.w	8007514 <_dtoa_r+0xbac>
 8006a3e:	4883      	ldr	r0, [pc, #524]	; (8006c4c <_dtoa_r+0x2e4>)
 8006a40:	6018      	str	r0, [r3, #0]
 8006a42:	1e43      	subs	r3, r0, #1
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	e7df      	b.n	8006a08 <_dtoa_r+0xa0>
 8006a48:	ec4b ab10 	vmov	d0, sl, fp
 8006a4c:	aa10      	add	r2, sp, #64	; 0x40
 8006a4e:	a911      	add	r1, sp, #68	; 0x44
 8006a50:	4620      	mov	r0, r4
 8006a52:	f001 f8b9 	bl	8007bc8 <__d2b>
 8006a56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006a5a:	ee08 0a10 	vmov	s16, r0
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	f000 8084 	beq.w	8006b6c <_dtoa_r+0x204>
 8006a64:	ee19 3a90 	vmov	r3, s19
 8006a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a70:	4656      	mov	r6, sl
 8006a72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006a7e:	4b74      	ldr	r3, [pc, #464]	; (8006c50 <_dtoa_r+0x2e8>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7f9 fc0f 	bl	80002a8 <__aeabi_dsub>
 8006a8a:	a365      	add	r3, pc, #404	; (adr r3, 8006c20 <_dtoa_r+0x2b8>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fdc2 	bl	8000618 <__aeabi_dmul>
 8006a94:	a364      	add	r3, pc, #400	; (adr r3, 8006c28 <_dtoa_r+0x2c0>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f7f9 fc07 	bl	80002ac <__adddf3>
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	460f      	mov	r7, r1
 8006aa4:	f7f9 fd4e 	bl	8000544 <__aeabi_i2d>
 8006aa8:	a361      	add	r3, pc, #388	; (adr r3, 8006c30 <_dtoa_r+0x2c8>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f7f9 fdb3 	bl	8000618 <__aeabi_dmul>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	f7f9 fbf7 	bl	80002ac <__adddf3>
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460f      	mov	r7, r1
 8006ac2:	f7fa f859 	bl	8000b78 <__aeabi_d2iz>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	9000      	str	r0, [sp, #0]
 8006aca:	2300      	movs	r3, #0
 8006acc:	4630      	mov	r0, r6
 8006ace:	4639      	mov	r1, r7
 8006ad0:	f7fa f814 	bl	8000afc <__aeabi_dcmplt>
 8006ad4:	b150      	cbz	r0, 8006aec <_dtoa_r+0x184>
 8006ad6:	9800      	ldr	r0, [sp, #0]
 8006ad8:	f7f9 fd34 	bl	8000544 <__aeabi_i2d>
 8006adc:	4632      	mov	r2, r6
 8006ade:	463b      	mov	r3, r7
 8006ae0:	f7fa f802 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ae4:	b910      	cbnz	r0, 8006aec <_dtoa_r+0x184>
 8006ae6:	9b00      	ldr	r3, [sp, #0]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	9b00      	ldr	r3, [sp, #0]
 8006aee:	2b16      	cmp	r3, #22
 8006af0:	d85a      	bhi.n	8006ba8 <_dtoa_r+0x240>
 8006af2:	9a00      	ldr	r2, [sp, #0]
 8006af4:	4b57      	ldr	r3, [pc, #348]	; (8006c54 <_dtoa_r+0x2ec>)
 8006af6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	ec51 0b19 	vmov	r0, r1, d9
 8006b02:	f7f9 fffb 	bl	8000afc <__aeabi_dcmplt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d050      	beq.n	8006bac <_dtoa_r+0x244>
 8006b0a:	9b00      	ldr	r3, [sp, #0]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	2300      	movs	r3, #0
 8006b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b16:	1b5d      	subs	r5, r3, r5
 8006b18:	1e6b      	subs	r3, r5, #1
 8006b1a:	9305      	str	r3, [sp, #20]
 8006b1c:	bf45      	ittet	mi
 8006b1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006b22:	9304      	strmi	r3, [sp, #16]
 8006b24:	2300      	movpl	r3, #0
 8006b26:	2300      	movmi	r3, #0
 8006b28:	bf4c      	ite	mi
 8006b2a:	9305      	strmi	r3, [sp, #20]
 8006b2c:	9304      	strpl	r3, [sp, #16]
 8006b2e:	9b00      	ldr	r3, [sp, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	db3d      	blt.n	8006bb0 <_dtoa_r+0x248>
 8006b34:	9b05      	ldr	r3, [sp, #20]
 8006b36:	9a00      	ldr	r2, [sp, #0]
 8006b38:	920a      	str	r2, [sp, #40]	; 0x28
 8006b3a:	4413      	add	r3, r2
 8006b3c:	9305      	str	r3, [sp, #20]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9307      	str	r3, [sp, #28]
 8006b42:	9b06      	ldr	r3, [sp, #24]
 8006b44:	2b09      	cmp	r3, #9
 8006b46:	f200 8089 	bhi.w	8006c5c <_dtoa_r+0x2f4>
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	bfc4      	itt	gt
 8006b4e:	3b04      	subgt	r3, #4
 8006b50:	9306      	strgt	r3, [sp, #24]
 8006b52:	9b06      	ldr	r3, [sp, #24]
 8006b54:	f1a3 0302 	sub.w	r3, r3, #2
 8006b58:	bfcc      	ite	gt
 8006b5a:	2500      	movgt	r5, #0
 8006b5c:	2501      	movle	r5, #1
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	f200 8087 	bhi.w	8006c72 <_dtoa_r+0x30a>
 8006b64:	e8df f003 	tbb	[pc, r3]
 8006b68:	59383a2d 	.word	0x59383a2d
 8006b6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b70:	441d      	add	r5, r3
 8006b72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	bfc1      	itttt	gt
 8006b7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b82:	fa0b f303 	lslgt.w	r3, fp, r3
 8006b86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b8a:	bfda      	itte	le
 8006b8c:	f1c3 0320 	rsble	r3, r3, #32
 8006b90:	fa06 f003 	lslle.w	r0, r6, r3
 8006b94:	4318      	orrgt	r0, r3
 8006b96:	f7f9 fcc5 	bl	8000524 <__aeabi_ui2d>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006ba2:	3d01      	subs	r5, #1
 8006ba4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ba6:	e76a      	b.n	8006a7e <_dtoa_r+0x116>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e7b2      	b.n	8006b12 <_dtoa_r+0x1aa>
 8006bac:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bae:	e7b1      	b.n	8006b14 <_dtoa_r+0x1ac>
 8006bb0:	9b04      	ldr	r3, [sp, #16]
 8006bb2:	9a00      	ldr	r2, [sp, #0]
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	9304      	str	r3, [sp, #16]
 8006bb8:	4253      	negs	r3, r2
 8006bba:	9307      	str	r3, [sp, #28]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8006bc0:	e7bf      	b.n	8006b42 <_dtoa_r+0x1da>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9308      	str	r3, [sp, #32]
 8006bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc55      	bgt.n	8006c78 <_dtoa_r+0x310>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bd6:	e00c      	b.n	8006bf2 <_dtoa_r+0x28a>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e7f3      	b.n	8006bc4 <_dtoa_r+0x25c>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006be0:	9308      	str	r3, [sp, #32]
 8006be2:	9b00      	ldr	r3, [sp, #0]
 8006be4:	4413      	add	r3, r2
 8006be6:	9302      	str	r3, [sp, #8]
 8006be8:	3301      	adds	r3, #1
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	9303      	str	r3, [sp, #12]
 8006bee:	bfb8      	it	lt
 8006bf0:	2301      	movlt	r3, #1
 8006bf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	6042      	str	r2, [r0, #4]
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	f102 0614 	add.w	r6, r2, #20
 8006bfe:	429e      	cmp	r6, r3
 8006c00:	6841      	ldr	r1, [r0, #4]
 8006c02:	d93d      	bls.n	8006c80 <_dtoa_r+0x318>
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 fcb7 	bl	8007578 <_Balloc>
 8006c0a:	9001      	str	r0, [sp, #4]
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d13b      	bne.n	8006c88 <_dtoa_r+0x320>
 8006c10:	4b11      	ldr	r3, [pc, #68]	; (8006c58 <_dtoa_r+0x2f0>)
 8006c12:	4602      	mov	r2, r0
 8006c14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c18:	e6c0      	b.n	800699c <_dtoa_r+0x34>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e7df      	b.n	8006bde <_dtoa_r+0x276>
 8006c1e:	bf00      	nop
 8006c20:	636f4361 	.word	0x636f4361
 8006c24:	3fd287a7 	.word	0x3fd287a7
 8006c28:	8b60c8b3 	.word	0x8b60c8b3
 8006c2c:	3fc68a28 	.word	0x3fc68a28
 8006c30:	509f79fb 	.word	0x509f79fb
 8006c34:	3fd34413 	.word	0x3fd34413
 8006c38:	0800a845 	.word	0x0800a845
 8006c3c:	0800a85c 	.word	0x0800a85c
 8006c40:	7ff00000 	.word	0x7ff00000
 8006c44:	0800a841 	.word	0x0800a841
 8006c48:	0800a838 	.word	0x0800a838
 8006c4c:	0800a815 	.word	0x0800a815
 8006c50:	3ff80000 	.word	0x3ff80000
 8006c54:	0800a950 	.word	0x0800a950
 8006c58:	0800a8b7 	.word	0x0800a8b7
 8006c5c:	2501      	movs	r5, #1
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9306      	str	r3, [sp, #24]
 8006c62:	9508      	str	r5, [sp, #32]
 8006c64:	f04f 33ff 	mov.w	r3, #4294967295
 8006c68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2312      	movs	r3, #18
 8006c70:	e7b0      	b.n	8006bd4 <_dtoa_r+0x26c>
 8006c72:	2301      	movs	r3, #1
 8006c74:	9308      	str	r3, [sp, #32]
 8006c76:	e7f5      	b.n	8006c64 <_dtoa_r+0x2fc>
 8006c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c7e:	e7b8      	b.n	8006bf2 <_dtoa_r+0x28a>
 8006c80:	3101      	adds	r1, #1
 8006c82:	6041      	str	r1, [r0, #4]
 8006c84:	0052      	lsls	r2, r2, #1
 8006c86:	e7b8      	b.n	8006bfa <_dtoa_r+0x292>
 8006c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c8a:	9a01      	ldr	r2, [sp, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	2b0e      	cmp	r3, #14
 8006c92:	f200 809d 	bhi.w	8006dd0 <_dtoa_r+0x468>
 8006c96:	2d00      	cmp	r5, #0
 8006c98:	f000 809a 	beq.w	8006dd0 <_dtoa_r+0x468>
 8006c9c:	9b00      	ldr	r3, [sp, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dd32      	ble.n	8006d08 <_dtoa_r+0x3a0>
 8006ca2:	4ab7      	ldr	r2, [pc, #732]	; (8006f80 <_dtoa_r+0x618>)
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006cac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	05d8      	lsls	r0, r3, #23
 8006cb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006cb8:	d516      	bpl.n	8006ce8 <_dtoa_r+0x380>
 8006cba:	4bb2      	ldr	r3, [pc, #712]	; (8006f84 <_dtoa_r+0x61c>)
 8006cbc:	ec51 0b19 	vmov	r0, r1, d9
 8006cc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cc4:	f7f9 fdd2 	bl	800086c <__aeabi_ddiv>
 8006cc8:	f007 070f 	and.w	r7, r7, #15
 8006ccc:	4682      	mov	sl, r0
 8006cce:	468b      	mov	fp, r1
 8006cd0:	2503      	movs	r5, #3
 8006cd2:	4eac      	ldr	r6, [pc, #688]	; (8006f84 <_dtoa_r+0x61c>)
 8006cd4:	b957      	cbnz	r7, 8006cec <_dtoa_r+0x384>
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	464b      	mov	r3, r9
 8006cda:	4650      	mov	r0, sl
 8006cdc:	4659      	mov	r1, fp
 8006cde:	f7f9 fdc5 	bl	800086c <__aeabi_ddiv>
 8006ce2:	4682      	mov	sl, r0
 8006ce4:	468b      	mov	fp, r1
 8006ce6:	e028      	b.n	8006d3a <_dtoa_r+0x3d2>
 8006ce8:	2502      	movs	r5, #2
 8006cea:	e7f2      	b.n	8006cd2 <_dtoa_r+0x36a>
 8006cec:	07f9      	lsls	r1, r7, #31
 8006cee:	d508      	bpl.n	8006d02 <_dtoa_r+0x39a>
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cf8:	f7f9 fc8e 	bl	8000618 <__aeabi_dmul>
 8006cfc:	3501      	adds	r5, #1
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4689      	mov	r9, r1
 8006d02:	107f      	asrs	r7, r7, #1
 8006d04:	3608      	adds	r6, #8
 8006d06:	e7e5      	b.n	8006cd4 <_dtoa_r+0x36c>
 8006d08:	f000 809b 	beq.w	8006e42 <_dtoa_r+0x4da>
 8006d0c:	9b00      	ldr	r3, [sp, #0]
 8006d0e:	4f9d      	ldr	r7, [pc, #628]	; (8006f84 <_dtoa_r+0x61c>)
 8006d10:	425e      	negs	r6, r3
 8006d12:	4b9b      	ldr	r3, [pc, #620]	; (8006f80 <_dtoa_r+0x618>)
 8006d14:	f006 020f 	and.w	r2, r6, #15
 8006d18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	ec51 0b19 	vmov	r0, r1, d9
 8006d24:	f7f9 fc78 	bl	8000618 <__aeabi_dmul>
 8006d28:	1136      	asrs	r6, r6, #4
 8006d2a:	4682      	mov	sl, r0
 8006d2c:	468b      	mov	fp, r1
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2502      	movs	r5, #2
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	d17a      	bne.n	8006e2c <_dtoa_r+0x4c4>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1d3      	bne.n	8006ce2 <_dtoa_r+0x37a>
 8006d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 8082 	beq.w	8006e46 <_dtoa_r+0x4de>
 8006d42:	4b91      	ldr	r3, [pc, #580]	; (8006f88 <_dtoa_r+0x620>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	4650      	mov	r0, sl
 8006d48:	4659      	mov	r1, fp
 8006d4a:	f7f9 fed7 	bl	8000afc <__aeabi_dcmplt>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d079      	beq.n	8006e46 <_dtoa_r+0x4de>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d076      	beq.n	8006e46 <_dtoa_r+0x4de>
 8006d58:	9b02      	ldr	r3, [sp, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	dd36      	ble.n	8006dcc <_dtoa_r+0x464>
 8006d5e:	9b00      	ldr	r3, [sp, #0]
 8006d60:	4650      	mov	r0, sl
 8006d62:	4659      	mov	r1, fp
 8006d64:	1e5f      	subs	r7, r3, #1
 8006d66:	2200      	movs	r2, #0
 8006d68:	4b88      	ldr	r3, [pc, #544]	; (8006f8c <_dtoa_r+0x624>)
 8006d6a:	f7f9 fc55 	bl	8000618 <__aeabi_dmul>
 8006d6e:	9e02      	ldr	r6, [sp, #8]
 8006d70:	4682      	mov	sl, r0
 8006d72:	468b      	mov	fp, r1
 8006d74:	3501      	adds	r5, #1
 8006d76:	4628      	mov	r0, r5
 8006d78:	f7f9 fbe4 	bl	8000544 <__aeabi_i2d>
 8006d7c:	4652      	mov	r2, sl
 8006d7e:	465b      	mov	r3, fp
 8006d80:	f7f9 fc4a 	bl	8000618 <__aeabi_dmul>
 8006d84:	4b82      	ldr	r3, [pc, #520]	; (8006f90 <_dtoa_r+0x628>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	f7f9 fa90 	bl	80002ac <__adddf3>
 8006d8c:	46d0      	mov	r8, sl
 8006d8e:	46d9      	mov	r9, fp
 8006d90:	4682      	mov	sl, r0
 8006d92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006d96:	2e00      	cmp	r6, #0
 8006d98:	d158      	bne.n	8006e4c <_dtoa_r+0x4e4>
 8006d9a:	4b7e      	ldr	r3, [pc, #504]	; (8006f94 <_dtoa_r+0x62c>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4640      	mov	r0, r8
 8006da0:	4649      	mov	r1, r9
 8006da2:	f7f9 fa81 	bl	80002a8 <__aeabi_dsub>
 8006da6:	4652      	mov	r2, sl
 8006da8:	465b      	mov	r3, fp
 8006daa:	4680      	mov	r8, r0
 8006dac:	4689      	mov	r9, r1
 8006dae:	f7f9 fec3 	bl	8000b38 <__aeabi_dcmpgt>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f040 8295 	bne.w	80072e2 <_dtoa_r+0x97a>
 8006db8:	4652      	mov	r2, sl
 8006dba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	f7f9 fe9b 	bl	8000afc <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f040 8289 	bne.w	80072de <_dtoa_r+0x976>
 8006dcc:	ec5b ab19 	vmov	sl, fp, d9
 8006dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f2c0 8148 	blt.w	8007068 <_dtoa_r+0x700>
 8006dd8:	9a00      	ldr	r2, [sp, #0]
 8006dda:	2a0e      	cmp	r2, #14
 8006ddc:	f300 8144 	bgt.w	8007068 <_dtoa_r+0x700>
 8006de0:	4b67      	ldr	r3, [pc, #412]	; (8006f80 <_dtoa_r+0x618>)
 8006de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006de6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f280 80d5 	bge.w	8006f9c <_dtoa_r+0x634>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f300 80d1 	bgt.w	8006f9c <_dtoa_r+0x634>
 8006dfa:	f040 826f 	bne.w	80072dc <_dtoa_r+0x974>
 8006dfe:	4b65      	ldr	r3, [pc, #404]	; (8006f94 <_dtoa_r+0x62c>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	4640      	mov	r0, r8
 8006e04:	4649      	mov	r1, r9
 8006e06:	f7f9 fc07 	bl	8000618 <__aeabi_dmul>
 8006e0a:	4652      	mov	r2, sl
 8006e0c:	465b      	mov	r3, fp
 8006e0e:	f7f9 fe89 	bl	8000b24 <__aeabi_dcmpge>
 8006e12:	9e03      	ldr	r6, [sp, #12]
 8006e14:	4637      	mov	r7, r6
 8006e16:	2800      	cmp	r0, #0
 8006e18:	f040 8245 	bne.w	80072a6 <_dtoa_r+0x93e>
 8006e1c:	9d01      	ldr	r5, [sp, #4]
 8006e1e:	2331      	movs	r3, #49	; 0x31
 8006e20:	f805 3b01 	strb.w	r3, [r5], #1
 8006e24:	9b00      	ldr	r3, [sp, #0]
 8006e26:	3301      	adds	r3, #1
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	e240      	b.n	80072ae <_dtoa_r+0x946>
 8006e2c:	07f2      	lsls	r2, r6, #31
 8006e2e:	d505      	bpl.n	8006e3c <_dtoa_r+0x4d4>
 8006e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e34:	f7f9 fbf0 	bl	8000618 <__aeabi_dmul>
 8006e38:	3501      	adds	r5, #1
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	1076      	asrs	r6, r6, #1
 8006e3e:	3708      	adds	r7, #8
 8006e40:	e777      	b.n	8006d32 <_dtoa_r+0x3ca>
 8006e42:	2502      	movs	r5, #2
 8006e44:	e779      	b.n	8006d3a <_dtoa_r+0x3d2>
 8006e46:	9f00      	ldr	r7, [sp, #0]
 8006e48:	9e03      	ldr	r6, [sp, #12]
 8006e4a:	e794      	b.n	8006d76 <_dtoa_r+0x40e>
 8006e4c:	9901      	ldr	r1, [sp, #4]
 8006e4e:	4b4c      	ldr	r3, [pc, #304]	; (8006f80 <_dtoa_r+0x618>)
 8006e50:	4431      	add	r1, r6
 8006e52:	910d      	str	r1, [sp, #52]	; 0x34
 8006e54:	9908      	ldr	r1, [sp, #32]
 8006e56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	d043      	beq.n	8006eea <_dtoa_r+0x582>
 8006e62:	494d      	ldr	r1, [pc, #308]	; (8006f98 <_dtoa_r+0x630>)
 8006e64:	2000      	movs	r0, #0
 8006e66:	f7f9 fd01 	bl	800086c <__aeabi_ddiv>
 8006e6a:	4652      	mov	r2, sl
 8006e6c:	465b      	mov	r3, fp
 8006e6e:	f7f9 fa1b 	bl	80002a8 <__aeabi_dsub>
 8006e72:	9d01      	ldr	r5, [sp, #4]
 8006e74:	4682      	mov	sl, r0
 8006e76:	468b      	mov	fp, r1
 8006e78:	4649      	mov	r1, r9
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	f7f9 fe7c 	bl	8000b78 <__aeabi_d2iz>
 8006e80:	4606      	mov	r6, r0
 8006e82:	f7f9 fb5f 	bl	8000544 <__aeabi_i2d>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 fa0b 	bl	80002a8 <__aeabi_dsub>
 8006e92:	3630      	adds	r6, #48	; 0x30
 8006e94:	f805 6b01 	strb.w	r6, [r5], #1
 8006e98:	4652      	mov	r2, sl
 8006e9a:	465b      	mov	r3, fp
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	4689      	mov	r9, r1
 8006ea0:	f7f9 fe2c 	bl	8000afc <__aeabi_dcmplt>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d163      	bne.n	8006f70 <_dtoa_r+0x608>
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	4936      	ldr	r1, [pc, #216]	; (8006f88 <_dtoa_r+0x620>)
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f7f9 f9fa 	bl	80002a8 <__aeabi_dsub>
 8006eb4:	4652      	mov	r2, sl
 8006eb6:	465b      	mov	r3, fp
 8006eb8:	f7f9 fe20 	bl	8000afc <__aeabi_dcmplt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f040 80b5 	bne.w	800702c <_dtoa_r+0x6c4>
 8006ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec4:	429d      	cmp	r5, r3
 8006ec6:	d081      	beq.n	8006dcc <_dtoa_r+0x464>
 8006ec8:	4b30      	ldr	r3, [pc, #192]	; (8006f8c <_dtoa_r+0x624>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4650      	mov	r0, sl
 8006ece:	4659      	mov	r1, fp
 8006ed0:	f7f9 fba2 	bl	8000618 <__aeabi_dmul>
 8006ed4:	4b2d      	ldr	r3, [pc, #180]	; (8006f8c <_dtoa_r+0x624>)
 8006ed6:	4682      	mov	sl, r0
 8006ed8:	468b      	mov	fp, r1
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f7f9 fb9a 	bl	8000618 <__aeabi_dmul>
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	4689      	mov	r9, r1
 8006ee8:	e7c6      	b.n	8006e78 <_dtoa_r+0x510>
 8006eea:	4650      	mov	r0, sl
 8006eec:	4659      	mov	r1, fp
 8006eee:	f7f9 fb93 	bl	8000618 <__aeabi_dmul>
 8006ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ef4:	9d01      	ldr	r5, [sp, #4]
 8006ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ef8:	4682      	mov	sl, r0
 8006efa:	468b      	mov	fp, r1
 8006efc:	4649      	mov	r1, r9
 8006efe:	4640      	mov	r0, r8
 8006f00:	f7f9 fe3a 	bl	8000b78 <__aeabi_d2iz>
 8006f04:	4606      	mov	r6, r0
 8006f06:	f7f9 fb1d 	bl	8000544 <__aeabi_i2d>
 8006f0a:	3630      	adds	r6, #48	; 0x30
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4640      	mov	r0, r8
 8006f12:	4649      	mov	r1, r9
 8006f14:	f7f9 f9c8 	bl	80002a8 <__aeabi_dsub>
 8006f18:	f805 6b01 	strb.w	r6, [r5], #1
 8006f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f1e:	429d      	cmp	r5, r3
 8006f20:	4680      	mov	r8, r0
 8006f22:	4689      	mov	r9, r1
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	d124      	bne.n	8006f74 <_dtoa_r+0x60c>
 8006f2a:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <_dtoa_r+0x630>)
 8006f2c:	4650      	mov	r0, sl
 8006f2e:	4659      	mov	r1, fp
 8006f30:	f7f9 f9bc 	bl	80002ac <__adddf3>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7f9 fdfc 	bl	8000b38 <__aeabi_dcmpgt>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d173      	bne.n	800702c <_dtoa_r+0x6c4>
 8006f44:	4652      	mov	r2, sl
 8006f46:	465b      	mov	r3, fp
 8006f48:	4913      	ldr	r1, [pc, #76]	; (8006f98 <_dtoa_r+0x630>)
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	f7f9 f9ac 	bl	80002a8 <__aeabi_dsub>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4640      	mov	r0, r8
 8006f56:	4649      	mov	r1, r9
 8006f58:	f7f9 fdd0 	bl	8000afc <__aeabi_dcmplt>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	f43f af35 	beq.w	8006dcc <_dtoa_r+0x464>
 8006f62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f64:	1e6b      	subs	r3, r5, #1
 8006f66:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f6c:	2b30      	cmp	r3, #48	; 0x30
 8006f6e:	d0f8      	beq.n	8006f62 <_dtoa_r+0x5fa>
 8006f70:	9700      	str	r7, [sp, #0]
 8006f72:	e049      	b.n	8007008 <_dtoa_r+0x6a0>
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <_dtoa_r+0x624>)
 8006f76:	f7f9 fb4f 	bl	8000618 <__aeabi_dmul>
 8006f7a:	4680      	mov	r8, r0
 8006f7c:	4689      	mov	r9, r1
 8006f7e:	e7bd      	b.n	8006efc <_dtoa_r+0x594>
 8006f80:	0800a950 	.word	0x0800a950
 8006f84:	0800a928 	.word	0x0800a928
 8006f88:	3ff00000 	.word	0x3ff00000
 8006f8c:	40240000 	.word	0x40240000
 8006f90:	401c0000 	.word	0x401c0000
 8006f94:	40140000 	.word	0x40140000
 8006f98:	3fe00000 	.word	0x3fe00000
 8006f9c:	9d01      	ldr	r5, [sp, #4]
 8006f9e:	4656      	mov	r6, sl
 8006fa0:	465f      	mov	r7, fp
 8006fa2:	4642      	mov	r2, r8
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 fc5f 	bl	800086c <__aeabi_ddiv>
 8006fae:	f7f9 fde3 	bl	8000b78 <__aeabi_d2iz>
 8006fb2:	4682      	mov	sl, r0
 8006fb4:	f7f9 fac6 	bl	8000544 <__aeabi_i2d>
 8006fb8:	4642      	mov	r2, r8
 8006fba:	464b      	mov	r3, r9
 8006fbc:	f7f9 fb2c 	bl	8000618 <__aeabi_dmul>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006fcc:	f7f9 f96c 	bl	80002a8 <__aeabi_dsub>
 8006fd0:	f805 6b01 	strb.w	r6, [r5], #1
 8006fd4:	9e01      	ldr	r6, [sp, #4]
 8006fd6:	9f03      	ldr	r7, [sp, #12]
 8006fd8:	1bae      	subs	r6, r5, r6
 8006fda:	42b7      	cmp	r7, r6
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	d135      	bne.n	800704e <_dtoa_r+0x6e6>
 8006fe2:	f7f9 f963 	bl	80002ac <__adddf3>
 8006fe6:	4642      	mov	r2, r8
 8006fe8:	464b      	mov	r3, r9
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	f7f9 fda3 	bl	8000b38 <__aeabi_dcmpgt>
 8006ff2:	b9d0      	cbnz	r0, 800702a <_dtoa_r+0x6c2>
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	f7f9 fd74 	bl	8000ae8 <__aeabi_dcmpeq>
 8007000:	b110      	cbz	r0, 8007008 <_dtoa_r+0x6a0>
 8007002:	f01a 0f01 	tst.w	sl, #1
 8007006:	d110      	bne.n	800702a <_dtoa_r+0x6c2>
 8007008:	4620      	mov	r0, r4
 800700a:	ee18 1a10 	vmov	r1, s16
 800700e:	f000 faf3 	bl	80075f8 <_Bfree>
 8007012:	2300      	movs	r3, #0
 8007014:	9800      	ldr	r0, [sp, #0]
 8007016:	702b      	strb	r3, [r5, #0]
 8007018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800701a:	3001      	adds	r0, #1
 800701c:	6018      	str	r0, [r3, #0]
 800701e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007020:	2b00      	cmp	r3, #0
 8007022:	f43f acf1 	beq.w	8006a08 <_dtoa_r+0xa0>
 8007026:	601d      	str	r5, [r3, #0]
 8007028:	e4ee      	b.n	8006a08 <_dtoa_r+0xa0>
 800702a:	9f00      	ldr	r7, [sp, #0]
 800702c:	462b      	mov	r3, r5
 800702e:	461d      	mov	r5, r3
 8007030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007034:	2a39      	cmp	r2, #57	; 0x39
 8007036:	d106      	bne.n	8007046 <_dtoa_r+0x6de>
 8007038:	9a01      	ldr	r2, [sp, #4]
 800703a:	429a      	cmp	r2, r3
 800703c:	d1f7      	bne.n	800702e <_dtoa_r+0x6c6>
 800703e:	9901      	ldr	r1, [sp, #4]
 8007040:	2230      	movs	r2, #48	; 0x30
 8007042:	3701      	adds	r7, #1
 8007044:	700a      	strb	r2, [r1, #0]
 8007046:	781a      	ldrb	r2, [r3, #0]
 8007048:	3201      	adds	r2, #1
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	e790      	b.n	8006f70 <_dtoa_r+0x608>
 800704e:	4ba6      	ldr	r3, [pc, #664]	; (80072e8 <_dtoa_r+0x980>)
 8007050:	2200      	movs	r2, #0
 8007052:	f7f9 fae1 	bl	8000618 <__aeabi_dmul>
 8007056:	2200      	movs	r2, #0
 8007058:	2300      	movs	r3, #0
 800705a:	4606      	mov	r6, r0
 800705c:	460f      	mov	r7, r1
 800705e:	f7f9 fd43 	bl	8000ae8 <__aeabi_dcmpeq>
 8007062:	2800      	cmp	r0, #0
 8007064:	d09d      	beq.n	8006fa2 <_dtoa_r+0x63a>
 8007066:	e7cf      	b.n	8007008 <_dtoa_r+0x6a0>
 8007068:	9a08      	ldr	r2, [sp, #32]
 800706a:	2a00      	cmp	r2, #0
 800706c:	f000 80d7 	beq.w	800721e <_dtoa_r+0x8b6>
 8007070:	9a06      	ldr	r2, [sp, #24]
 8007072:	2a01      	cmp	r2, #1
 8007074:	f300 80ba 	bgt.w	80071ec <_dtoa_r+0x884>
 8007078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800707a:	2a00      	cmp	r2, #0
 800707c:	f000 80b2 	beq.w	80071e4 <_dtoa_r+0x87c>
 8007080:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007084:	9e07      	ldr	r6, [sp, #28]
 8007086:	9d04      	ldr	r5, [sp, #16]
 8007088:	9a04      	ldr	r2, [sp, #16]
 800708a:	441a      	add	r2, r3
 800708c:	9204      	str	r2, [sp, #16]
 800708e:	9a05      	ldr	r2, [sp, #20]
 8007090:	2101      	movs	r1, #1
 8007092:	441a      	add	r2, r3
 8007094:	4620      	mov	r0, r4
 8007096:	9205      	str	r2, [sp, #20]
 8007098:	f000 fb66 	bl	8007768 <__i2b>
 800709c:	4607      	mov	r7, r0
 800709e:	2d00      	cmp	r5, #0
 80070a0:	dd0c      	ble.n	80070bc <_dtoa_r+0x754>
 80070a2:	9b05      	ldr	r3, [sp, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dd09      	ble.n	80070bc <_dtoa_r+0x754>
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	9a04      	ldr	r2, [sp, #16]
 80070ac:	bfa8      	it	ge
 80070ae:	462b      	movge	r3, r5
 80070b0:	1ad2      	subs	r2, r2, r3
 80070b2:	9204      	str	r2, [sp, #16]
 80070b4:	9a05      	ldr	r2, [sp, #20]
 80070b6:	1aed      	subs	r5, r5, r3
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	9305      	str	r3, [sp, #20]
 80070bc:	9b07      	ldr	r3, [sp, #28]
 80070be:	b31b      	cbz	r3, 8007108 <_dtoa_r+0x7a0>
 80070c0:	9b08      	ldr	r3, [sp, #32]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80af 	beq.w	8007226 <_dtoa_r+0x8be>
 80070c8:	2e00      	cmp	r6, #0
 80070ca:	dd13      	ble.n	80070f4 <_dtoa_r+0x78c>
 80070cc:	4639      	mov	r1, r7
 80070ce:	4632      	mov	r2, r6
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fc09 	bl	80078e8 <__pow5mult>
 80070d6:	ee18 2a10 	vmov	r2, s16
 80070da:	4601      	mov	r1, r0
 80070dc:	4607      	mov	r7, r0
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 fb58 	bl	8007794 <__multiply>
 80070e4:	ee18 1a10 	vmov	r1, s16
 80070e8:	4680      	mov	r8, r0
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fa84 	bl	80075f8 <_Bfree>
 80070f0:	ee08 8a10 	vmov	s16, r8
 80070f4:	9b07      	ldr	r3, [sp, #28]
 80070f6:	1b9a      	subs	r2, r3, r6
 80070f8:	d006      	beq.n	8007108 <_dtoa_r+0x7a0>
 80070fa:	ee18 1a10 	vmov	r1, s16
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 fbf2 	bl	80078e8 <__pow5mult>
 8007104:	ee08 0a10 	vmov	s16, r0
 8007108:	2101      	movs	r1, #1
 800710a:	4620      	mov	r0, r4
 800710c:	f000 fb2c 	bl	8007768 <__i2b>
 8007110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007112:	2b00      	cmp	r3, #0
 8007114:	4606      	mov	r6, r0
 8007116:	f340 8088 	ble.w	800722a <_dtoa_r+0x8c2>
 800711a:	461a      	mov	r2, r3
 800711c:	4601      	mov	r1, r0
 800711e:	4620      	mov	r0, r4
 8007120:	f000 fbe2 	bl	80078e8 <__pow5mult>
 8007124:	9b06      	ldr	r3, [sp, #24]
 8007126:	2b01      	cmp	r3, #1
 8007128:	4606      	mov	r6, r0
 800712a:	f340 8081 	ble.w	8007230 <_dtoa_r+0x8c8>
 800712e:	f04f 0800 	mov.w	r8, #0
 8007132:	6933      	ldr	r3, [r6, #16]
 8007134:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007138:	6918      	ldr	r0, [r3, #16]
 800713a:	f000 fac5 	bl	80076c8 <__hi0bits>
 800713e:	f1c0 0020 	rsb	r0, r0, #32
 8007142:	9b05      	ldr	r3, [sp, #20]
 8007144:	4418      	add	r0, r3
 8007146:	f010 001f 	ands.w	r0, r0, #31
 800714a:	f000 8092 	beq.w	8007272 <_dtoa_r+0x90a>
 800714e:	f1c0 0320 	rsb	r3, r0, #32
 8007152:	2b04      	cmp	r3, #4
 8007154:	f340 808a 	ble.w	800726c <_dtoa_r+0x904>
 8007158:	f1c0 001c 	rsb	r0, r0, #28
 800715c:	9b04      	ldr	r3, [sp, #16]
 800715e:	4403      	add	r3, r0
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	9b05      	ldr	r3, [sp, #20]
 8007164:	4403      	add	r3, r0
 8007166:	4405      	add	r5, r0
 8007168:	9305      	str	r3, [sp, #20]
 800716a:	9b04      	ldr	r3, [sp, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	dd07      	ble.n	8007180 <_dtoa_r+0x818>
 8007170:	ee18 1a10 	vmov	r1, s16
 8007174:	461a      	mov	r2, r3
 8007176:	4620      	mov	r0, r4
 8007178:	f000 fc10 	bl	800799c <__lshift>
 800717c:	ee08 0a10 	vmov	s16, r0
 8007180:	9b05      	ldr	r3, [sp, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	dd05      	ble.n	8007192 <_dtoa_r+0x82a>
 8007186:	4631      	mov	r1, r6
 8007188:	461a      	mov	r2, r3
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fc06 	bl	800799c <__lshift>
 8007190:	4606      	mov	r6, r0
 8007192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d06e      	beq.n	8007276 <_dtoa_r+0x90e>
 8007198:	ee18 0a10 	vmov	r0, s16
 800719c:	4631      	mov	r1, r6
 800719e:	f000 fc6d 	bl	8007a7c <__mcmp>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	da67      	bge.n	8007276 <_dtoa_r+0x90e>
 80071a6:	9b00      	ldr	r3, [sp, #0]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	ee18 1a10 	vmov	r1, s16
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	220a      	movs	r2, #10
 80071b2:	2300      	movs	r3, #0
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 fa41 	bl	800763c <__multadd>
 80071ba:	9b08      	ldr	r3, [sp, #32]
 80071bc:	ee08 0a10 	vmov	s16, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 81b1 	beq.w	8007528 <_dtoa_r+0xbc0>
 80071c6:	2300      	movs	r3, #0
 80071c8:	4639      	mov	r1, r7
 80071ca:	220a      	movs	r2, #10
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fa35 	bl	800763c <__multadd>
 80071d2:	9b02      	ldr	r3, [sp, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	4607      	mov	r7, r0
 80071d8:	f300 808e 	bgt.w	80072f8 <_dtoa_r+0x990>
 80071dc:	9b06      	ldr	r3, [sp, #24]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	dc51      	bgt.n	8007286 <_dtoa_r+0x91e>
 80071e2:	e089      	b.n	80072f8 <_dtoa_r+0x990>
 80071e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071ea:	e74b      	b.n	8007084 <_dtoa_r+0x71c>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	1e5e      	subs	r6, r3, #1
 80071f0:	9b07      	ldr	r3, [sp, #28]
 80071f2:	42b3      	cmp	r3, r6
 80071f4:	bfbf      	itttt	lt
 80071f6:	9b07      	ldrlt	r3, [sp, #28]
 80071f8:	9607      	strlt	r6, [sp, #28]
 80071fa:	1af2      	sublt	r2, r6, r3
 80071fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80071fe:	bfb6      	itet	lt
 8007200:	189b      	addlt	r3, r3, r2
 8007202:	1b9e      	subge	r6, r3, r6
 8007204:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	bfb8      	it	lt
 800720a:	2600      	movlt	r6, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfb7      	itett	lt
 8007210:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007214:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007218:	1a9d      	sublt	r5, r3, r2
 800721a:	2300      	movlt	r3, #0
 800721c:	e734      	b.n	8007088 <_dtoa_r+0x720>
 800721e:	9e07      	ldr	r6, [sp, #28]
 8007220:	9d04      	ldr	r5, [sp, #16]
 8007222:	9f08      	ldr	r7, [sp, #32]
 8007224:	e73b      	b.n	800709e <_dtoa_r+0x736>
 8007226:	9a07      	ldr	r2, [sp, #28]
 8007228:	e767      	b.n	80070fa <_dtoa_r+0x792>
 800722a:	9b06      	ldr	r3, [sp, #24]
 800722c:	2b01      	cmp	r3, #1
 800722e:	dc18      	bgt.n	8007262 <_dtoa_r+0x8fa>
 8007230:	f1ba 0f00 	cmp.w	sl, #0
 8007234:	d115      	bne.n	8007262 <_dtoa_r+0x8fa>
 8007236:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800723a:	b993      	cbnz	r3, 8007262 <_dtoa_r+0x8fa>
 800723c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007240:	0d1b      	lsrs	r3, r3, #20
 8007242:	051b      	lsls	r3, r3, #20
 8007244:	b183      	cbz	r3, 8007268 <_dtoa_r+0x900>
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	3301      	adds	r3, #1
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	9b05      	ldr	r3, [sp, #20]
 800724e:	3301      	adds	r3, #1
 8007250:	9305      	str	r3, [sp, #20]
 8007252:	f04f 0801 	mov.w	r8, #1
 8007256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007258:	2b00      	cmp	r3, #0
 800725a:	f47f af6a 	bne.w	8007132 <_dtoa_r+0x7ca>
 800725e:	2001      	movs	r0, #1
 8007260:	e76f      	b.n	8007142 <_dtoa_r+0x7da>
 8007262:	f04f 0800 	mov.w	r8, #0
 8007266:	e7f6      	b.n	8007256 <_dtoa_r+0x8ee>
 8007268:	4698      	mov	r8, r3
 800726a:	e7f4      	b.n	8007256 <_dtoa_r+0x8ee>
 800726c:	f43f af7d 	beq.w	800716a <_dtoa_r+0x802>
 8007270:	4618      	mov	r0, r3
 8007272:	301c      	adds	r0, #28
 8007274:	e772      	b.n	800715c <_dtoa_r+0x7f4>
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	dc37      	bgt.n	80072ec <_dtoa_r+0x984>
 800727c:	9b06      	ldr	r3, [sp, #24]
 800727e:	2b02      	cmp	r3, #2
 8007280:	dd34      	ble.n	80072ec <_dtoa_r+0x984>
 8007282:	9b03      	ldr	r3, [sp, #12]
 8007284:	9302      	str	r3, [sp, #8]
 8007286:	9b02      	ldr	r3, [sp, #8]
 8007288:	b96b      	cbnz	r3, 80072a6 <_dtoa_r+0x93e>
 800728a:	4631      	mov	r1, r6
 800728c:	2205      	movs	r2, #5
 800728e:	4620      	mov	r0, r4
 8007290:	f000 f9d4 	bl	800763c <__multadd>
 8007294:	4601      	mov	r1, r0
 8007296:	4606      	mov	r6, r0
 8007298:	ee18 0a10 	vmov	r0, s16
 800729c:	f000 fbee 	bl	8007a7c <__mcmp>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	f73f adbb 	bgt.w	8006e1c <_dtoa_r+0x4b4>
 80072a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a8:	9d01      	ldr	r5, [sp, #4]
 80072aa:	43db      	mvns	r3, r3
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	f04f 0800 	mov.w	r8, #0
 80072b2:	4631      	mov	r1, r6
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 f99f 	bl	80075f8 <_Bfree>
 80072ba:	2f00      	cmp	r7, #0
 80072bc:	f43f aea4 	beq.w	8007008 <_dtoa_r+0x6a0>
 80072c0:	f1b8 0f00 	cmp.w	r8, #0
 80072c4:	d005      	beq.n	80072d2 <_dtoa_r+0x96a>
 80072c6:	45b8      	cmp	r8, r7
 80072c8:	d003      	beq.n	80072d2 <_dtoa_r+0x96a>
 80072ca:	4641      	mov	r1, r8
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 f993 	bl	80075f8 <_Bfree>
 80072d2:	4639      	mov	r1, r7
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 f98f 	bl	80075f8 <_Bfree>
 80072da:	e695      	b.n	8007008 <_dtoa_r+0x6a0>
 80072dc:	2600      	movs	r6, #0
 80072de:	4637      	mov	r7, r6
 80072e0:	e7e1      	b.n	80072a6 <_dtoa_r+0x93e>
 80072e2:	9700      	str	r7, [sp, #0]
 80072e4:	4637      	mov	r7, r6
 80072e6:	e599      	b.n	8006e1c <_dtoa_r+0x4b4>
 80072e8:	40240000 	.word	0x40240000
 80072ec:	9b08      	ldr	r3, [sp, #32]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 80ca 	beq.w	8007488 <_dtoa_r+0xb20>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	9302      	str	r3, [sp, #8]
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	dd05      	ble.n	8007308 <_dtoa_r+0x9a0>
 80072fc:	4639      	mov	r1, r7
 80072fe:	462a      	mov	r2, r5
 8007300:	4620      	mov	r0, r4
 8007302:	f000 fb4b 	bl	800799c <__lshift>
 8007306:	4607      	mov	r7, r0
 8007308:	f1b8 0f00 	cmp.w	r8, #0
 800730c:	d05b      	beq.n	80073c6 <_dtoa_r+0xa5e>
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4620      	mov	r0, r4
 8007312:	f000 f931 	bl	8007578 <_Balloc>
 8007316:	4605      	mov	r5, r0
 8007318:	b928      	cbnz	r0, 8007326 <_dtoa_r+0x9be>
 800731a:	4b87      	ldr	r3, [pc, #540]	; (8007538 <_dtoa_r+0xbd0>)
 800731c:	4602      	mov	r2, r0
 800731e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007322:	f7ff bb3b 	b.w	800699c <_dtoa_r+0x34>
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	3202      	adds	r2, #2
 800732a:	0092      	lsls	r2, r2, #2
 800732c:	f107 010c 	add.w	r1, r7, #12
 8007330:	300c      	adds	r0, #12
 8007332:	f000 f913 	bl	800755c <memcpy>
 8007336:	2201      	movs	r2, #1
 8007338:	4629      	mov	r1, r5
 800733a:	4620      	mov	r0, r4
 800733c:	f000 fb2e 	bl	800799c <__lshift>
 8007340:	9b01      	ldr	r3, [sp, #4]
 8007342:	f103 0901 	add.w	r9, r3, #1
 8007346:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800734a:	4413      	add	r3, r2
 800734c:	9305      	str	r3, [sp, #20]
 800734e:	f00a 0301 	and.w	r3, sl, #1
 8007352:	46b8      	mov	r8, r7
 8007354:	9304      	str	r3, [sp, #16]
 8007356:	4607      	mov	r7, r0
 8007358:	4631      	mov	r1, r6
 800735a:	ee18 0a10 	vmov	r0, s16
 800735e:	f7ff fa75 	bl	800684c <quorem>
 8007362:	4641      	mov	r1, r8
 8007364:	9002      	str	r0, [sp, #8]
 8007366:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800736a:	ee18 0a10 	vmov	r0, s16
 800736e:	f000 fb85 	bl	8007a7c <__mcmp>
 8007372:	463a      	mov	r2, r7
 8007374:	9003      	str	r0, [sp, #12]
 8007376:	4631      	mov	r1, r6
 8007378:	4620      	mov	r0, r4
 800737a:	f000 fb9b 	bl	8007ab4 <__mdiff>
 800737e:	68c2      	ldr	r2, [r0, #12]
 8007380:	f109 3bff 	add.w	fp, r9, #4294967295
 8007384:	4605      	mov	r5, r0
 8007386:	bb02      	cbnz	r2, 80073ca <_dtoa_r+0xa62>
 8007388:	4601      	mov	r1, r0
 800738a:	ee18 0a10 	vmov	r0, s16
 800738e:	f000 fb75 	bl	8007a7c <__mcmp>
 8007392:	4602      	mov	r2, r0
 8007394:	4629      	mov	r1, r5
 8007396:	4620      	mov	r0, r4
 8007398:	9207      	str	r2, [sp, #28]
 800739a:	f000 f92d 	bl	80075f8 <_Bfree>
 800739e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80073a2:	ea43 0102 	orr.w	r1, r3, r2
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	430b      	orrs	r3, r1
 80073aa:	464d      	mov	r5, r9
 80073ac:	d10f      	bne.n	80073ce <_dtoa_r+0xa66>
 80073ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073b2:	d02a      	beq.n	800740a <_dtoa_r+0xaa2>
 80073b4:	9b03      	ldr	r3, [sp, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	dd02      	ble.n	80073c0 <_dtoa_r+0xa58>
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80073c0:	f88b a000 	strb.w	sl, [fp]
 80073c4:	e775      	b.n	80072b2 <_dtoa_r+0x94a>
 80073c6:	4638      	mov	r0, r7
 80073c8:	e7ba      	b.n	8007340 <_dtoa_r+0x9d8>
 80073ca:	2201      	movs	r2, #1
 80073cc:	e7e2      	b.n	8007394 <_dtoa_r+0xa2c>
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	db04      	blt.n	80073de <_dtoa_r+0xa76>
 80073d4:	9906      	ldr	r1, [sp, #24]
 80073d6:	430b      	orrs	r3, r1
 80073d8:	9904      	ldr	r1, [sp, #16]
 80073da:	430b      	orrs	r3, r1
 80073dc:	d122      	bne.n	8007424 <_dtoa_r+0xabc>
 80073de:	2a00      	cmp	r2, #0
 80073e0:	ddee      	ble.n	80073c0 <_dtoa_r+0xa58>
 80073e2:	ee18 1a10 	vmov	r1, s16
 80073e6:	2201      	movs	r2, #1
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fad7 	bl	800799c <__lshift>
 80073ee:	4631      	mov	r1, r6
 80073f0:	ee08 0a10 	vmov	s16, r0
 80073f4:	f000 fb42 	bl	8007a7c <__mcmp>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	dc03      	bgt.n	8007404 <_dtoa_r+0xa9c>
 80073fc:	d1e0      	bne.n	80073c0 <_dtoa_r+0xa58>
 80073fe:	f01a 0f01 	tst.w	sl, #1
 8007402:	d0dd      	beq.n	80073c0 <_dtoa_r+0xa58>
 8007404:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007408:	d1d7      	bne.n	80073ba <_dtoa_r+0xa52>
 800740a:	2339      	movs	r3, #57	; 0x39
 800740c:	f88b 3000 	strb.w	r3, [fp]
 8007410:	462b      	mov	r3, r5
 8007412:	461d      	mov	r5, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800741a:	2a39      	cmp	r2, #57	; 0x39
 800741c:	d071      	beq.n	8007502 <_dtoa_r+0xb9a>
 800741e:	3201      	adds	r2, #1
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e746      	b.n	80072b2 <_dtoa_r+0x94a>
 8007424:	2a00      	cmp	r2, #0
 8007426:	dd07      	ble.n	8007438 <_dtoa_r+0xad0>
 8007428:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800742c:	d0ed      	beq.n	800740a <_dtoa_r+0xaa2>
 800742e:	f10a 0301 	add.w	r3, sl, #1
 8007432:	f88b 3000 	strb.w	r3, [fp]
 8007436:	e73c      	b.n	80072b2 <_dtoa_r+0x94a>
 8007438:	9b05      	ldr	r3, [sp, #20]
 800743a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800743e:	4599      	cmp	r9, r3
 8007440:	d047      	beq.n	80074d2 <_dtoa_r+0xb6a>
 8007442:	ee18 1a10 	vmov	r1, s16
 8007446:	2300      	movs	r3, #0
 8007448:	220a      	movs	r2, #10
 800744a:	4620      	mov	r0, r4
 800744c:	f000 f8f6 	bl	800763c <__multadd>
 8007450:	45b8      	cmp	r8, r7
 8007452:	ee08 0a10 	vmov	s16, r0
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	f04f 020a 	mov.w	r2, #10
 800745e:	4641      	mov	r1, r8
 8007460:	4620      	mov	r0, r4
 8007462:	d106      	bne.n	8007472 <_dtoa_r+0xb0a>
 8007464:	f000 f8ea 	bl	800763c <__multadd>
 8007468:	4680      	mov	r8, r0
 800746a:	4607      	mov	r7, r0
 800746c:	f109 0901 	add.w	r9, r9, #1
 8007470:	e772      	b.n	8007358 <_dtoa_r+0x9f0>
 8007472:	f000 f8e3 	bl	800763c <__multadd>
 8007476:	4639      	mov	r1, r7
 8007478:	4680      	mov	r8, r0
 800747a:	2300      	movs	r3, #0
 800747c:	220a      	movs	r2, #10
 800747e:	4620      	mov	r0, r4
 8007480:	f000 f8dc 	bl	800763c <__multadd>
 8007484:	4607      	mov	r7, r0
 8007486:	e7f1      	b.n	800746c <_dtoa_r+0xb04>
 8007488:	9b03      	ldr	r3, [sp, #12]
 800748a:	9302      	str	r3, [sp, #8]
 800748c:	9d01      	ldr	r5, [sp, #4]
 800748e:	ee18 0a10 	vmov	r0, s16
 8007492:	4631      	mov	r1, r6
 8007494:	f7ff f9da 	bl	800684c <quorem>
 8007498:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	f805 ab01 	strb.w	sl, [r5], #1
 80074a2:	1aea      	subs	r2, r5, r3
 80074a4:	9b02      	ldr	r3, [sp, #8]
 80074a6:	4293      	cmp	r3, r2
 80074a8:	dd09      	ble.n	80074be <_dtoa_r+0xb56>
 80074aa:	ee18 1a10 	vmov	r1, s16
 80074ae:	2300      	movs	r3, #0
 80074b0:	220a      	movs	r2, #10
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 f8c2 	bl	800763c <__multadd>
 80074b8:	ee08 0a10 	vmov	s16, r0
 80074bc:	e7e7      	b.n	800748e <_dtoa_r+0xb26>
 80074be:	9b02      	ldr	r3, [sp, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	bfc8      	it	gt
 80074c4:	461d      	movgt	r5, r3
 80074c6:	9b01      	ldr	r3, [sp, #4]
 80074c8:	bfd8      	it	le
 80074ca:	2501      	movle	r5, #1
 80074cc:	441d      	add	r5, r3
 80074ce:	f04f 0800 	mov.w	r8, #0
 80074d2:	ee18 1a10 	vmov	r1, s16
 80074d6:	2201      	movs	r2, #1
 80074d8:	4620      	mov	r0, r4
 80074da:	f000 fa5f 	bl	800799c <__lshift>
 80074de:	4631      	mov	r1, r6
 80074e0:	ee08 0a10 	vmov	s16, r0
 80074e4:	f000 faca 	bl	8007a7c <__mcmp>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	dc91      	bgt.n	8007410 <_dtoa_r+0xaa8>
 80074ec:	d102      	bne.n	80074f4 <_dtoa_r+0xb8c>
 80074ee:	f01a 0f01 	tst.w	sl, #1
 80074f2:	d18d      	bne.n	8007410 <_dtoa_r+0xaa8>
 80074f4:	462b      	mov	r3, r5
 80074f6:	461d      	mov	r5, r3
 80074f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074fc:	2a30      	cmp	r2, #48	; 0x30
 80074fe:	d0fa      	beq.n	80074f6 <_dtoa_r+0xb8e>
 8007500:	e6d7      	b.n	80072b2 <_dtoa_r+0x94a>
 8007502:	9a01      	ldr	r2, [sp, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	d184      	bne.n	8007412 <_dtoa_r+0xaaa>
 8007508:	9b00      	ldr	r3, [sp, #0]
 800750a:	3301      	adds	r3, #1
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	2331      	movs	r3, #49	; 0x31
 8007510:	7013      	strb	r3, [r2, #0]
 8007512:	e6ce      	b.n	80072b2 <_dtoa_r+0x94a>
 8007514:	4b09      	ldr	r3, [pc, #36]	; (800753c <_dtoa_r+0xbd4>)
 8007516:	f7ff ba95 	b.w	8006a44 <_dtoa_r+0xdc>
 800751a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800751c:	2b00      	cmp	r3, #0
 800751e:	f47f aa6e 	bne.w	80069fe <_dtoa_r+0x96>
 8007522:	4b07      	ldr	r3, [pc, #28]	; (8007540 <_dtoa_r+0xbd8>)
 8007524:	f7ff ba8e 	b.w	8006a44 <_dtoa_r+0xdc>
 8007528:	9b02      	ldr	r3, [sp, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	dcae      	bgt.n	800748c <_dtoa_r+0xb24>
 800752e:	9b06      	ldr	r3, [sp, #24]
 8007530:	2b02      	cmp	r3, #2
 8007532:	f73f aea8 	bgt.w	8007286 <_dtoa_r+0x91e>
 8007536:	e7a9      	b.n	800748c <_dtoa_r+0xb24>
 8007538:	0800a8b7 	.word	0x0800a8b7
 800753c:	0800a814 	.word	0x0800a814
 8007540:	0800a838 	.word	0x0800a838

08007544 <_localeconv_r>:
 8007544:	4800      	ldr	r0, [pc, #0]	; (8007548 <_localeconv_r+0x4>)
 8007546:	4770      	bx	lr
 8007548:	200001dc 	.word	0x200001dc

0800754c <malloc>:
 800754c:	4b02      	ldr	r3, [pc, #8]	; (8007558 <malloc+0xc>)
 800754e:	4601      	mov	r1, r0
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	f000 bc17 	b.w	8007d84 <_malloc_r>
 8007556:	bf00      	nop
 8007558:	20000088 	.word	0x20000088

0800755c <memcpy>:
 800755c:	440a      	add	r2, r1
 800755e:	4291      	cmp	r1, r2
 8007560:	f100 33ff 	add.w	r3, r0, #4294967295
 8007564:	d100      	bne.n	8007568 <memcpy+0xc>
 8007566:	4770      	bx	lr
 8007568:	b510      	push	{r4, lr}
 800756a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800756e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007572:	4291      	cmp	r1, r2
 8007574:	d1f9      	bne.n	800756a <memcpy+0xe>
 8007576:	bd10      	pop	{r4, pc}

08007578 <_Balloc>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800757c:	4604      	mov	r4, r0
 800757e:	460d      	mov	r5, r1
 8007580:	b976      	cbnz	r6, 80075a0 <_Balloc+0x28>
 8007582:	2010      	movs	r0, #16
 8007584:	f7ff ffe2 	bl	800754c <malloc>
 8007588:	4602      	mov	r2, r0
 800758a:	6260      	str	r0, [r4, #36]	; 0x24
 800758c:	b920      	cbnz	r0, 8007598 <_Balloc+0x20>
 800758e:	4b18      	ldr	r3, [pc, #96]	; (80075f0 <_Balloc+0x78>)
 8007590:	4818      	ldr	r0, [pc, #96]	; (80075f4 <_Balloc+0x7c>)
 8007592:	2166      	movs	r1, #102	; 0x66
 8007594:	f000 fdd6 	bl	8008144 <__assert_func>
 8007598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800759c:	6006      	str	r6, [r0, #0]
 800759e:	60c6      	str	r6, [r0, #12]
 80075a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075a2:	68f3      	ldr	r3, [r6, #12]
 80075a4:	b183      	cbz	r3, 80075c8 <_Balloc+0x50>
 80075a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075ae:	b9b8      	cbnz	r0, 80075e0 <_Balloc+0x68>
 80075b0:	2101      	movs	r1, #1
 80075b2:	fa01 f605 	lsl.w	r6, r1, r5
 80075b6:	1d72      	adds	r2, r6, #5
 80075b8:	0092      	lsls	r2, r2, #2
 80075ba:	4620      	mov	r0, r4
 80075bc:	f000 fb60 	bl	8007c80 <_calloc_r>
 80075c0:	b160      	cbz	r0, 80075dc <_Balloc+0x64>
 80075c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075c6:	e00e      	b.n	80075e6 <_Balloc+0x6e>
 80075c8:	2221      	movs	r2, #33	; 0x21
 80075ca:	2104      	movs	r1, #4
 80075cc:	4620      	mov	r0, r4
 80075ce:	f000 fb57 	bl	8007c80 <_calloc_r>
 80075d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d4:	60f0      	str	r0, [r6, #12]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e4      	bne.n	80075a6 <_Balloc+0x2e>
 80075dc:	2000      	movs	r0, #0
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	6802      	ldr	r2, [r0, #0]
 80075e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075e6:	2300      	movs	r3, #0
 80075e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075ec:	e7f7      	b.n	80075de <_Balloc+0x66>
 80075ee:	bf00      	nop
 80075f0:	0800a845 	.word	0x0800a845
 80075f4:	0800a8c8 	.word	0x0800a8c8

080075f8 <_Bfree>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075fc:	4605      	mov	r5, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	b976      	cbnz	r6, 8007620 <_Bfree+0x28>
 8007602:	2010      	movs	r0, #16
 8007604:	f7ff ffa2 	bl	800754c <malloc>
 8007608:	4602      	mov	r2, r0
 800760a:	6268      	str	r0, [r5, #36]	; 0x24
 800760c:	b920      	cbnz	r0, 8007618 <_Bfree+0x20>
 800760e:	4b09      	ldr	r3, [pc, #36]	; (8007634 <_Bfree+0x3c>)
 8007610:	4809      	ldr	r0, [pc, #36]	; (8007638 <_Bfree+0x40>)
 8007612:	218a      	movs	r1, #138	; 0x8a
 8007614:	f000 fd96 	bl	8008144 <__assert_func>
 8007618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800761c:	6006      	str	r6, [r0, #0]
 800761e:	60c6      	str	r6, [r0, #12]
 8007620:	b13c      	cbz	r4, 8007632 <_Bfree+0x3a>
 8007622:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007624:	6862      	ldr	r2, [r4, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800762c:	6021      	str	r1, [r4, #0]
 800762e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	0800a845 	.word	0x0800a845
 8007638:	0800a8c8 	.word	0x0800a8c8

0800763c <__multadd>:
 800763c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007640:	690d      	ldr	r5, [r1, #16]
 8007642:	4607      	mov	r7, r0
 8007644:	460c      	mov	r4, r1
 8007646:	461e      	mov	r6, r3
 8007648:	f101 0c14 	add.w	ip, r1, #20
 800764c:	2000      	movs	r0, #0
 800764e:	f8dc 3000 	ldr.w	r3, [ip]
 8007652:	b299      	uxth	r1, r3
 8007654:	fb02 6101 	mla	r1, r2, r1, r6
 8007658:	0c1e      	lsrs	r6, r3, #16
 800765a:	0c0b      	lsrs	r3, r1, #16
 800765c:	fb02 3306 	mla	r3, r2, r6, r3
 8007660:	b289      	uxth	r1, r1
 8007662:	3001      	adds	r0, #1
 8007664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007668:	4285      	cmp	r5, r0
 800766a:	f84c 1b04 	str.w	r1, [ip], #4
 800766e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007672:	dcec      	bgt.n	800764e <__multadd+0x12>
 8007674:	b30e      	cbz	r6, 80076ba <__multadd+0x7e>
 8007676:	68a3      	ldr	r3, [r4, #8]
 8007678:	42ab      	cmp	r3, r5
 800767a:	dc19      	bgt.n	80076b0 <__multadd+0x74>
 800767c:	6861      	ldr	r1, [r4, #4]
 800767e:	4638      	mov	r0, r7
 8007680:	3101      	adds	r1, #1
 8007682:	f7ff ff79 	bl	8007578 <_Balloc>
 8007686:	4680      	mov	r8, r0
 8007688:	b928      	cbnz	r0, 8007696 <__multadd+0x5a>
 800768a:	4602      	mov	r2, r0
 800768c:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <__multadd+0x84>)
 800768e:	480d      	ldr	r0, [pc, #52]	; (80076c4 <__multadd+0x88>)
 8007690:	21b5      	movs	r1, #181	; 0xb5
 8007692:	f000 fd57 	bl	8008144 <__assert_func>
 8007696:	6922      	ldr	r2, [r4, #16]
 8007698:	3202      	adds	r2, #2
 800769a:	f104 010c 	add.w	r1, r4, #12
 800769e:	0092      	lsls	r2, r2, #2
 80076a0:	300c      	adds	r0, #12
 80076a2:	f7ff ff5b 	bl	800755c <memcpy>
 80076a6:	4621      	mov	r1, r4
 80076a8:	4638      	mov	r0, r7
 80076aa:	f7ff ffa5 	bl	80075f8 <_Bfree>
 80076ae:	4644      	mov	r4, r8
 80076b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076b4:	3501      	adds	r5, #1
 80076b6:	615e      	str	r6, [r3, #20]
 80076b8:	6125      	str	r5, [r4, #16]
 80076ba:	4620      	mov	r0, r4
 80076bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c0:	0800a8b7 	.word	0x0800a8b7
 80076c4:	0800a8c8 	.word	0x0800a8c8

080076c8 <__hi0bits>:
 80076c8:	0c03      	lsrs	r3, r0, #16
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	b9d3      	cbnz	r3, 8007704 <__hi0bits+0x3c>
 80076ce:	0400      	lsls	r0, r0, #16
 80076d0:	2310      	movs	r3, #16
 80076d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076d6:	bf04      	itt	eq
 80076d8:	0200      	lsleq	r0, r0, #8
 80076da:	3308      	addeq	r3, #8
 80076dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076e0:	bf04      	itt	eq
 80076e2:	0100      	lsleq	r0, r0, #4
 80076e4:	3304      	addeq	r3, #4
 80076e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076ea:	bf04      	itt	eq
 80076ec:	0080      	lsleq	r0, r0, #2
 80076ee:	3302      	addeq	r3, #2
 80076f0:	2800      	cmp	r0, #0
 80076f2:	db05      	blt.n	8007700 <__hi0bits+0x38>
 80076f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076f8:	f103 0301 	add.w	r3, r3, #1
 80076fc:	bf08      	it	eq
 80076fe:	2320      	moveq	r3, #32
 8007700:	4618      	mov	r0, r3
 8007702:	4770      	bx	lr
 8007704:	2300      	movs	r3, #0
 8007706:	e7e4      	b.n	80076d2 <__hi0bits+0xa>

08007708 <__lo0bits>:
 8007708:	6803      	ldr	r3, [r0, #0]
 800770a:	f013 0207 	ands.w	r2, r3, #7
 800770e:	4601      	mov	r1, r0
 8007710:	d00b      	beq.n	800772a <__lo0bits+0x22>
 8007712:	07da      	lsls	r2, r3, #31
 8007714:	d423      	bmi.n	800775e <__lo0bits+0x56>
 8007716:	0798      	lsls	r0, r3, #30
 8007718:	bf49      	itett	mi
 800771a:	085b      	lsrmi	r3, r3, #1
 800771c:	089b      	lsrpl	r3, r3, #2
 800771e:	2001      	movmi	r0, #1
 8007720:	600b      	strmi	r3, [r1, #0]
 8007722:	bf5c      	itt	pl
 8007724:	600b      	strpl	r3, [r1, #0]
 8007726:	2002      	movpl	r0, #2
 8007728:	4770      	bx	lr
 800772a:	b298      	uxth	r0, r3
 800772c:	b9a8      	cbnz	r0, 800775a <__lo0bits+0x52>
 800772e:	0c1b      	lsrs	r3, r3, #16
 8007730:	2010      	movs	r0, #16
 8007732:	b2da      	uxtb	r2, r3
 8007734:	b90a      	cbnz	r2, 800773a <__lo0bits+0x32>
 8007736:	3008      	adds	r0, #8
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	071a      	lsls	r2, r3, #28
 800773c:	bf04      	itt	eq
 800773e:	091b      	lsreq	r3, r3, #4
 8007740:	3004      	addeq	r0, #4
 8007742:	079a      	lsls	r2, r3, #30
 8007744:	bf04      	itt	eq
 8007746:	089b      	lsreq	r3, r3, #2
 8007748:	3002      	addeq	r0, #2
 800774a:	07da      	lsls	r2, r3, #31
 800774c:	d403      	bmi.n	8007756 <__lo0bits+0x4e>
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	f100 0001 	add.w	r0, r0, #1
 8007754:	d005      	beq.n	8007762 <__lo0bits+0x5a>
 8007756:	600b      	str	r3, [r1, #0]
 8007758:	4770      	bx	lr
 800775a:	4610      	mov	r0, r2
 800775c:	e7e9      	b.n	8007732 <__lo0bits+0x2a>
 800775e:	2000      	movs	r0, #0
 8007760:	4770      	bx	lr
 8007762:	2020      	movs	r0, #32
 8007764:	4770      	bx	lr
	...

08007768 <__i2b>:
 8007768:	b510      	push	{r4, lr}
 800776a:	460c      	mov	r4, r1
 800776c:	2101      	movs	r1, #1
 800776e:	f7ff ff03 	bl	8007578 <_Balloc>
 8007772:	4602      	mov	r2, r0
 8007774:	b928      	cbnz	r0, 8007782 <__i2b+0x1a>
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <__i2b+0x24>)
 8007778:	4805      	ldr	r0, [pc, #20]	; (8007790 <__i2b+0x28>)
 800777a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800777e:	f000 fce1 	bl	8008144 <__assert_func>
 8007782:	2301      	movs	r3, #1
 8007784:	6144      	str	r4, [r0, #20]
 8007786:	6103      	str	r3, [r0, #16]
 8007788:	bd10      	pop	{r4, pc}
 800778a:	bf00      	nop
 800778c:	0800a8b7 	.word	0x0800a8b7
 8007790:	0800a8c8 	.word	0x0800a8c8

08007794 <__multiply>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	4691      	mov	r9, r2
 800779a:	690a      	ldr	r2, [r1, #16]
 800779c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	bfb8      	it	lt
 80077a4:	460b      	movlt	r3, r1
 80077a6:	460c      	mov	r4, r1
 80077a8:	bfbc      	itt	lt
 80077aa:	464c      	movlt	r4, r9
 80077ac:	4699      	movlt	r9, r3
 80077ae:	6927      	ldr	r7, [r4, #16]
 80077b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077b4:	68a3      	ldr	r3, [r4, #8]
 80077b6:	6861      	ldr	r1, [r4, #4]
 80077b8:	eb07 060a 	add.w	r6, r7, sl
 80077bc:	42b3      	cmp	r3, r6
 80077be:	b085      	sub	sp, #20
 80077c0:	bfb8      	it	lt
 80077c2:	3101      	addlt	r1, #1
 80077c4:	f7ff fed8 	bl	8007578 <_Balloc>
 80077c8:	b930      	cbnz	r0, 80077d8 <__multiply+0x44>
 80077ca:	4602      	mov	r2, r0
 80077cc:	4b44      	ldr	r3, [pc, #272]	; (80078e0 <__multiply+0x14c>)
 80077ce:	4845      	ldr	r0, [pc, #276]	; (80078e4 <__multiply+0x150>)
 80077d0:	f240 115d 	movw	r1, #349	; 0x15d
 80077d4:	f000 fcb6 	bl	8008144 <__assert_func>
 80077d8:	f100 0514 	add.w	r5, r0, #20
 80077dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077e0:	462b      	mov	r3, r5
 80077e2:	2200      	movs	r2, #0
 80077e4:	4543      	cmp	r3, r8
 80077e6:	d321      	bcc.n	800782c <__multiply+0x98>
 80077e8:	f104 0314 	add.w	r3, r4, #20
 80077ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077f0:	f109 0314 	add.w	r3, r9, #20
 80077f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077f8:	9202      	str	r2, [sp, #8]
 80077fa:	1b3a      	subs	r2, r7, r4
 80077fc:	3a15      	subs	r2, #21
 80077fe:	f022 0203 	bic.w	r2, r2, #3
 8007802:	3204      	adds	r2, #4
 8007804:	f104 0115 	add.w	r1, r4, #21
 8007808:	428f      	cmp	r7, r1
 800780a:	bf38      	it	cc
 800780c:	2204      	movcc	r2, #4
 800780e:	9201      	str	r2, [sp, #4]
 8007810:	9a02      	ldr	r2, [sp, #8]
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	429a      	cmp	r2, r3
 8007816:	d80c      	bhi.n	8007832 <__multiply+0x9e>
 8007818:	2e00      	cmp	r6, #0
 800781a:	dd03      	ble.n	8007824 <__multiply+0x90>
 800781c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007820:	2b00      	cmp	r3, #0
 8007822:	d05a      	beq.n	80078da <__multiply+0x146>
 8007824:	6106      	str	r6, [r0, #16]
 8007826:	b005      	add	sp, #20
 8007828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782c:	f843 2b04 	str.w	r2, [r3], #4
 8007830:	e7d8      	b.n	80077e4 <__multiply+0x50>
 8007832:	f8b3 a000 	ldrh.w	sl, [r3]
 8007836:	f1ba 0f00 	cmp.w	sl, #0
 800783a:	d024      	beq.n	8007886 <__multiply+0xf2>
 800783c:	f104 0e14 	add.w	lr, r4, #20
 8007840:	46a9      	mov	r9, r5
 8007842:	f04f 0c00 	mov.w	ip, #0
 8007846:	f85e 2b04 	ldr.w	r2, [lr], #4
 800784a:	f8d9 1000 	ldr.w	r1, [r9]
 800784e:	fa1f fb82 	uxth.w	fp, r2
 8007852:	b289      	uxth	r1, r1
 8007854:	fb0a 110b 	mla	r1, sl, fp, r1
 8007858:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800785c:	f8d9 2000 	ldr.w	r2, [r9]
 8007860:	4461      	add	r1, ip
 8007862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007866:	fb0a c20b 	mla	r2, sl, fp, ip
 800786a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800786e:	b289      	uxth	r1, r1
 8007870:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007874:	4577      	cmp	r7, lr
 8007876:	f849 1b04 	str.w	r1, [r9], #4
 800787a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800787e:	d8e2      	bhi.n	8007846 <__multiply+0xb2>
 8007880:	9a01      	ldr	r2, [sp, #4]
 8007882:	f845 c002 	str.w	ip, [r5, r2]
 8007886:	9a03      	ldr	r2, [sp, #12]
 8007888:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800788c:	3304      	adds	r3, #4
 800788e:	f1b9 0f00 	cmp.w	r9, #0
 8007892:	d020      	beq.n	80078d6 <__multiply+0x142>
 8007894:	6829      	ldr	r1, [r5, #0]
 8007896:	f104 0c14 	add.w	ip, r4, #20
 800789a:	46ae      	mov	lr, r5
 800789c:	f04f 0a00 	mov.w	sl, #0
 80078a0:	f8bc b000 	ldrh.w	fp, [ip]
 80078a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078a8:	fb09 220b 	mla	r2, r9, fp, r2
 80078ac:	4492      	add	sl, r2
 80078ae:	b289      	uxth	r1, r1
 80078b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80078b4:	f84e 1b04 	str.w	r1, [lr], #4
 80078b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80078bc:	f8be 1000 	ldrh.w	r1, [lr]
 80078c0:	0c12      	lsrs	r2, r2, #16
 80078c2:	fb09 1102 	mla	r1, r9, r2, r1
 80078c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80078ca:	4567      	cmp	r7, ip
 80078cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078d0:	d8e6      	bhi.n	80078a0 <__multiply+0x10c>
 80078d2:	9a01      	ldr	r2, [sp, #4]
 80078d4:	50a9      	str	r1, [r5, r2]
 80078d6:	3504      	adds	r5, #4
 80078d8:	e79a      	b.n	8007810 <__multiply+0x7c>
 80078da:	3e01      	subs	r6, #1
 80078dc:	e79c      	b.n	8007818 <__multiply+0x84>
 80078de:	bf00      	nop
 80078e0:	0800a8b7 	.word	0x0800a8b7
 80078e4:	0800a8c8 	.word	0x0800a8c8

080078e8 <__pow5mult>:
 80078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ec:	4615      	mov	r5, r2
 80078ee:	f012 0203 	ands.w	r2, r2, #3
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	d007      	beq.n	8007908 <__pow5mult+0x20>
 80078f8:	4c25      	ldr	r4, [pc, #148]	; (8007990 <__pow5mult+0xa8>)
 80078fa:	3a01      	subs	r2, #1
 80078fc:	2300      	movs	r3, #0
 80078fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007902:	f7ff fe9b 	bl	800763c <__multadd>
 8007906:	4607      	mov	r7, r0
 8007908:	10ad      	asrs	r5, r5, #2
 800790a:	d03d      	beq.n	8007988 <__pow5mult+0xa0>
 800790c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800790e:	b97c      	cbnz	r4, 8007930 <__pow5mult+0x48>
 8007910:	2010      	movs	r0, #16
 8007912:	f7ff fe1b 	bl	800754c <malloc>
 8007916:	4602      	mov	r2, r0
 8007918:	6270      	str	r0, [r6, #36]	; 0x24
 800791a:	b928      	cbnz	r0, 8007928 <__pow5mult+0x40>
 800791c:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <__pow5mult+0xac>)
 800791e:	481e      	ldr	r0, [pc, #120]	; (8007998 <__pow5mult+0xb0>)
 8007920:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007924:	f000 fc0e 	bl	8008144 <__assert_func>
 8007928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800792c:	6004      	str	r4, [r0, #0]
 800792e:	60c4      	str	r4, [r0, #12]
 8007930:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007938:	b94c      	cbnz	r4, 800794e <__pow5mult+0x66>
 800793a:	f240 2171 	movw	r1, #625	; 0x271
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ff12 	bl	8007768 <__i2b>
 8007944:	2300      	movs	r3, #0
 8007946:	f8c8 0008 	str.w	r0, [r8, #8]
 800794a:	4604      	mov	r4, r0
 800794c:	6003      	str	r3, [r0, #0]
 800794e:	f04f 0900 	mov.w	r9, #0
 8007952:	07eb      	lsls	r3, r5, #31
 8007954:	d50a      	bpl.n	800796c <__pow5mult+0x84>
 8007956:	4639      	mov	r1, r7
 8007958:	4622      	mov	r2, r4
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ff1a 	bl	8007794 <__multiply>
 8007960:	4639      	mov	r1, r7
 8007962:	4680      	mov	r8, r0
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff fe47 	bl	80075f8 <_Bfree>
 800796a:	4647      	mov	r7, r8
 800796c:	106d      	asrs	r5, r5, #1
 800796e:	d00b      	beq.n	8007988 <__pow5mult+0xa0>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	b938      	cbnz	r0, 8007984 <__pow5mult+0x9c>
 8007974:	4622      	mov	r2, r4
 8007976:	4621      	mov	r1, r4
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff ff0b 	bl	8007794 <__multiply>
 800797e:	6020      	str	r0, [r4, #0]
 8007980:	f8c0 9000 	str.w	r9, [r0]
 8007984:	4604      	mov	r4, r0
 8007986:	e7e4      	b.n	8007952 <__pow5mult+0x6a>
 8007988:	4638      	mov	r0, r7
 800798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798e:	bf00      	nop
 8007990:	0800aa18 	.word	0x0800aa18
 8007994:	0800a845 	.word	0x0800a845
 8007998:	0800a8c8 	.word	0x0800a8c8

0800799c <__lshift>:
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	460c      	mov	r4, r1
 80079a2:	6849      	ldr	r1, [r1, #4]
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	4607      	mov	r7, r0
 80079ae:	4691      	mov	r9, r2
 80079b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079b4:	f108 0601 	add.w	r6, r8, #1
 80079b8:	42b3      	cmp	r3, r6
 80079ba:	db0b      	blt.n	80079d4 <__lshift+0x38>
 80079bc:	4638      	mov	r0, r7
 80079be:	f7ff fddb 	bl	8007578 <_Balloc>
 80079c2:	4605      	mov	r5, r0
 80079c4:	b948      	cbnz	r0, 80079da <__lshift+0x3e>
 80079c6:	4602      	mov	r2, r0
 80079c8:	4b2a      	ldr	r3, [pc, #168]	; (8007a74 <__lshift+0xd8>)
 80079ca:	482b      	ldr	r0, [pc, #172]	; (8007a78 <__lshift+0xdc>)
 80079cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079d0:	f000 fbb8 	bl	8008144 <__assert_func>
 80079d4:	3101      	adds	r1, #1
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	e7ee      	b.n	80079b8 <__lshift+0x1c>
 80079da:	2300      	movs	r3, #0
 80079dc:	f100 0114 	add.w	r1, r0, #20
 80079e0:	f100 0210 	add.w	r2, r0, #16
 80079e4:	4618      	mov	r0, r3
 80079e6:	4553      	cmp	r3, sl
 80079e8:	db37      	blt.n	8007a5a <__lshift+0xbe>
 80079ea:	6920      	ldr	r0, [r4, #16]
 80079ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079f0:	f104 0314 	add.w	r3, r4, #20
 80079f4:	f019 091f 	ands.w	r9, r9, #31
 80079f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a00:	d02f      	beq.n	8007a62 <__lshift+0xc6>
 8007a02:	f1c9 0e20 	rsb	lr, r9, #32
 8007a06:	468a      	mov	sl, r1
 8007a08:	f04f 0c00 	mov.w	ip, #0
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	fa02 f209 	lsl.w	r2, r2, r9
 8007a12:	ea42 020c 	orr.w	r2, r2, ip
 8007a16:	f84a 2b04 	str.w	r2, [sl], #4
 8007a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a1e:	4298      	cmp	r0, r3
 8007a20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a24:	d8f2      	bhi.n	8007a0c <__lshift+0x70>
 8007a26:	1b03      	subs	r3, r0, r4
 8007a28:	3b15      	subs	r3, #21
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	3304      	adds	r3, #4
 8007a30:	f104 0215 	add.w	r2, r4, #21
 8007a34:	4290      	cmp	r0, r2
 8007a36:	bf38      	it	cc
 8007a38:	2304      	movcc	r3, #4
 8007a3a:	f841 c003 	str.w	ip, [r1, r3]
 8007a3e:	f1bc 0f00 	cmp.w	ip, #0
 8007a42:	d001      	beq.n	8007a48 <__lshift+0xac>
 8007a44:	f108 0602 	add.w	r6, r8, #2
 8007a48:	3e01      	subs	r6, #1
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	612e      	str	r6, [r5, #16]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	f7ff fdd2 	bl	80075f8 <_Bfree>
 8007a54:	4628      	mov	r0, r5
 8007a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a5e:	3301      	adds	r3, #1
 8007a60:	e7c1      	b.n	80079e6 <__lshift+0x4a>
 8007a62:	3904      	subs	r1, #4
 8007a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a68:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a6c:	4298      	cmp	r0, r3
 8007a6e:	d8f9      	bhi.n	8007a64 <__lshift+0xc8>
 8007a70:	e7ea      	b.n	8007a48 <__lshift+0xac>
 8007a72:	bf00      	nop
 8007a74:	0800a8b7 	.word	0x0800a8b7
 8007a78:	0800a8c8 	.word	0x0800a8c8

08007a7c <__mcmp>:
 8007a7c:	b530      	push	{r4, r5, lr}
 8007a7e:	6902      	ldr	r2, [r0, #16]
 8007a80:	690c      	ldr	r4, [r1, #16]
 8007a82:	1b12      	subs	r2, r2, r4
 8007a84:	d10e      	bne.n	8007aa4 <__mcmp+0x28>
 8007a86:	f100 0314 	add.w	r3, r0, #20
 8007a8a:	3114      	adds	r1, #20
 8007a8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a9c:	42a5      	cmp	r5, r4
 8007a9e:	d003      	beq.n	8007aa8 <__mcmp+0x2c>
 8007aa0:	d305      	bcc.n	8007aae <__mcmp+0x32>
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	bd30      	pop	{r4, r5, pc}
 8007aa8:	4283      	cmp	r3, r0
 8007aaa:	d3f3      	bcc.n	8007a94 <__mcmp+0x18>
 8007aac:	e7fa      	b.n	8007aa4 <__mcmp+0x28>
 8007aae:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab2:	e7f7      	b.n	8007aa4 <__mcmp+0x28>

08007ab4 <__mdiff>:
 8007ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	460c      	mov	r4, r1
 8007aba:	4606      	mov	r6, r0
 8007abc:	4611      	mov	r1, r2
 8007abe:	4620      	mov	r0, r4
 8007ac0:	4690      	mov	r8, r2
 8007ac2:	f7ff ffdb 	bl	8007a7c <__mcmp>
 8007ac6:	1e05      	subs	r5, r0, #0
 8007ac8:	d110      	bne.n	8007aec <__mdiff+0x38>
 8007aca:	4629      	mov	r1, r5
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff fd53 	bl	8007578 <_Balloc>
 8007ad2:	b930      	cbnz	r0, 8007ae2 <__mdiff+0x2e>
 8007ad4:	4b3a      	ldr	r3, [pc, #232]	; (8007bc0 <__mdiff+0x10c>)
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	f240 2132 	movw	r1, #562	; 0x232
 8007adc:	4839      	ldr	r0, [pc, #228]	; (8007bc4 <__mdiff+0x110>)
 8007ade:	f000 fb31 	bl	8008144 <__assert_func>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aec:	bfa4      	itt	ge
 8007aee:	4643      	movge	r3, r8
 8007af0:	46a0      	movge	r8, r4
 8007af2:	4630      	mov	r0, r6
 8007af4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007af8:	bfa6      	itte	ge
 8007afa:	461c      	movge	r4, r3
 8007afc:	2500      	movge	r5, #0
 8007afe:	2501      	movlt	r5, #1
 8007b00:	f7ff fd3a 	bl	8007578 <_Balloc>
 8007b04:	b920      	cbnz	r0, 8007b10 <__mdiff+0x5c>
 8007b06:	4b2e      	ldr	r3, [pc, #184]	; (8007bc0 <__mdiff+0x10c>)
 8007b08:	4602      	mov	r2, r0
 8007b0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b0e:	e7e5      	b.n	8007adc <__mdiff+0x28>
 8007b10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b14:	6926      	ldr	r6, [r4, #16]
 8007b16:	60c5      	str	r5, [r0, #12]
 8007b18:	f104 0914 	add.w	r9, r4, #20
 8007b1c:	f108 0514 	add.w	r5, r8, #20
 8007b20:	f100 0e14 	add.w	lr, r0, #20
 8007b24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b2c:	f108 0210 	add.w	r2, r8, #16
 8007b30:	46f2      	mov	sl, lr
 8007b32:	2100      	movs	r1, #0
 8007b34:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b3c:	fa1f f883 	uxth.w	r8, r3
 8007b40:	fa11 f18b 	uxtah	r1, r1, fp
 8007b44:	0c1b      	lsrs	r3, r3, #16
 8007b46:	eba1 0808 	sub.w	r8, r1, r8
 8007b4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b52:	fa1f f888 	uxth.w	r8, r8
 8007b56:	1419      	asrs	r1, r3, #16
 8007b58:	454e      	cmp	r6, r9
 8007b5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b5e:	f84a 3b04 	str.w	r3, [sl], #4
 8007b62:	d8e7      	bhi.n	8007b34 <__mdiff+0x80>
 8007b64:	1b33      	subs	r3, r6, r4
 8007b66:	3b15      	subs	r3, #21
 8007b68:	f023 0303 	bic.w	r3, r3, #3
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	3415      	adds	r4, #21
 8007b70:	42a6      	cmp	r6, r4
 8007b72:	bf38      	it	cc
 8007b74:	2304      	movcc	r3, #4
 8007b76:	441d      	add	r5, r3
 8007b78:	4473      	add	r3, lr
 8007b7a:	469e      	mov	lr, r3
 8007b7c:	462e      	mov	r6, r5
 8007b7e:	4566      	cmp	r6, ip
 8007b80:	d30e      	bcc.n	8007ba0 <__mdiff+0xec>
 8007b82:	f10c 0203 	add.w	r2, ip, #3
 8007b86:	1b52      	subs	r2, r2, r5
 8007b88:	f022 0203 	bic.w	r2, r2, #3
 8007b8c:	3d03      	subs	r5, #3
 8007b8e:	45ac      	cmp	ip, r5
 8007b90:	bf38      	it	cc
 8007b92:	2200      	movcc	r2, #0
 8007b94:	441a      	add	r2, r3
 8007b96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b9a:	b17b      	cbz	r3, 8007bbc <__mdiff+0x108>
 8007b9c:	6107      	str	r7, [r0, #16]
 8007b9e:	e7a3      	b.n	8007ae8 <__mdiff+0x34>
 8007ba0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ba4:	fa11 f288 	uxtah	r2, r1, r8
 8007ba8:	1414      	asrs	r4, r2, #16
 8007baa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bae:	b292      	uxth	r2, r2
 8007bb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007bb4:	f84e 2b04 	str.w	r2, [lr], #4
 8007bb8:	1421      	asrs	r1, r4, #16
 8007bba:	e7e0      	b.n	8007b7e <__mdiff+0xca>
 8007bbc:	3f01      	subs	r7, #1
 8007bbe:	e7ea      	b.n	8007b96 <__mdiff+0xe2>
 8007bc0:	0800a8b7 	.word	0x0800a8b7
 8007bc4:	0800a8c8 	.word	0x0800a8c8

08007bc8 <__d2b>:
 8007bc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bcc:	4689      	mov	r9, r1
 8007bce:	2101      	movs	r1, #1
 8007bd0:	ec57 6b10 	vmov	r6, r7, d0
 8007bd4:	4690      	mov	r8, r2
 8007bd6:	f7ff fccf 	bl	8007578 <_Balloc>
 8007bda:	4604      	mov	r4, r0
 8007bdc:	b930      	cbnz	r0, 8007bec <__d2b+0x24>
 8007bde:	4602      	mov	r2, r0
 8007be0:	4b25      	ldr	r3, [pc, #148]	; (8007c78 <__d2b+0xb0>)
 8007be2:	4826      	ldr	r0, [pc, #152]	; (8007c7c <__d2b+0xb4>)
 8007be4:	f240 310a 	movw	r1, #778	; 0x30a
 8007be8:	f000 faac 	bl	8008144 <__assert_func>
 8007bec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bf4:	bb35      	cbnz	r5, 8007c44 <__d2b+0x7c>
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	d028      	beq.n	8007c4e <__d2b+0x86>
 8007bfc:	4668      	mov	r0, sp
 8007bfe:	9600      	str	r6, [sp, #0]
 8007c00:	f7ff fd82 	bl	8007708 <__lo0bits>
 8007c04:	9900      	ldr	r1, [sp, #0]
 8007c06:	b300      	cbz	r0, 8007c4a <__d2b+0x82>
 8007c08:	9a01      	ldr	r2, [sp, #4]
 8007c0a:	f1c0 0320 	rsb	r3, r0, #32
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	430b      	orrs	r3, r1
 8007c14:	40c2      	lsrs	r2, r0
 8007c16:	6163      	str	r3, [r4, #20]
 8007c18:	9201      	str	r2, [sp, #4]
 8007c1a:	9b01      	ldr	r3, [sp, #4]
 8007c1c:	61a3      	str	r3, [r4, #24]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bf14      	ite	ne
 8007c22:	2202      	movne	r2, #2
 8007c24:	2201      	moveq	r2, #1
 8007c26:	6122      	str	r2, [r4, #16]
 8007c28:	b1d5      	cbz	r5, 8007c60 <__d2b+0x98>
 8007c2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c2e:	4405      	add	r5, r0
 8007c30:	f8c9 5000 	str.w	r5, [r9]
 8007c34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c38:	f8c8 0000 	str.w	r0, [r8]
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	b003      	add	sp, #12
 8007c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c48:	e7d5      	b.n	8007bf6 <__d2b+0x2e>
 8007c4a:	6161      	str	r1, [r4, #20]
 8007c4c:	e7e5      	b.n	8007c1a <__d2b+0x52>
 8007c4e:	a801      	add	r0, sp, #4
 8007c50:	f7ff fd5a 	bl	8007708 <__lo0bits>
 8007c54:	9b01      	ldr	r3, [sp, #4]
 8007c56:	6163      	str	r3, [r4, #20]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	6122      	str	r2, [r4, #16]
 8007c5c:	3020      	adds	r0, #32
 8007c5e:	e7e3      	b.n	8007c28 <__d2b+0x60>
 8007c60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c68:	f8c9 0000 	str.w	r0, [r9]
 8007c6c:	6918      	ldr	r0, [r3, #16]
 8007c6e:	f7ff fd2b 	bl	80076c8 <__hi0bits>
 8007c72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c76:	e7df      	b.n	8007c38 <__d2b+0x70>
 8007c78:	0800a8b7 	.word	0x0800a8b7
 8007c7c:	0800a8c8 	.word	0x0800a8c8

08007c80 <_calloc_r>:
 8007c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c82:	fba1 2402 	umull	r2, r4, r1, r2
 8007c86:	b94c      	cbnz	r4, 8007c9c <_calloc_r+0x1c>
 8007c88:	4611      	mov	r1, r2
 8007c8a:	9201      	str	r2, [sp, #4]
 8007c8c:	f000 f87a 	bl	8007d84 <_malloc_r>
 8007c90:	9a01      	ldr	r2, [sp, #4]
 8007c92:	4605      	mov	r5, r0
 8007c94:	b930      	cbnz	r0, 8007ca4 <_calloc_r+0x24>
 8007c96:	4628      	mov	r0, r5
 8007c98:	b003      	add	sp, #12
 8007c9a:	bd30      	pop	{r4, r5, pc}
 8007c9c:	220c      	movs	r2, #12
 8007c9e:	6002      	str	r2, [r0, #0]
 8007ca0:	2500      	movs	r5, #0
 8007ca2:	e7f8      	b.n	8007c96 <_calloc_r+0x16>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	f7fe f93f 	bl	8005f28 <memset>
 8007caa:	e7f4      	b.n	8007c96 <_calloc_r+0x16>

08007cac <_free_r>:
 8007cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	d044      	beq.n	8007d3c <_free_r+0x90>
 8007cb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb6:	9001      	str	r0, [sp, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f1a1 0404 	sub.w	r4, r1, #4
 8007cbe:	bfb8      	it	lt
 8007cc0:	18e4      	addlt	r4, r4, r3
 8007cc2:	f000 fa9b 	bl	80081fc <__malloc_lock>
 8007cc6:	4a1e      	ldr	r2, [pc, #120]	; (8007d40 <_free_r+0x94>)
 8007cc8:	9801      	ldr	r0, [sp, #4]
 8007cca:	6813      	ldr	r3, [r2, #0]
 8007ccc:	b933      	cbnz	r3, 8007cdc <_free_r+0x30>
 8007cce:	6063      	str	r3, [r4, #4]
 8007cd0:	6014      	str	r4, [r2, #0]
 8007cd2:	b003      	add	sp, #12
 8007cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cd8:	f000 ba96 	b.w	8008208 <__malloc_unlock>
 8007cdc:	42a3      	cmp	r3, r4
 8007cde:	d908      	bls.n	8007cf2 <_free_r+0x46>
 8007ce0:	6825      	ldr	r5, [r4, #0]
 8007ce2:	1961      	adds	r1, r4, r5
 8007ce4:	428b      	cmp	r3, r1
 8007ce6:	bf01      	itttt	eq
 8007ce8:	6819      	ldreq	r1, [r3, #0]
 8007cea:	685b      	ldreq	r3, [r3, #4]
 8007cec:	1949      	addeq	r1, r1, r5
 8007cee:	6021      	streq	r1, [r4, #0]
 8007cf0:	e7ed      	b.n	8007cce <_free_r+0x22>
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	b10b      	cbz	r3, 8007cfc <_free_r+0x50>
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	d9fa      	bls.n	8007cf2 <_free_r+0x46>
 8007cfc:	6811      	ldr	r1, [r2, #0]
 8007cfe:	1855      	adds	r5, r2, r1
 8007d00:	42a5      	cmp	r5, r4
 8007d02:	d10b      	bne.n	8007d1c <_free_r+0x70>
 8007d04:	6824      	ldr	r4, [r4, #0]
 8007d06:	4421      	add	r1, r4
 8007d08:	1854      	adds	r4, r2, r1
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	6011      	str	r1, [r2, #0]
 8007d0e:	d1e0      	bne.n	8007cd2 <_free_r+0x26>
 8007d10:	681c      	ldr	r4, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	6053      	str	r3, [r2, #4]
 8007d16:	4421      	add	r1, r4
 8007d18:	6011      	str	r1, [r2, #0]
 8007d1a:	e7da      	b.n	8007cd2 <_free_r+0x26>
 8007d1c:	d902      	bls.n	8007d24 <_free_r+0x78>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	6003      	str	r3, [r0, #0]
 8007d22:	e7d6      	b.n	8007cd2 <_free_r+0x26>
 8007d24:	6825      	ldr	r5, [r4, #0]
 8007d26:	1961      	adds	r1, r4, r5
 8007d28:	428b      	cmp	r3, r1
 8007d2a:	bf04      	itt	eq
 8007d2c:	6819      	ldreq	r1, [r3, #0]
 8007d2e:	685b      	ldreq	r3, [r3, #4]
 8007d30:	6063      	str	r3, [r4, #4]
 8007d32:	bf04      	itt	eq
 8007d34:	1949      	addeq	r1, r1, r5
 8007d36:	6021      	streq	r1, [r4, #0]
 8007d38:	6054      	str	r4, [r2, #4]
 8007d3a:	e7ca      	b.n	8007cd2 <_free_r+0x26>
 8007d3c:	b003      	add	sp, #12
 8007d3e:	bd30      	pop	{r4, r5, pc}
 8007d40:	200005a8 	.word	0x200005a8

08007d44 <sbrk_aligned>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4e0e      	ldr	r6, [pc, #56]	; (8007d80 <sbrk_aligned+0x3c>)
 8007d48:	460c      	mov	r4, r1
 8007d4a:	6831      	ldr	r1, [r6, #0]
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	b911      	cbnz	r1, 8007d56 <sbrk_aligned+0x12>
 8007d50:	f000 f9e8 	bl	8008124 <_sbrk_r>
 8007d54:	6030      	str	r0, [r6, #0]
 8007d56:	4621      	mov	r1, r4
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f000 f9e3 	bl	8008124 <_sbrk_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	d00a      	beq.n	8007d78 <sbrk_aligned+0x34>
 8007d62:	1cc4      	adds	r4, r0, #3
 8007d64:	f024 0403 	bic.w	r4, r4, #3
 8007d68:	42a0      	cmp	r0, r4
 8007d6a:	d007      	beq.n	8007d7c <sbrk_aligned+0x38>
 8007d6c:	1a21      	subs	r1, r4, r0
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 f9d8 	bl	8008124 <_sbrk_r>
 8007d74:	3001      	adds	r0, #1
 8007d76:	d101      	bne.n	8007d7c <sbrk_aligned+0x38>
 8007d78:	f04f 34ff 	mov.w	r4, #4294967295
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	200005ac 	.word	0x200005ac

08007d84 <_malloc_r>:
 8007d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d88:	1ccd      	adds	r5, r1, #3
 8007d8a:	f025 0503 	bic.w	r5, r5, #3
 8007d8e:	3508      	adds	r5, #8
 8007d90:	2d0c      	cmp	r5, #12
 8007d92:	bf38      	it	cc
 8007d94:	250c      	movcc	r5, #12
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	4607      	mov	r7, r0
 8007d9a:	db01      	blt.n	8007da0 <_malloc_r+0x1c>
 8007d9c:	42a9      	cmp	r1, r5
 8007d9e:	d905      	bls.n	8007dac <_malloc_r+0x28>
 8007da0:	230c      	movs	r3, #12
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	2600      	movs	r6, #0
 8007da6:	4630      	mov	r0, r6
 8007da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dac:	4e2e      	ldr	r6, [pc, #184]	; (8007e68 <_malloc_r+0xe4>)
 8007dae:	f000 fa25 	bl	80081fc <__malloc_lock>
 8007db2:	6833      	ldr	r3, [r6, #0]
 8007db4:	461c      	mov	r4, r3
 8007db6:	bb34      	cbnz	r4, 8007e06 <_malloc_r+0x82>
 8007db8:	4629      	mov	r1, r5
 8007dba:	4638      	mov	r0, r7
 8007dbc:	f7ff ffc2 	bl	8007d44 <sbrk_aligned>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	d14d      	bne.n	8007e62 <_malloc_r+0xde>
 8007dc6:	6834      	ldr	r4, [r6, #0]
 8007dc8:	4626      	mov	r6, r4
 8007dca:	2e00      	cmp	r6, #0
 8007dcc:	d140      	bne.n	8007e50 <_malloc_r+0xcc>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	eb04 0803 	add.w	r8, r4, r3
 8007dd8:	f000 f9a4 	bl	8008124 <_sbrk_r>
 8007ddc:	4580      	cmp	r8, r0
 8007dde:	d13a      	bne.n	8007e56 <_malloc_r+0xd2>
 8007de0:	6821      	ldr	r1, [r4, #0]
 8007de2:	3503      	adds	r5, #3
 8007de4:	1a6d      	subs	r5, r5, r1
 8007de6:	f025 0503 	bic.w	r5, r5, #3
 8007dea:	3508      	adds	r5, #8
 8007dec:	2d0c      	cmp	r5, #12
 8007dee:	bf38      	it	cc
 8007df0:	250c      	movcc	r5, #12
 8007df2:	4629      	mov	r1, r5
 8007df4:	4638      	mov	r0, r7
 8007df6:	f7ff ffa5 	bl	8007d44 <sbrk_aligned>
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d02b      	beq.n	8007e56 <_malloc_r+0xd2>
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	442b      	add	r3, r5
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	e00e      	b.n	8007e24 <_malloc_r+0xa0>
 8007e06:	6822      	ldr	r2, [r4, #0]
 8007e08:	1b52      	subs	r2, r2, r5
 8007e0a:	d41e      	bmi.n	8007e4a <_malloc_r+0xc6>
 8007e0c:	2a0b      	cmp	r2, #11
 8007e0e:	d916      	bls.n	8007e3e <_malloc_r+0xba>
 8007e10:	1961      	adds	r1, r4, r5
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	6025      	str	r5, [r4, #0]
 8007e16:	bf18      	it	ne
 8007e18:	6059      	strne	r1, [r3, #4]
 8007e1a:	6863      	ldr	r3, [r4, #4]
 8007e1c:	bf08      	it	eq
 8007e1e:	6031      	streq	r1, [r6, #0]
 8007e20:	5162      	str	r2, [r4, r5]
 8007e22:	604b      	str	r3, [r1, #4]
 8007e24:	4638      	mov	r0, r7
 8007e26:	f104 060b 	add.w	r6, r4, #11
 8007e2a:	f000 f9ed 	bl	8008208 <__malloc_unlock>
 8007e2e:	f026 0607 	bic.w	r6, r6, #7
 8007e32:	1d23      	adds	r3, r4, #4
 8007e34:	1af2      	subs	r2, r6, r3
 8007e36:	d0b6      	beq.n	8007da6 <_malloc_r+0x22>
 8007e38:	1b9b      	subs	r3, r3, r6
 8007e3a:	50a3      	str	r3, [r4, r2]
 8007e3c:	e7b3      	b.n	8007da6 <_malloc_r+0x22>
 8007e3e:	6862      	ldr	r2, [r4, #4]
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	bf0c      	ite	eq
 8007e44:	6032      	streq	r2, [r6, #0]
 8007e46:	605a      	strne	r2, [r3, #4]
 8007e48:	e7ec      	b.n	8007e24 <_malloc_r+0xa0>
 8007e4a:	4623      	mov	r3, r4
 8007e4c:	6864      	ldr	r4, [r4, #4]
 8007e4e:	e7b2      	b.n	8007db6 <_malloc_r+0x32>
 8007e50:	4634      	mov	r4, r6
 8007e52:	6876      	ldr	r6, [r6, #4]
 8007e54:	e7b9      	b.n	8007dca <_malloc_r+0x46>
 8007e56:	230c      	movs	r3, #12
 8007e58:	603b      	str	r3, [r7, #0]
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	f000 f9d4 	bl	8008208 <__malloc_unlock>
 8007e60:	e7a1      	b.n	8007da6 <_malloc_r+0x22>
 8007e62:	6025      	str	r5, [r4, #0]
 8007e64:	e7de      	b.n	8007e24 <_malloc_r+0xa0>
 8007e66:	bf00      	nop
 8007e68:	200005a8 	.word	0x200005a8

08007e6c <__ssputs_r>:
 8007e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	688e      	ldr	r6, [r1, #8]
 8007e72:	429e      	cmp	r6, r3
 8007e74:	4682      	mov	sl, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	4690      	mov	r8, r2
 8007e7a:	461f      	mov	r7, r3
 8007e7c:	d838      	bhi.n	8007ef0 <__ssputs_r+0x84>
 8007e7e:	898a      	ldrh	r2, [r1, #12]
 8007e80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e84:	d032      	beq.n	8007eec <__ssputs_r+0x80>
 8007e86:	6825      	ldr	r5, [r4, #0]
 8007e88:	6909      	ldr	r1, [r1, #16]
 8007e8a:	eba5 0901 	sub.w	r9, r5, r1
 8007e8e:	6965      	ldr	r5, [r4, #20]
 8007e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e98:	3301      	adds	r3, #1
 8007e9a:	444b      	add	r3, r9
 8007e9c:	106d      	asrs	r5, r5, #1
 8007e9e:	429d      	cmp	r5, r3
 8007ea0:	bf38      	it	cc
 8007ea2:	461d      	movcc	r5, r3
 8007ea4:	0553      	lsls	r3, r2, #21
 8007ea6:	d531      	bpl.n	8007f0c <__ssputs_r+0xa0>
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7ff ff6b 	bl	8007d84 <_malloc_r>
 8007eae:	4606      	mov	r6, r0
 8007eb0:	b950      	cbnz	r0, 8007ec8 <__ssputs_r+0x5c>
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	f8ca 3000 	str.w	r3, [sl]
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ebe:	81a3      	strh	r3, [r4, #12]
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	6921      	ldr	r1, [r4, #16]
 8007eca:	464a      	mov	r2, r9
 8007ecc:	f7ff fb46 	bl	800755c <memcpy>
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	6126      	str	r6, [r4, #16]
 8007ede:	6165      	str	r5, [r4, #20]
 8007ee0:	444e      	add	r6, r9
 8007ee2:	eba5 0509 	sub.w	r5, r5, r9
 8007ee6:	6026      	str	r6, [r4, #0]
 8007ee8:	60a5      	str	r5, [r4, #8]
 8007eea:	463e      	mov	r6, r7
 8007eec:	42be      	cmp	r6, r7
 8007eee:	d900      	bls.n	8007ef2 <__ssputs_r+0x86>
 8007ef0:	463e      	mov	r6, r7
 8007ef2:	6820      	ldr	r0, [r4, #0]
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	4641      	mov	r1, r8
 8007ef8:	f000 f966 	bl	80081c8 <memmove>
 8007efc:	68a3      	ldr	r3, [r4, #8]
 8007efe:	1b9b      	subs	r3, r3, r6
 8007f00:	60a3      	str	r3, [r4, #8]
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	4433      	add	r3, r6
 8007f06:	6023      	str	r3, [r4, #0]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e7db      	b.n	8007ec4 <__ssputs_r+0x58>
 8007f0c:	462a      	mov	r2, r5
 8007f0e:	f000 f981 	bl	8008214 <_realloc_r>
 8007f12:	4606      	mov	r6, r0
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d1e1      	bne.n	8007edc <__ssputs_r+0x70>
 8007f18:	6921      	ldr	r1, [r4, #16]
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	f7ff fec6 	bl	8007cac <_free_r>
 8007f20:	e7c7      	b.n	8007eb2 <__ssputs_r+0x46>
	...

08007f24 <_svfiprintf_r>:
 8007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	4698      	mov	r8, r3
 8007f2a:	898b      	ldrh	r3, [r1, #12]
 8007f2c:	061b      	lsls	r3, r3, #24
 8007f2e:	b09d      	sub	sp, #116	; 0x74
 8007f30:	4607      	mov	r7, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	4614      	mov	r4, r2
 8007f36:	d50e      	bpl.n	8007f56 <_svfiprintf_r+0x32>
 8007f38:	690b      	ldr	r3, [r1, #16]
 8007f3a:	b963      	cbnz	r3, 8007f56 <_svfiprintf_r+0x32>
 8007f3c:	2140      	movs	r1, #64	; 0x40
 8007f3e:	f7ff ff21 	bl	8007d84 <_malloc_r>
 8007f42:	6028      	str	r0, [r5, #0]
 8007f44:	6128      	str	r0, [r5, #16]
 8007f46:	b920      	cbnz	r0, 8007f52 <_svfiprintf_r+0x2e>
 8007f48:	230c      	movs	r3, #12
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f50:	e0d1      	b.n	80080f6 <_svfiprintf_r+0x1d2>
 8007f52:	2340      	movs	r3, #64	; 0x40
 8007f54:	616b      	str	r3, [r5, #20]
 8007f56:	2300      	movs	r3, #0
 8007f58:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5a:	2320      	movs	r3, #32
 8007f5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f64:	2330      	movs	r3, #48	; 0x30
 8007f66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008110 <_svfiprintf_r+0x1ec>
 8007f6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f6e:	f04f 0901 	mov.w	r9, #1
 8007f72:	4623      	mov	r3, r4
 8007f74:	469a      	mov	sl, r3
 8007f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f7a:	b10a      	cbz	r2, 8007f80 <_svfiprintf_r+0x5c>
 8007f7c:	2a25      	cmp	r2, #37	; 0x25
 8007f7e:	d1f9      	bne.n	8007f74 <_svfiprintf_r+0x50>
 8007f80:	ebba 0b04 	subs.w	fp, sl, r4
 8007f84:	d00b      	beq.n	8007f9e <_svfiprintf_r+0x7a>
 8007f86:	465b      	mov	r3, fp
 8007f88:	4622      	mov	r2, r4
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f7ff ff6d 	bl	8007e6c <__ssputs_r>
 8007f92:	3001      	adds	r0, #1
 8007f94:	f000 80aa 	beq.w	80080ec <_svfiprintf_r+0x1c8>
 8007f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f9a:	445a      	add	r2, fp
 8007f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 80a2 	beq.w	80080ec <_svfiprintf_r+0x1c8>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f04f 32ff 	mov.w	r2, #4294967295
 8007fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fb2:	f10a 0a01 	add.w	sl, sl, #1
 8007fb6:	9304      	str	r3, [sp, #16]
 8007fb8:	9307      	str	r3, [sp, #28]
 8007fba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fbe:	931a      	str	r3, [sp, #104]	; 0x68
 8007fc0:	4654      	mov	r4, sl
 8007fc2:	2205      	movs	r2, #5
 8007fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc8:	4851      	ldr	r0, [pc, #324]	; (8008110 <_svfiprintf_r+0x1ec>)
 8007fca:	f7f8 f919 	bl	8000200 <memchr>
 8007fce:	9a04      	ldr	r2, [sp, #16]
 8007fd0:	b9d8      	cbnz	r0, 800800a <_svfiprintf_r+0xe6>
 8007fd2:	06d0      	lsls	r0, r2, #27
 8007fd4:	bf44      	itt	mi
 8007fd6:	2320      	movmi	r3, #32
 8007fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fdc:	0711      	lsls	r1, r2, #28
 8007fde:	bf44      	itt	mi
 8007fe0:	232b      	movmi	r3, #43	; 0x2b
 8007fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8007fea:	2b2a      	cmp	r3, #42	; 0x2a
 8007fec:	d015      	beq.n	800801a <_svfiprintf_r+0xf6>
 8007fee:	9a07      	ldr	r2, [sp, #28]
 8007ff0:	4654      	mov	r4, sl
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	f04f 0c0a 	mov.w	ip, #10
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ffe:	3b30      	subs	r3, #48	; 0x30
 8008000:	2b09      	cmp	r3, #9
 8008002:	d94e      	bls.n	80080a2 <_svfiprintf_r+0x17e>
 8008004:	b1b0      	cbz	r0, 8008034 <_svfiprintf_r+0x110>
 8008006:	9207      	str	r2, [sp, #28]
 8008008:	e014      	b.n	8008034 <_svfiprintf_r+0x110>
 800800a:	eba0 0308 	sub.w	r3, r0, r8
 800800e:	fa09 f303 	lsl.w	r3, r9, r3
 8008012:	4313      	orrs	r3, r2
 8008014:	9304      	str	r3, [sp, #16]
 8008016:	46a2      	mov	sl, r4
 8008018:	e7d2      	b.n	8007fc0 <_svfiprintf_r+0x9c>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	1d19      	adds	r1, r3, #4
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	9103      	str	r1, [sp, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	bfbb      	ittet	lt
 8008026:	425b      	neglt	r3, r3
 8008028:	f042 0202 	orrlt.w	r2, r2, #2
 800802c:	9307      	strge	r3, [sp, #28]
 800802e:	9307      	strlt	r3, [sp, #28]
 8008030:	bfb8      	it	lt
 8008032:	9204      	strlt	r2, [sp, #16]
 8008034:	7823      	ldrb	r3, [r4, #0]
 8008036:	2b2e      	cmp	r3, #46	; 0x2e
 8008038:	d10c      	bne.n	8008054 <_svfiprintf_r+0x130>
 800803a:	7863      	ldrb	r3, [r4, #1]
 800803c:	2b2a      	cmp	r3, #42	; 0x2a
 800803e:	d135      	bne.n	80080ac <_svfiprintf_r+0x188>
 8008040:	9b03      	ldr	r3, [sp, #12]
 8008042:	1d1a      	adds	r2, r3, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	9203      	str	r2, [sp, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	bfb8      	it	lt
 800804c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008050:	3402      	adds	r4, #2
 8008052:	9305      	str	r3, [sp, #20]
 8008054:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008120 <_svfiprintf_r+0x1fc>
 8008058:	7821      	ldrb	r1, [r4, #0]
 800805a:	2203      	movs	r2, #3
 800805c:	4650      	mov	r0, sl
 800805e:	f7f8 f8cf 	bl	8000200 <memchr>
 8008062:	b140      	cbz	r0, 8008076 <_svfiprintf_r+0x152>
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	eba0 000a 	sub.w	r0, r0, sl
 800806a:	fa03 f000 	lsl.w	r0, r3, r0
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	4303      	orrs	r3, r0
 8008072:	3401      	adds	r4, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807a:	4826      	ldr	r0, [pc, #152]	; (8008114 <_svfiprintf_r+0x1f0>)
 800807c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008080:	2206      	movs	r2, #6
 8008082:	f7f8 f8bd 	bl	8000200 <memchr>
 8008086:	2800      	cmp	r0, #0
 8008088:	d038      	beq.n	80080fc <_svfiprintf_r+0x1d8>
 800808a:	4b23      	ldr	r3, [pc, #140]	; (8008118 <_svfiprintf_r+0x1f4>)
 800808c:	bb1b      	cbnz	r3, 80080d6 <_svfiprintf_r+0x1b2>
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	3307      	adds	r3, #7
 8008092:	f023 0307 	bic.w	r3, r3, #7
 8008096:	3308      	adds	r3, #8
 8008098:	9303      	str	r3, [sp, #12]
 800809a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809c:	4433      	add	r3, r6
 800809e:	9309      	str	r3, [sp, #36]	; 0x24
 80080a0:	e767      	b.n	8007f72 <_svfiprintf_r+0x4e>
 80080a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080a6:	460c      	mov	r4, r1
 80080a8:	2001      	movs	r0, #1
 80080aa:	e7a5      	b.n	8007ff8 <_svfiprintf_r+0xd4>
 80080ac:	2300      	movs	r3, #0
 80080ae:	3401      	adds	r4, #1
 80080b0:	9305      	str	r3, [sp, #20]
 80080b2:	4619      	mov	r1, r3
 80080b4:	f04f 0c0a 	mov.w	ip, #10
 80080b8:	4620      	mov	r0, r4
 80080ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080be:	3a30      	subs	r2, #48	; 0x30
 80080c0:	2a09      	cmp	r2, #9
 80080c2:	d903      	bls.n	80080cc <_svfiprintf_r+0x1a8>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0c5      	beq.n	8008054 <_svfiprintf_r+0x130>
 80080c8:	9105      	str	r1, [sp, #20]
 80080ca:	e7c3      	b.n	8008054 <_svfiprintf_r+0x130>
 80080cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80080d0:	4604      	mov	r4, r0
 80080d2:	2301      	movs	r3, #1
 80080d4:	e7f0      	b.n	80080b8 <_svfiprintf_r+0x194>
 80080d6:	ab03      	add	r3, sp, #12
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	462a      	mov	r2, r5
 80080dc:	4b0f      	ldr	r3, [pc, #60]	; (800811c <_svfiprintf_r+0x1f8>)
 80080de:	a904      	add	r1, sp, #16
 80080e0:	4638      	mov	r0, r7
 80080e2:	f7fd ffc9 	bl	8006078 <_printf_float>
 80080e6:	1c42      	adds	r2, r0, #1
 80080e8:	4606      	mov	r6, r0
 80080ea:	d1d6      	bne.n	800809a <_svfiprintf_r+0x176>
 80080ec:	89ab      	ldrh	r3, [r5, #12]
 80080ee:	065b      	lsls	r3, r3, #25
 80080f0:	f53f af2c 	bmi.w	8007f4c <_svfiprintf_r+0x28>
 80080f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080f6:	b01d      	add	sp, #116	; 0x74
 80080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fc:	ab03      	add	r3, sp, #12
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	462a      	mov	r2, r5
 8008102:	4b06      	ldr	r3, [pc, #24]	; (800811c <_svfiprintf_r+0x1f8>)
 8008104:	a904      	add	r1, sp, #16
 8008106:	4638      	mov	r0, r7
 8008108:	f7fe fa5a 	bl	80065c0 <_printf_i>
 800810c:	e7eb      	b.n	80080e6 <_svfiprintf_r+0x1c2>
 800810e:	bf00      	nop
 8008110:	0800aa24 	.word	0x0800aa24
 8008114:	0800aa2e 	.word	0x0800aa2e
 8008118:	08006079 	.word	0x08006079
 800811c:	08007e6d 	.word	0x08007e6d
 8008120:	0800aa2a 	.word	0x0800aa2a

08008124 <_sbrk_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4d06      	ldr	r5, [pc, #24]	; (8008140 <_sbrk_r+0x1c>)
 8008128:	2300      	movs	r3, #0
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	602b      	str	r3, [r5, #0]
 8008130:	f7f9 f8a2 	bl	8001278 <_sbrk>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_sbrk_r+0x1a>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_sbrk_r+0x1a>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	200005b0 	.word	0x200005b0

08008144 <__assert_func>:
 8008144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008146:	4614      	mov	r4, r2
 8008148:	461a      	mov	r2, r3
 800814a:	4b09      	ldr	r3, [pc, #36]	; (8008170 <__assert_func+0x2c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4605      	mov	r5, r0
 8008150:	68d8      	ldr	r0, [r3, #12]
 8008152:	b14c      	cbz	r4, 8008168 <__assert_func+0x24>
 8008154:	4b07      	ldr	r3, [pc, #28]	; (8008174 <__assert_func+0x30>)
 8008156:	9100      	str	r1, [sp, #0]
 8008158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800815c:	4906      	ldr	r1, [pc, #24]	; (8008178 <__assert_func+0x34>)
 800815e:	462b      	mov	r3, r5
 8008160:	f000 f80e 	bl	8008180 <fiprintf>
 8008164:	f000 faac 	bl	80086c0 <abort>
 8008168:	4b04      	ldr	r3, [pc, #16]	; (800817c <__assert_func+0x38>)
 800816a:	461c      	mov	r4, r3
 800816c:	e7f3      	b.n	8008156 <__assert_func+0x12>
 800816e:	bf00      	nop
 8008170:	20000088 	.word	0x20000088
 8008174:	0800aa35 	.word	0x0800aa35
 8008178:	0800aa42 	.word	0x0800aa42
 800817c:	0800aa70 	.word	0x0800aa70

08008180 <fiprintf>:
 8008180:	b40e      	push	{r1, r2, r3}
 8008182:	b503      	push	{r0, r1, lr}
 8008184:	4601      	mov	r1, r0
 8008186:	ab03      	add	r3, sp, #12
 8008188:	4805      	ldr	r0, [pc, #20]	; (80081a0 <fiprintf+0x20>)
 800818a:	f853 2b04 	ldr.w	r2, [r3], #4
 800818e:	6800      	ldr	r0, [r0, #0]
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	f000 f897 	bl	80082c4 <_vfiprintf_r>
 8008196:	b002      	add	sp, #8
 8008198:	f85d eb04 	ldr.w	lr, [sp], #4
 800819c:	b003      	add	sp, #12
 800819e:	4770      	bx	lr
 80081a0:	20000088 	.word	0x20000088

080081a4 <__ascii_mbtowc>:
 80081a4:	b082      	sub	sp, #8
 80081a6:	b901      	cbnz	r1, 80081aa <__ascii_mbtowc+0x6>
 80081a8:	a901      	add	r1, sp, #4
 80081aa:	b142      	cbz	r2, 80081be <__ascii_mbtowc+0x1a>
 80081ac:	b14b      	cbz	r3, 80081c2 <__ascii_mbtowc+0x1e>
 80081ae:	7813      	ldrb	r3, [r2, #0]
 80081b0:	600b      	str	r3, [r1, #0]
 80081b2:	7812      	ldrb	r2, [r2, #0]
 80081b4:	1e10      	subs	r0, r2, #0
 80081b6:	bf18      	it	ne
 80081b8:	2001      	movne	r0, #1
 80081ba:	b002      	add	sp, #8
 80081bc:	4770      	bx	lr
 80081be:	4610      	mov	r0, r2
 80081c0:	e7fb      	b.n	80081ba <__ascii_mbtowc+0x16>
 80081c2:	f06f 0001 	mvn.w	r0, #1
 80081c6:	e7f8      	b.n	80081ba <__ascii_mbtowc+0x16>

080081c8 <memmove>:
 80081c8:	4288      	cmp	r0, r1
 80081ca:	b510      	push	{r4, lr}
 80081cc:	eb01 0402 	add.w	r4, r1, r2
 80081d0:	d902      	bls.n	80081d8 <memmove+0x10>
 80081d2:	4284      	cmp	r4, r0
 80081d4:	4623      	mov	r3, r4
 80081d6:	d807      	bhi.n	80081e8 <memmove+0x20>
 80081d8:	1e43      	subs	r3, r0, #1
 80081da:	42a1      	cmp	r1, r4
 80081dc:	d008      	beq.n	80081f0 <memmove+0x28>
 80081de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081e6:	e7f8      	b.n	80081da <memmove+0x12>
 80081e8:	4402      	add	r2, r0
 80081ea:	4601      	mov	r1, r0
 80081ec:	428a      	cmp	r2, r1
 80081ee:	d100      	bne.n	80081f2 <memmove+0x2a>
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081fa:	e7f7      	b.n	80081ec <memmove+0x24>

080081fc <__malloc_lock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__malloc_lock+0x8>)
 80081fe:	f000 bc1f 	b.w	8008a40 <__retarget_lock_acquire_recursive>
 8008202:	bf00      	nop
 8008204:	200005b4 	.word	0x200005b4

08008208 <__malloc_unlock>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__malloc_unlock+0x8>)
 800820a:	f000 bc1a 	b.w	8008a42 <__retarget_lock_release_recursive>
 800820e:	bf00      	nop
 8008210:	200005b4 	.word	0x200005b4

08008214 <_realloc_r>:
 8008214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008218:	4680      	mov	r8, r0
 800821a:	4614      	mov	r4, r2
 800821c:	460e      	mov	r6, r1
 800821e:	b921      	cbnz	r1, 800822a <_realloc_r+0x16>
 8008220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008224:	4611      	mov	r1, r2
 8008226:	f7ff bdad 	b.w	8007d84 <_malloc_r>
 800822a:	b92a      	cbnz	r2, 8008238 <_realloc_r+0x24>
 800822c:	f7ff fd3e 	bl	8007cac <_free_r>
 8008230:	4625      	mov	r5, r4
 8008232:	4628      	mov	r0, r5
 8008234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008238:	f000 fc6a 	bl	8008b10 <_malloc_usable_size_r>
 800823c:	4284      	cmp	r4, r0
 800823e:	4607      	mov	r7, r0
 8008240:	d802      	bhi.n	8008248 <_realloc_r+0x34>
 8008242:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008246:	d812      	bhi.n	800826e <_realloc_r+0x5a>
 8008248:	4621      	mov	r1, r4
 800824a:	4640      	mov	r0, r8
 800824c:	f7ff fd9a 	bl	8007d84 <_malloc_r>
 8008250:	4605      	mov	r5, r0
 8008252:	2800      	cmp	r0, #0
 8008254:	d0ed      	beq.n	8008232 <_realloc_r+0x1e>
 8008256:	42bc      	cmp	r4, r7
 8008258:	4622      	mov	r2, r4
 800825a:	4631      	mov	r1, r6
 800825c:	bf28      	it	cs
 800825e:	463a      	movcs	r2, r7
 8008260:	f7ff f97c 	bl	800755c <memcpy>
 8008264:	4631      	mov	r1, r6
 8008266:	4640      	mov	r0, r8
 8008268:	f7ff fd20 	bl	8007cac <_free_r>
 800826c:	e7e1      	b.n	8008232 <_realloc_r+0x1e>
 800826e:	4635      	mov	r5, r6
 8008270:	e7df      	b.n	8008232 <_realloc_r+0x1e>

08008272 <__sfputc_r>:
 8008272:	6893      	ldr	r3, [r2, #8]
 8008274:	3b01      	subs	r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	b410      	push	{r4}
 800827a:	6093      	str	r3, [r2, #8]
 800827c:	da08      	bge.n	8008290 <__sfputc_r+0x1e>
 800827e:	6994      	ldr	r4, [r2, #24]
 8008280:	42a3      	cmp	r3, r4
 8008282:	db01      	blt.n	8008288 <__sfputc_r+0x16>
 8008284:	290a      	cmp	r1, #10
 8008286:	d103      	bne.n	8008290 <__sfputc_r+0x1e>
 8008288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800828c:	f000 b94a 	b.w	8008524 <__swbuf_r>
 8008290:	6813      	ldr	r3, [r2, #0]
 8008292:	1c58      	adds	r0, r3, #1
 8008294:	6010      	str	r0, [r2, #0]
 8008296:	7019      	strb	r1, [r3, #0]
 8008298:	4608      	mov	r0, r1
 800829a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <__sfputs_r>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	4606      	mov	r6, r0
 80082a4:	460f      	mov	r7, r1
 80082a6:	4614      	mov	r4, r2
 80082a8:	18d5      	adds	r5, r2, r3
 80082aa:	42ac      	cmp	r4, r5
 80082ac:	d101      	bne.n	80082b2 <__sfputs_r+0x12>
 80082ae:	2000      	movs	r0, #0
 80082b0:	e007      	b.n	80082c2 <__sfputs_r+0x22>
 80082b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b6:	463a      	mov	r2, r7
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7ff ffda 	bl	8008272 <__sfputc_r>
 80082be:	1c43      	adds	r3, r0, #1
 80082c0:	d1f3      	bne.n	80082aa <__sfputs_r+0xa>
 80082c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082c4 <_vfiprintf_r>:
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	460d      	mov	r5, r1
 80082ca:	b09d      	sub	sp, #116	; 0x74
 80082cc:	4614      	mov	r4, r2
 80082ce:	4698      	mov	r8, r3
 80082d0:	4606      	mov	r6, r0
 80082d2:	b118      	cbz	r0, 80082dc <_vfiprintf_r+0x18>
 80082d4:	6983      	ldr	r3, [r0, #24]
 80082d6:	b90b      	cbnz	r3, 80082dc <_vfiprintf_r+0x18>
 80082d8:	f000 fb14 	bl	8008904 <__sinit>
 80082dc:	4b89      	ldr	r3, [pc, #548]	; (8008504 <_vfiprintf_r+0x240>)
 80082de:	429d      	cmp	r5, r3
 80082e0:	d11b      	bne.n	800831a <_vfiprintf_r+0x56>
 80082e2:	6875      	ldr	r5, [r6, #4]
 80082e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082e6:	07d9      	lsls	r1, r3, #31
 80082e8:	d405      	bmi.n	80082f6 <_vfiprintf_r+0x32>
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	059a      	lsls	r2, r3, #22
 80082ee:	d402      	bmi.n	80082f6 <_vfiprintf_r+0x32>
 80082f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082f2:	f000 fba5 	bl	8008a40 <__retarget_lock_acquire_recursive>
 80082f6:	89ab      	ldrh	r3, [r5, #12]
 80082f8:	071b      	lsls	r3, r3, #28
 80082fa:	d501      	bpl.n	8008300 <_vfiprintf_r+0x3c>
 80082fc:	692b      	ldr	r3, [r5, #16]
 80082fe:	b9eb      	cbnz	r3, 800833c <_vfiprintf_r+0x78>
 8008300:	4629      	mov	r1, r5
 8008302:	4630      	mov	r0, r6
 8008304:	f000 f96e 	bl	80085e4 <__swsetup_r>
 8008308:	b1c0      	cbz	r0, 800833c <_vfiprintf_r+0x78>
 800830a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800830c:	07dc      	lsls	r4, r3, #31
 800830e:	d50e      	bpl.n	800832e <_vfiprintf_r+0x6a>
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	b01d      	add	sp, #116	; 0x74
 8008316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831a:	4b7b      	ldr	r3, [pc, #492]	; (8008508 <_vfiprintf_r+0x244>)
 800831c:	429d      	cmp	r5, r3
 800831e:	d101      	bne.n	8008324 <_vfiprintf_r+0x60>
 8008320:	68b5      	ldr	r5, [r6, #8]
 8008322:	e7df      	b.n	80082e4 <_vfiprintf_r+0x20>
 8008324:	4b79      	ldr	r3, [pc, #484]	; (800850c <_vfiprintf_r+0x248>)
 8008326:	429d      	cmp	r5, r3
 8008328:	bf08      	it	eq
 800832a:	68f5      	ldreq	r5, [r6, #12]
 800832c:	e7da      	b.n	80082e4 <_vfiprintf_r+0x20>
 800832e:	89ab      	ldrh	r3, [r5, #12]
 8008330:	0598      	lsls	r0, r3, #22
 8008332:	d4ed      	bmi.n	8008310 <_vfiprintf_r+0x4c>
 8008334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008336:	f000 fb84 	bl	8008a42 <__retarget_lock_release_recursive>
 800833a:	e7e9      	b.n	8008310 <_vfiprintf_r+0x4c>
 800833c:	2300      	movs	r3, #0
 800833e:	9309      	str	r3, [sp, #36]	; 0x24
 8008340:	2320      	movs	r3, #32
 8008342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008346:	f8cd 800c 	str.w	r8, [sp, #12]
 800834a:	2330      	movs	r3, #48	; 0x30
 800834c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008510 <_vfiprintf_r+0x24c>
 8008350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008354:	f04f 0901 	mov.w	r9, #1
 8008358:	4623      	mov	r3, r4
 800835a:	469a      	mov	sl, r3
 800835c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008360:	b10a      	cbz	r2, 8008366 <_vfiprintf_r+0xa2>
 8008362:	2a25      	cmp	r2, #37	; 0x25
 8008364:	d1f9      	bne.n	800835a <_vfiprintf_r+0x96>
 8008366:	ebba 0b04 	subs.w	fp, sl, r4
 800836a:	d00b      	beq.n	8008384 <_vfiprintf_r+0xc0>
 800836c:	465b      	mov	r3, fp
 800836e:	4622      	mov	r2, r4
 8008370:	4629      	mov	r1, r5
 8008372:	4630      	mov	r0, r6
 8008374:	f7ff ff94 	bl	80082a0 <__sfputs_r>
 8008378:	3001      	adds	r0, #1
 800837a:	f000 80aa 	beq.w	80084d2 <_vfiprintf_r+0x20e>
 800837e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008380:	445a      	add	r2, fp
 8008382:	9209      	str	r2, [sp, #36]	; 0x24
 8008384:	f89a 3000 	ldrb.w	r3, [sl]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80a2 	beq.w	80084d2 <_vfiprintf_r+0x20e>
 800838e:	2300      	movs	r3, #0
 8008390:	f04f 32ff 	mov.w	r2, #4294967295
 8008394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008398:	f10a 0a01 	add.w	sl, sl, #1
 800839c:	9304      	str	r3, [sp, #16]
 800839e:	9307      	str	r3, [sp, #28]
 80083a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083a4:	931a      	str	r3, [sp, #104]	; 0x68
 80083a6:	4654      	mov	r4, sl
 80083a8:	2205      	movs	r2, #5
 80083aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ae:	4858      	ldr	r0, [pc, #352]	; (8008510 <_vfiprintf_r+0x24c>)
 80083b0:	f7f7 ff26 	bl	8000200 <memchr>
 80083b4:	9a04      	ldr	r2, [sp, #16]
 80083b6:	b9d8      	cbnz	r0, 80083f0 <_vfiprintf_r+0x12c>
 80083b8:	06d1      	lsls	r1, r2, #27
 80083ba:	bf44      	itt	mi
 80083bc:	2320      	movmi	r3, #32
 80083be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c2:	0713      	lsls	r3, r2, #28
 80083c4:	bf44      	itt	mi
 80083c6:	232b      	movmi	r3, #43	; 0x2b
 80083c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083cc:	f89a 3000 	ldrb.w	r3, [sl]
 80083d0:	2b2a      	cmp	r3, #42	; 0x2a
 80083d2:	d015      	beq.n	8008400 <_vfiprintf_r+0x13c>
 80083d4:	9a07      	ldr	r2, [sp, #28]
 80083d6:	4654      	mov	r4, sl
 80083d8:	2000      	movs	r0, #0
 80083da:	f04f 0c0a 	mov.w	ip, #10
 80083de:	4621      	mov	r1, r4
 80083e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083e4:	3b30      	subs	r3, #48	; 0x30
 80083e6:	2b09      	cmp	r3, #9
 80083e8:	d94e      	bls.n	8008488 <_vfiprintf_r+0x1c4>
 80083ea:	b1b0      	cbz	r0, 800841a <_vfiprintf_r+0x156>
 80083ec:	9207      	str	r2, [sp, #28]
 80083ee:	e014      	b.n	800841a <_vfiprintf_r+0x156>
 80083f0:	eba0 0308 	sub.w	r3, r0, r8
 80083f4:	fa09 f303 	lsl.w	r3, r9, r3
 80083f8:	4313      	orrs	r3, r2
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	46a2      	mov	sl, r4
 80083fe:	e7d2      	b.n	80083a6 <_vfiprintf_r+0xe2>
 8008400:	9b03      	ldr	r3, [sp, #12]
 8008402:	1d19      	adds	r1, r3, #4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	9103      	str	r1, [sp, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	bfbb      	ittet	lt
 800840c:	425b      	neglt	r3, r3
 800840e:	f042 0202 	orrlt.w	r2, r2, #2
 8008412:	9307      	strge	r3, [sp, #28]
 8008414:	9307      	strlt	r3, [sp, #28]
 8008416:	bfb8      	it	lt
 8008418:	9204      	strlt	r2, [sp, #16]
 800841a:	7823      	ldrb	r3, [r4, #0]
 800841c:	2b2e      	cmp	r3, #46	; 0x2e
 800841e:	d10c      	bne.n	800843a <_vfiprintf_r+0x176>
 8008420:	7863      	ldrb	r3, [r4, #1]
 8008422:	2b2a      	cmp	r3, #42	; 0x2a
 8008424:	d135      	bne.n	8008492 <_vfiprintf_r+0x1ce>
 8008426:	9b03      	ldr	r3, [sp, #12]
 8008428:	1d1a      	adds	r2, r3, #4
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	9203      	str	r2, [sp, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	bfb8      	it	lt
 8008432:	f04f 33ff 	movlt.w	r3, #4294967295
 8008436:	3402      	adds	r4, #2
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008520 <_vfiprintf_r+0x25c>
 800843e:	7821      	ldrb	r1, [r4, #0]
 8008440:	2203      	movs	r2, #3
 8008442:	4650      	mov	r0, sl
 8008444:	f7f7 fedc 	bl	8000200 <memchr>
 8008448:	b140      	cbz	r0, 800845c <_vfiprintf_r+0x198>
 800844a:	2340      	movs	r3, #64	; 0x40
 800844c:	eba0 000a 	sub.w	r0, r0, sl
 8008450:	fa03 f000 	lsl.w	r0, r3, r0
 8008454:	9b04      	ldr	r3, [sp, #16]
 8008456:	4303      	orrs	r3, r0
 8008458:	3401      	adds	r4, #1
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008460:	482c      	ldr	r0, [pc, #176]	; (8008514 <_vfiprintf_r+0x250>)
 8008462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008466:	2206      	movs	r2, #6
 8008468:	f7f7 feca 	bl	8000200 <memchr>
 800846c:	2800      	cmp	r0, #0
 800846e:	d03f      	beq.n	80084f0 <_vfiprintf_r+0x22c>
 8008470:	4b29      	ldr	r3, [pc, #164]	; (8008518 <_vfiprintf_r+0x254>)
 8008472:	bb1b      	cbnz	r3, 80084bc <_vfiprintf_r+0x1f8>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	3307      	adds	r3, #7
 8008478:	f023 0307 	bic.w	r3, r3, #7
 800847c:	3308      	adds	r3, #8
 800847e:	9303      	str	r3, [sp, #12]
 8008480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008482:	443b      	add	r3, r7
 8008484:	9309      	str	r3, [sp, #36]	; 0x24
 8008486:	e767      	b.n	8008358 <_vfiprintf_r+0x94>
 8008488:	fb0c 3202 	mla	r2, ip, r2, r3
 800848c:	460c      	mov	r4, r1
 800848e:	2001      	movs	r0, #1
 8008490:	e7a5      	b.n	80083de <_vfiprintf_r+0x11a>
 8008492:	2300      	movs	r3, #0
 8008494:	3401      	adds	r4, #1
 8008496:	9305      	str	r3, [sp, #20]
 8008498:	4619      	mov	r1, r3
 800849a:	f04f 0c0a 	mov.w	ip, #10
 800849e:	4620      	mov	r0, r4
 80084a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a4:	3a30      	subs	r2, #48	; 0x30
 80084a6:	2a09      	cmp	r2, #9
 80084a8:	d903      	bls.n	80084b2 <_vfiprintf_r+0x1ee>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0c5      	beq.n	800843a <_vfiprintf_r+0x176>
 80084ae:	9105      	str	r1, [sp, #20]
 80084b0:	e7c3      	b.n	800843a <_vfiprintf_r+0x176>
 80084b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80084b6:	4604      	mov	r4, r0
 80084b8:	2301      	movs	r3, #1
 80084ba:	e7f0      	b.n	800849e <_vfiprintf_r+0x1da>
 80084bc:	ab03      	add	r3, sp, #12
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	462a      	mov	r2, r5
 80084c2:	4b16      	ldr	r3, [pc, #88]	; (800851c <_vfiprintf_r+0x258>)
 80084c4:	a904      	add	r1, sp, #16
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7fd fdd6 	bl	8006078 <_printf_float>
 80084cc:	4607      	mov	r7, r0
 80084ce:	1c78      	adds	r0, r7, #1
 80084d0:	d1d6      	bne.n	8008480 <_vfiprintf_r+0x1bc>
 80084d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084d4:	07d9      	lsls	r1, r3, #31
 80084d6:	d405      	bmi.n	80084e4 <_vfiprintf_r+0x220>
 80084d8:	89ab      	ldrh	r3, [r5, #12]
 80084da:	059a      	lsls	r2, r3, #22
 80084dc:	d402      	bmi.n	80084e4 <_vfiprintf_r+0x220>
 80084de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084e0:	f000 faaf 	bl	8008a42 <__retarget_lock_release_recursive>
 80084e4:	89ab      	ldrh	r3, [r5, #12]
 80084e6:	065b      	lsls	r3, r3, #25
 80084e8:	f53f af12 	bmi.w	8008310 <_vfiprintf_r+0x4c>
 80084ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ee:	e711      	b.n	8008314 <_vfiprintf_r+0x50>
 80084f0:	ab03      	add	r3, sp, #12
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	462a      	mov	r2, r5
 80084f6:	4b09      	ldr	r3, [pc, #36]	; (800851c <_vfiprintf_r+0x258>)
 80084f8:	a904      	add	r1, sp, #16
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7fe f860 	bl	80065c0 <_printf_i>
 8008500:	e7e4      	b.n	80084cc <_vfiprintf_r+0x208>
 8008502:	bf00      	nop
 8008504:	0800ab9c 	.word	0x0800ab9c
 8008508:	0800abbc 	.word	0x0800abbc
 800850c:	0800ab7c 	.word	0x0800ab7c
 8008510:	0800aa24 	.word	0x0800aa24
 8008514:	0800aa2e 	.word	0x0800aa2e
 8008518:	08006079 	.word	0x08006079
 800851c:	080082a1 	.word	0x080082a1
 8008520:	0800aa2a 	.word	0x0800aa2a

08008524 <__swbuf_r>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	460e      	mov	r6, r1
 8008528:	4614      	mov	r4, r2
 800852a:	4605      	mov	r5, r0
 800852c:	b118      	cbz	r0, 8008536 <__swbuf_r+0x12>
 800852e:	6983      	ldr	r3, [r0, #24]
 8008530:	b90b      	cbnz	r3, 8008536 <__swbuf_r+0x12>
 8008532:	f000 f9e7 	bl	8008904 <__sinit>
 8008536:	4b21      	ldr	r3, [pc, #132]	; (80085bc <__swbuf_r+0x98>)
 8008538:	429c      	cmp	r4, r3
 800853a:	d12b      	bne.n	8008594 <__swbuf_r+0x70>
 800853c:	686c      	ldr	r4, [r5, #4]
 800853e:	69a3      	ldr	r3, [r4, #24]
 8008540:	60a3      	str	r3, [r4, #8]
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	071a      	lsls	r2, r3, #28
 8008546:	d52f      	bpl.n	80085a8 <__swbuf_r+0x84>
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	b36b      	cbz	r3, 80085a8 <__swbuf_r+0x84>
 800854c:	6923      	ldr	r3, [r4, #16]
 800854e:	6820      	ldr	r0, [r4, #0]
 8008550:	1ac0      	subs	r0, r0, r3
 8008552:	6963      	ldr	r3, [r4, #20]
 8008554:	b2f6      	uxtb	r6, r6
 8008556:	4283      	cmp	r3, r0
 8008558:	4637      	mov	r7, r6
 800855a:	dc04      	bgt.n	8008566 <__swbuf_r+0x42>
 800855c:	4621      	mov	r1, r4
 800855e:	4628      	mov	r0, r5
 8008560:	f000 f93c 	bl	80087dc <_fflush_r>
 8008564:	bb30      	cbnz	r0, 80085b4 <__swbuf_r+0x90>
 8008566:	68a3      	ldr	r3, [r4, #8]
 8008568:	3b01      	subs	r3, #1
 800856a:	60a3      	str	r3, [r4, #8]
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	6022      	str	r2, [r4, #0]
 8008572:	701e      	strb	r6, [r3, #0]
 8008574:	6963      	ldr	r3, [r4, #20]
 8008576:	3001      	adds	r0, #1
 8008578:	4283      	cmp	r3, r0
 800857a:	d004      	beq.n	8008586 <__swbuf_r+0x62>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	07db      	lsls	r3, r3, #31
 8008580:	d506      	bpl.n	8008590 <__swbuf_r+0x6c>
 8008582:	2e0a      	cmp	r6, #10
 8008584:	d104      	bne.n	8008590 <__swbuf_r+0x6c>
 8008586:	4621      	mov	r1, r4
 8008588:	4628      	mov	r0, r5
 800858a:	f000 f927 	bl	80087dc <_fflush_r>
 800858e:	b988      	cbnz	r0, 80085b4 <__swbuf_r+0x90>
 8008590:	4638      	mov	r0, r7
 8008592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008594:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <__swbuf_r+0x9c>)
 8008596:	429c      	cmp	r4, r3
 8008598:	d101      	bne.n	800859e <__swbuf_r+0x7a>
 800859a:	68ac      	ldr	r4, [r5, #8]
 800859c:	e7cf      	b.n	800853e <__swbuf_r+0x1a>
 800859e:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <__swbuf_r+0xa0>)
 80085a0:	429c      	cmp	r4, r3
 80085a2:	bf08      	it	eq
 80085a4:	68ec      	ldreq	r4, [r5, #12]
 80085a6:	e7ca      	b.n	800853e <__swbuf_r+0x1a>
 80085a8:	4621      	mov	r1, r4
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 f81a 	bl	80085e4 <__swsetup_r>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d0cb      	beq.n	800854c <__swbuf_r+0x28>
 80085b4:	f04f 37ff 	mov.w	r7, #4294967295
 80085b8:	e7ea      	b.n	8008590 <__swbuf_r+0x6c>
 80085ba:	bf00      	nop
 80085bc:	0800ab9c 	.word	0x0800ab9c
 80085c0:	0800abbc 	.word	0x0800abbc
 80085c4:	0800ab7c 	.word	0x0800ab7c

080085c8 <__ascii_wctomb>:
 80085c8:	b149      	cbz	r1, 80085de <__ascii_wctomb+0x16>
 80085ca:	2aff      	cmp	r2, #255	; 0xff
 80085cc:	bf85      	ittet	hi
 80085ce:	238a      	movhi	r3, #138	; 0x8a
 80085d0:	6003      	strhi	r3, [r0, #0]
 80085d2:	700a      	strbls	r2, [r1, #0]
 80085d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80085d8:	bf98      	it	ls
 80085da:	2001      	movls	r0, #1
 80085dc:	4770      	bx	lr
 80085de:	4608      	mov	r0, r1
 80085e0:	4770      	bx	lr
	...

080085e4 <__swsetup_r>:
 80085e4:	4b32      	ldr	r3, [pc, #200]	; (80086b0 <__swsetup_r+0xcc>)
 80085e6:	b570      	push	{r4, r5, r6, lr}
 80085e8:	681d      	ldr	r5, [r3, #0]
 80085ea:	4606      	mov	r6, r0
 80085ec:	460c      	mov	r4, r1
 80085ee:	b125      	cbz	r5, 80085fa <__swsetup_r+0x16>
 80085f0:	69ab      	ldr	r3, [r5, #24]
 80085f2:	b913      	cbnz	r3, 80085fa <__swsetup_r+0x16>
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 f985 	bl	8008904 <__sinit>
 80085fa:	4b2e      	ldr	r3, [pc, #184]	; (80086b4 <__swsetup_r+0xd0>)
 80085fc:	429c      	cmp	r4, r3
 80085fe:	d10f      	bne.n	8008620 <__swsetup_r+0x3c>
 8008600:	686c      	ldr	r4, [r5, #4]
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008608:	0719      	lsls	r1, r3, #28
 800860a:	d42c      	bmi.n	8008666 <__swsetup_r+0x82>
 800860c:	06dd      	lsls	r5, r3, #27
 800860e:	d411      	bmi.n	8008634 <__swsetup_r+0x50>
 8008610:	2309      	movs	r3, #9
 8008612:	6033      	str	r3, [r6, #0]
 8008614:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008618:	81a3      	strh	r3, [r4, #12]
 800861a:	f04f 30ff 	mov.w	r0, #4294967295
 800861e:	e03e      	b.n	800869e <__swsetup_r+0xba>
 8008620:	4b25      	ldr	r3, [pc, #148]	; (80086b8 <__swsetup_r+0xd4>)
 8008622:	429c      	cmp	r4, r3
 8008624:	d101      	bne.n	800862a <__swsetup_r+0x46>
 8008626:	68ac      	ldr	r4, [r5, #8]
 8008628:	e7eb      	b.n	8008602 <__swsetup_r+0x1e>
 800862a:	4b24      	ldr	r3, [pc, #144]	; (80086bc <__swsetup_r+0xd8>)
 800862c:	429c      	cmp	r4, r3
 800862e:	bf08      	it	eq
 8008630:	68ec      	ldreq	r4, [r5, #12]
 8008632:	e7e6      	b.n	8008602 <__swsetup_r+0x1e>
 8008634:	0758      	lsls	r0, r3, #29
 8008636:	d512      	bpl.n	800865e <__swsetup_r+0x7a>
 8008638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800863a:	b141      	cbz	r1, 800864e <__swsetup_r+0x6a>
 800863c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008640:	4299      	cmp	r1, r3
 8008642:	d002      	beq.n	800864a <__swsetup_r+0x66>
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff fb31 	bl	8007cac <_free_r>
 800864a:	2300      	movs	r3, #0
 800864c:	6363      	str	r3, [r4, #52]	; 0x34
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	2300      	movs	r3, #0
 8008658:	6063      	str	r3, [r4, #4]
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f043 0308 	orr.w	r3, r3, #8
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	b94b      	cbnz	r3, 800867e <__swsetup_r+0x9a>
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008674:	d003      	beq.n	800867e <__swsetup_r+0x9a>
 8008676:	4621      	mov	r1, r4
 8008678:	4630      	mov	r0, r6
 800867a:	f000 fa09 	bl	8008a90 <__smakebuf_r>
 800867e:	89a0      	ldrh	r0, [r4, #12]
 8008680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008684:	f010 0301 	ands.w	r3, r0, #1
 8008688:	d00a      	beq.n	80086a0 <__swsetup_r+0xbc>
 800868a:	2300      	movs	r3, #0
 800868c:	60a3      	str	r3, [r4, #8]
 800868e:	6963      	ldr	r3, [r4, #20]
 8008690:	425b      	negs	r3, r3
 8008692:	61a3      	str	r3, [r4, #24]
 8008694:	6923      	ldr	r3, [r4, #16]
 8008696:	b943      	cbnz	r3, 80086aa <__swsetup_r+0xc6>
 8008698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800869c:	d1ba      	bne.n	8008614 <__swsetup_r+0x30>
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	0781      	lsls	r1, r0, #30
 80086a2:	bf58      	it	pl
 80086a4:	6963      	ldrpl	r3, [r4, #20]
 80086a6:	60a3      	str	r3, [r4, #8]
 80086a8:	e7f4      	b.n	8008694 <__swsetup_r+0xb0>
 80086aa:	2000      	movs	r0, #0
 80086ac:	e7f7      	b.n	800869e <__swsetup_r+0xba>
 80086ae:	bf00      	nop
 80086b0:	20000088 	.word	0x20000088
 80086b4:	0800ab9c 	.word	0x0800ab9c
 80086b8:	0800abbc 	.word	0x0800abbc
 80086bc:	0800ab7c 	.word	0x0800ab7c

080086c0 <abort>:
 80086c0:	b508      	push	{r3, lr}
 80086c2:	2006      	movs	r0, #6
 80086c4:	f000 fa54 	bl	8008b70 <raise>
 80086c8:	2001      	movs	r0, #1
 80086ca:	f7f8 fd5d 	bl	8001188 <_exit>
	...

080086d0 <__sflush_r>:
 80086d0:	898a      	ldrh	r2, [r1, #12]
 80086d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d6:	4605      	mov	r5, r0
 80086d8:	0710      	lsls	r0, r2, #28
 80086da:	460c      	mov	r4, r1
 80086dc:	d458      	bmi.n	8008790 <__sflush_r+0xc0>
 80086de:	684b      	ldr	r3, [r1, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	dc05      	bgt.n	80086f0 <__sflush_r+0x20>
 80086e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	dc02      	bgt.n	80086f0 <__sflush_r+0x20>
 80086ea:	2000      	movs	r0, #0
 80086ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086f2:	2e00      	cmp	r6, #0
 80086f4:	d0f9      	beq.n	80086ea <__sflush_r+0x1a>
 80086f6:	2300      	movs	r3, #0
 80086f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086fc:	682f      	ldr	r7, [r5, #0]
 80086fe:	602b      	str	r3, [r5, #0]
 8008700:	d032      	beq.n	8008768 <__sflush_r+0x98>
 8008702:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	075a      	lsls	r2, r3, #29
 8008708:	d505      	bpl.n	8008716 <__sflush_r+0x46>
 800870a:	6863      	ldr	r3, [r4, #4]
 800870c:	1ac0      	subs	r0, r0, r3
 800870e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008710:	b10b      	cbz	r3, 8008716 <__sflush_r+0x46>
 8008712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008714:	1ac0      	subs	r0, r0, r3
 8008716:	2300      	movs	r3, #0
 8008718:	4602      	mov	r2, r0
 800871a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800871c:	6a21      	ldr	r1, [r4, #32]
 800871e:	4628      	mov	r0, r5
 8008720:	47b0      	blx	r6
 8008722:	1c43      	adds	r3, r0, #1
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	d106      	bne.n	8008736 <__sflush_r+0x66>
 8008728:	6829      	ldr	r1, [r5, #0]
 800872a:	291d      	cmp	r1, #29
 800872c:	d82c      	bhi.n	8008788 <__sflush_r+0xb8>
 800872e:	4a2a      	ldr	r2, [pc, #168]	; (80087d8 <__sflush_r+0x108>)
 8008730:	40ca      	lsrs	r2, r1
 8008732:	07d6      	lsls	r6, r2, #31
 8008734:	d528      	bpl.n	8008788 <__sflush_r+0xb8>
 8008736:	2200      	movs	r2, #0
 8008738:	6062      	str	r2, [r4, #4]
 800873a:	04d9      	lsls	r1, r3, #19
 800873c:	6922      	ldr	r2, [r4, #16]
 800873e:	6022      	str	r2, [r4, #0]
 8008740:	d504      	bpl.n	800874c <__sflush_r+0x7c>
 8008742:	1c42      	adds	r2, r0, #1
 8008744:	d101      	bne.n	800874a <__sflush_r+0x7a>
 8008746:	682b      	ldr	r3, [r5, #0]
 8008748:	b903      	cbnz	r3, 800874c <__sflush_r+0x7c>
 800874a:	6560      	str	r0, [r4, #84]	; 0x54
 800874c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800874e:	602f      	str	r7, [r5, #0]
 8008750:	2900      	cmp	r1, #0
 8008752:	d0ca      	beq.n	80086ea <__sflush_r+0x1a>
 8008754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008758:	4299      	cmp	r1, r3
 800875a:	d002      	beq.n	8008762 <__sflush_r+0x92>
 800875c:	4628      	mov	r0, r5
 800875e:	f7ff faa5 	bl	8007cac <_free_r>
 8008762:	2000      	movs	r0, #0
 8008764:	6360      	str	r0, [r4, #52]	; 0x34
 8008766:	e7c1      	b.n	80086ec <__sflush_r+0x1c>
 8008768:	6a21      	ldr	r1, [r4, #32]
 800876a:	2301      	movs	r3, #1
 800876c:	4628      	mov	r0, r5
 800876e:	47b0      	blx	r6
 8008770:	1c41      	adds	r1, r0, #1
 8008772:	d1c7      	bne.n	8008704 <__sflush_r+0x34>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0c4      	beq.n	8008704 <__sflush_r+0x34>
 800877a:	2b1d      	cmp	r3, #29
 800877c:	d001      	beq.n	8008782 <__sflush_r+0xb2>
 800877e:	2b16      	cmp	r3, #22
 8008780:	d101      	bne.n	8008786 <__sflush_r+0xb6>
 8008782:	602f      	str	r7, [r5, #0]
 8008784:	e7b1      	b.n	80086ea <__sflush_r+0x1a>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	e7ad      	b.n	80086ec <__sflush_r+0x1c>
 8008790:	690f      	ldr	r7, [r1, #16]
 8008792:	2f00      	cmp	r7, #0
 8008794:	d0a9      	beq.n	80086ea <__sflush_r+0x1a>
 8008796:	0793      	lsls	r3, r2, #30
 8008798:	680e      	ldr	r6, [r1, #0]
 800879a:	bf08      	it	eq
 800879c:	694b      	ldreq	r3, [r1, #20]
 800879e:	600f      	str	r7, [r1, #0]
 80087a0:	bf18      	it	ne
 80087a2:	2300      	movne	r3, #0
 80087a4:	eba6 0807 	sub.w	r8, r6, r7
 80087a8:	608b      	str	r3, [r1, #8]
 80087aa:	f1b8 0f00 	cmp.w	r8, #0
 80087ae:	dd9c      	ble.n	80086ea <__sflush_r+0x1a>
 80087b0:	6a21      	ldr	r1, [r4, #32]
 80087b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087b4:	4643      	mov	r3, r8
 80087b6:	463a      	mov	r2, r7
 80087b8:	4628      	mov	r0, r5
 80087ba:	47b0      	blx	r6
 80087bc:	2800      	cmp	r0, #0
 80087be:	dc06      	bgt.n	80087ce <__sflush_r+0xfe>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c6:	81a3      	strh	r3, [r4, #12]
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	e78e      	b.n	80086ec <__sflush_r+0x1c>
 80087ce:	4407      	add	r7, r0
 80087d0:	eba8 0800 	sub.w	r8, r8, r0
 80087d4:	e7e9      	b.n	80087aa <__sflush_r+0xda>
 80087d6:	bf00      	nop
 80087d8:	20400001 	.word	0x20400001

080087dc <_fflush_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	690b      	ldr	r3, [r1, #16]
 80087e0:	4605      	mov	r5, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	b913      	cbnz	r3, 80087ec <_fflush_r+0x10>
 80087e6:	2500      	movs	r5, #0
 80087e8:	4628      	mov	r0, r5
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	b118      	cbz	r0, 80087f6 <_fflush_r+0x1a>
 80087ee:	6983      	ldr	r3, [r0, #24]
 80087f0:	b90b      	cbnz	r3, 80087f6 <_fflush_r+0x1a>
 80087f2:	f000 f887 	bl	8008904 <__sinit>
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <_fflush_r+0x6c>)
 80087f8:	429c      	cmp	r4, r3
 80087fa:	d11b      	bne.n	8008834 <_fflush_r+0x58>
 80087fc:	686c      	ldr	r4, [r5, #4]
 80087fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0ef      	beq.n	80087e6 <_fflush_r+0xa>
 8008806:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008808:	07d0      	lsls	r0, r2, #31
 800880a:	d404      	bmi.n	8008816 <_fflush_r+0x3a>
 800880c:	0599      	lsls	r1, r3, #22
 800880e:	d402      	bmi.n	8008816 <_fflush_r+0x3a>
 8008810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008812:	f000 f915 	bl	8008a40 <__retarget_lock_acquire_recursive>
 8008816:	4628      	mov	r0, r5
 8008818:	4621      	mov	r1, r4
 800881a:	f7ff ff59 	bl	80086d0 <__sflush_r>
 800881e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008820:	07da      	lsls	r2, r3, #31
 8008822:	4605      	mov	r5, r0
 8008824:	d4e0      	bmi.n	80087e8 <_fflush_r+0xc>
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	059b      	lsls	r3, r3, #22
 800882a:	d4dd      	bmi.n	80087e8 <_fflush_r+0xc>
 800882c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800882e:	f000 f908 	bl	8008a42 <__retarget_lock_release_recursive>
 8008832:	e7d9      	b.n	80087e8 <_fflush_r+0xc>
 8008834:	4b05      	ldr	r3, [pc, #20]	; (800884c <_fflush_r+0x70>)
 8008836:	429c      	cmp	r4, r3
 8008838:	d101      	bne.n	800883e <_fflush_r+0x62>
 800883a:	68ac      	ldr	r4, [r5, #8]
 800883c:	e7df      	b.n	80087fe <_fflush_r+0x22>
 800883e:	4b04      	ldr	r3, [pc, #16]	; (8008850 <_fflush_r+0x74>)
 8008840:	429c      	cmp	r4, r3
 8008842:	bf08      	it	eq
 8008844:	68ec      	ldreq	r4, [r5, #12]
 8008846:	e7da      	b.n	80087fe <_fflush_r+0x22>
 8008848:	0800ab9c 	.word	0x0800ab9c
 800884c:	0800abbc 	.word	0x0800abbc
 8008850:	0800ab7c 	.word	0x0800ab7c

08008854 <std>:
 8008854:	2300      	movs	r3, #0
 8008856:	b510      	push	{r4, lr}
 8008858:	4604      	mov	r4, r0
 800885a:	e9c0 3300 	strd	r3, r3, [r0]
 800885e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008862:	6083      	str	r3, [r0, #8]
 8008864:	8181      	strh	r1, [r0, #12]
 8008866:	6643      	str	r3, [r0, #100]	; 0x64
 8008868:	81c2      	strh	r2, [r0, #14]
 800886a:	6183      	str	r3, [r0, #24]
 800886c:	4619      	mov	r1, r3
 800886e:	2208      	movs	r2, #8
 8008870:	305c      	adds	r0, #92	; 0x5c
 8008872:	f7fd fb59 	bl	8005f28 <memset>
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <std+0x38>)
 8008878:	6263      	str	r3, [r4, #36]	; 0x24
 800887a:	4b05      	ldr	r3, [pc, #20]	; (8008890 <std+0x3c>)
 800887c:	62a3      	str	r3, [r4, #40]	; 0x28
 800887e:	4b05      	ldr	r3, [pc, #20]	; (8008894 <std+0x40>)
 8008880:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <std+0x44>)
 8008884:	6224      	str	r4, [r4, #32]
 8008886:	6323      	str	r3, [r4, #48]	; 0x30
 8008888:	bd10      	pop	{r4, pc}
 800888a:	bf00      	nop
 800888c:	08008ba9 	.word	0x08008ba9
 8008890:	08008bcb 	.word	0x08008bcb
 8008894:	08008c03 	.word	0x08008c03
 8008898:	08008c27 	.word	0x08008c27

0800889c <_cleanup_r>:
 800889c:	4901      	ldr	r1, [pc, #4]	; (80088a4 <_cleanup_r+0x8>)
 800889e:	f000 b8af 	b.w	8008a00 <_fwalk_reent>
 80088a2:	bf00      	nop
 80088a4:	080087dd 	.word	0x080087dd

080088a8 <__sfmoreglue>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	2268      	movs	r2, #104	; 0x68
 80088ac:	1e4d      	subs	r5, r1, #1
 80088ae:	4355      	muls	r5, r2
 80088b0:	460e      	mov	r6, r1
 80088b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088b6:	f7ff fa65 	bl	8007d84 <_malloc_r>
 80088ba:	4604      	mov	r4, r0
 80088bc:	b140      	cbz	r0, 80088d0 <__sfmoreglue+0x28>
 80088be:	2100      	movs	r1, #0
 80088c0:	e9c0 1600 	strd	r1, r6, [r0]
 80088c4:	300c      	adds	r0, #12
 80088c6:	60a0      	str	r0, [r4, #8]
 80088c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088cc:	f7fd fb2c 	bl	8005f28 <memset>
 80088d0:	4620      	mov	r0, r4
 80088d2:	bd70      	pop	{r4, r5, r6, pc}

080088d4 <__sfp_lock_acquire>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__sfp_lock_acquire+0x8>)
 80088d6:	f000 b8b3 	b.w	8008a40 <__retarget_lock_acquire_recursive>
 80088da:	bf00      	nop
 80088dc:	200005b5 	.word	0x200005b5

080088e0 <__sfp_lock_release>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__sfp_lock_release+0x8>)
 80088e2:	f000 b8ae 	b.w	8008a42 <__retarget_lock_release_recursive>
 80088e6:	bf00      	nop
 80088e8:	200005b5 	.word	0x200005b5

080088ec <__sinit_lock_acquire>:
 80088ec:	4801      	ldr	r0, [pc, #4]	; (80088f4 <__sinit_lock_acquire+0x8>)
 80088ee:	f000 b8a7 	b.w	8008a40 <__retarget_lock_acquire_recursive>
 80088f2:	bf00      	nop
 80088f4:	200005b6 	.word	0x200005b6

080088f8 <__sinit_lock_release>:
 80088f8:	4801      	ldr	r0, [pc, #4]	; (8008900 <__sinit_lock_release+0x8>)
 80088fa:	f000 b8a2 	b.w	8008a42 <__retarget_lock_release_recursive>
 80088fe:	bf00      	nop
 8008900:	200005b6 	.word	0x200005b6

08008904 <__sinit>:
 8008904:	b510      	push	{r4, lr}
 8008906:	4604      	mov	r4, r0
 8008908:	f7ff fff0 	bl	80088ec <__sinit_lock_acquire>
 800890c:	69a3      	ldr	r3, [r4, #24]
 800890e:	b11b      	cbz	r3, 8008918 <__sinit+0x14>
 8008910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008914:	f7ff bff0 	b.w	80088f8 <__sinit_lock_release>
 8008918:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800891c:	6523      	str	r3, [r4, #80]	; 0x50
 800891e:	4b13      	ldr	r3, [pc, #76]	; (800896c <__sinit+0x68>)
 8008920:	4a13      	ldr	r2, [pc, #76]	; (8008970 <__sinit+0x6c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	62a2      	str	r2, [r4, #40]	; 0x28
 8008926:	42a3      	cmp	r3, r4
 8008928:	bf04      	itt	eq
 800892a:	2301      	moveq	r3, #1
 800892c:	61a3      	streq	r3, [r4, #24]
 800892e:	4620      	mov	r0, r4
 8008930:	f000 f820 	bl	8008974 <__sfp>
 8008934:	6060      	str	r0, [r4, #4]
 8008936:	4620      	mov	r0, r4
 8008938:	f000 f81c 	bl	8008974 <__sfp>
 800893c:	60a0      	str	r0, [r4, #8]
 800893e:	4620      	mov	r0, r4
 8008940:	f000 f818 	bl	8008974 <__sfp>
 8008944:	2200      	movs	r2, #0
 8008946:	60e0      	str	r0, [r4, #12]
 8008948:	2104      	movs	r1, #4
 800894a:	6860      	ldr	r0, [r4, #4]
 800894c:	f7ff ff82 	bl	8008854 <std>
 8008950:	68a0      	ldr	r0, [r4, #8]
 8008952:	2201      	movs	r2, #1
 8008954:	2109      	movs	r1, #9
 8008956:	f7ff ff7d 	bl	8008854 <std>
 800895a:	68e0      	ldr	r0, [r4, #12]
 800895c:	2202      	movs	r2, #2
 800895e:	2112      	movs	r1, #18
 8008960:	f7ff ff78 	bl	8008854 <std>
 8008964:	2301      	movs	r3, #1
 8008966:	61a3      	str	r3, [r4, #24]
 8008968:	e7d2      	b.n	8008910 <__sinit+0xc>
 800896a:	bf00      	nop
 800896c:	0800a800 	.word	0x0800a800
 8008970:	0800889d 	.word	0x0800889d

08008974 <__sfp>:
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	4607      	mov	r7, r0
 8008978:	f7ff ffac 	bl	80088d4 <__sfp_lock_acquire>
 800897c:	4b1e      	ldr	r3, [pc, #120]	; (80089f8 <__sfp+0x84>)
 800897e:	681e      	ldr	r6, [r3, #0]
 8008980:	69b3      	ldr	r3, [r6, #24]
 8008982:	b913      	cbnz	r3, 800898a <__sfp+0x16>
 8008984:	4630      	mov	r0, r6
 8008986:	f7ff ffbd 	bl	8008904 <__sinit>
 800898a:	3648      	adds	r6, #72	; 0x48
 800898c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008990:	3b01      	subs	r3, #1
 8008992:	d503      	bpl.n	800899c <__sfp+0x28>
 8008994:	6833      	ldr	r3, [r6, #0]
 8008996:	b30b      	cbz	r3, 80089dc <__sfp+0x68>
 8008998:	6836      	ldr	r6, [r6, #0]
 800899a:	e7f7      	b.n	800898c <__sfp+0x18>
 800899c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089a0:	b9d5      	cbnz	r5, 80089d8 <__sfp+0x64>
 80089a2:	4b16      	ldr	r3, [pc, #88]	; (80089fc <__sfp+0x88>)
 80089a4:	60e3      	str	r3, [r4, #12]
 80089a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089aa:	6665      	str	r5, [r4, #100]	; 0x64
 80089ac:	f000 f847 	bl	8008a3e <__retarget_lock_init_recursive>
 80089b0:	f7ff ff96 	bl	80088e0 <__sfp_lock_release>
 80089b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089bc:	6025      	str	r5, [r4, #0]
 80089be:	61a5      	str	r5, [r4, #24]
 80089c0:	2208      	movs	r2, #8
 80089c2:	4629      	mov	r1, r5
 80089c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089c8:	f7fd faae 	bl	8005f28 <memset>
 80089cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089d4:	4620      	mov	r0, r4
 80089d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d8:	3468      	adds	r4, #104	; 0x68
 80089da:	e7d9      	b.n	8008990 <__sfp+0x1c>
 80089dc:	2104      	movs	r1, #4
 80089de:	4638      	mov	r0, r7
 80089e0:	f7ff ff62 	bl	80088a8 <__sfmoreglue>
 80089e4:	4604      	mov	r4, r0
 80089e6:	6030      	str	r0, [r6, #0]
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d1d5      	bne.n	8008998 <__sfp+0x24>
 80089ec:	f7ff ff78 	bl	80088e0 <__sfp_lock_release>
 80089f0:	230c      	movs	r3, #12
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	e7ee      	b.n	80089d4 <__sfp+0x60>
 80089f6:	bf00      	nop
 80089f8:	0800a800 	.word	0x0800a800
 80089fc:	ffff0001 	.word	0xffff0001

08008a00 <_fwalk_reent>:
 8008a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	4606      	mov	r6, r0
 8008a06:	4688      	mov	r8, r1
 8008a08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a0c:	2700      	movs	r7, #0
 8008a0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a12:	f1b9 0901 	subs.w	r9, r9, #1
 8008a16:	d505      	bpl.n	8008a24 <_fwalk_reent+0x24>
 8008a18:	6824      	ldr	r4, [r4, #0]
 8008a1a:	2c00      	cmp	r4, #0
 8008a1c:	d1f7      	bne.n	8008a0e <_fwalk_reent+0xe>
 8008a1e:	4638      	mov	r0, r7
 8008a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a24:	89ab      	ldrh	r3, [r5, #12]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d907      	bls.n	8008a3a <_fwalk_reent+0x3a>
 8008a2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	d003      	beq.n	8008a3a <_fwalk_reent+0x3a>
 8008a32:	4629      	mov	r1, r5
 8008a34:	4630      	mov	r0, r6
 8008a36:	47c0      	blx	r8
 8008a38:	4307      	orrs	r7, r0
 8008a3a:	3568      	adds	r5, #104	; 0x68
 8008a3c:	e7e9      	b.n	8008a12 <_fwalk_reent+0x12>

08008a3e <__retarget_lock_init_recursive>:
 8008a3e:	4770      	bx	lr

08008a40 <__retarget_lock_acquire_recursive>:
 8008a40:	4770      	bx	lr

08008a42 <__retarget_lock_release_recursive>:
 8008a42:	4770      	bx	lr

08008a44 <__swhatbuf_r>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	460e      	mov	r6, r1
 8008a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4c:	2900      	cmp	r1, #0
 8008a4e:	b096      	sub	sp, #88	; 0x58
 8008a50:	4614      	mov	r4, r2
 8008a52:	461d      	mov	r5, r3
 8008a54:	da08      	bge.n	8008a68 <__swhatbuf_r+0x24>
 8008a56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	061a      	lsls	r2, r3, #24
 8008a60:	d410      	bmi.n	8008a84 <__swhatbuf_r+0x40>
 8008a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a66:	e00e      	b.n	8008a86 <__swhatbuf_r+0x42>
 8008a68:	466a      	mov	r2, sp
 8008a6a:	f000 f903 	bl	8008c74 <_fstat_r>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	dbf1      	blt.n	8008a56 <__swhatbuf_r+0x12>
 8008a72:	9a01      	ldr	r2, [sp, #4]
 8008a74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a7c:	425a      	negs	r2, r3
 8008a7e:	415a      	adcs	r2, r3
 8008a80:	602a      	str	r2, [r5, #0]
 8008a82:	e7ee      	b.n	8008a62 <__swhatbuf_r+0x1e>
 8008a84:	2340      	movs	r3, #64	; 0x40
 8008a86:	2000      	movs	r0, #0
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	b016      	add	sp, #88	; 0x58
 8008a8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a90 <__smakebuf_r>:
 8008a90:	898b      	ldrh	r3, [r1, #12]
 8008a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a94:	079d      	lsls	r5, r3, #30
 8008a96:	4606      	mov	r6, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	d507      	bpl.n	8008aac <__smakebuf_r+0x1c>
 8008a9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	6123      	str	r3, [r4, #16]
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	6163      	str	r3, [r4, #20]
 8008aa8:	b002      	add	sp, #8
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}
 8008aac:	ab01      	add	r3, sp, #4
 8008aae:	466a      	mov	r2, sp
 8008ab0:	f7ff ffc8 	bl	8008a44 <__swhatbuf_r>
 8008ab4:	9900      	ldr	r1, [sp, #0]
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7ff f963 	bl	8007d84 <_malloc_r>
 8008abe:	b948      	cbnz	r0, 8008ad4 <__smakebuf_r+0x44>
 8008ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac4:	059a      	lsls	r2, r3, #22
 8008ac6:	d4ef      	bmi.n	8008aa8 <__smakebuf_r+0x18>
 8008ac8:	f023 0303 	bic.w	r3, r3, #3
 8008acc:	f043 0302 	orr.w	r3, r3, #2
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	e7e3      	b.n	8008a9c <__smakebuf_r+0xc>
 8008ad4:	4b0d      	ldr	r3, [pc, #52]	; (8008b0c <__smakebuf_r+0x7c>)
 8008ad6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	6163      	str	r3, [r4, #20]
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	6120      	str	r0, [r4, #16]
 8008aea:	b15b      	cbz	r3, 8008b04 <__smakebuf_r+0x74>
 8008aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 f8d1 	bl	8008c98 <_isatty_r>
 8008af6:	b128      	cbz	r0, 8008b04 <__smakebuf_r+0x74>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	89a0      	ldrh	r0, [r4, #12]
 8008b06:	4305      	orrs	r5, r0
 8008b08:	81a5      	strh	r5, [r4, #12]
 8008b0a:	e7cd      	b.n	8008aa8 <__smakebuf_r+0x18>
 8008b0c:	0800889d 	.word	0x0800889d

08008b10 <_malloc_usable_size_r>:
 8008b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b14:	1f18      	subs	r0, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfbc      	itt	lt
 8008b1a:	580b      	ldrlt	r3, [r1, r0]
 8008b1c:	18c0      	addlt	r0, r0, r3
 8008b1e:	4770      	bx	lr

08008b20 <_raise_r>:
 8008b20:	291f      	cmp	r1, #31
 8008b22:	b538      	push	{r3, r4, r5, lr}
 8008b24:	4604      	mov	r4, r0
 8008b26:	460d      	mov	r5, r1
 8008b28:	d904      	bls.n	8008b34 <_raise_r+0x14>
 8008b2a:	2316      	movs	r3, #22
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b36:	b112      	cbz	r2, 8008b3e <_raise_r+0x1e>
 8008b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b3c:	b94b      	cbnz	r3, 8008b52 <_raise_r+0x32>
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 f830 	bl	8008ba4 <_getpid_r>
 8008b44:	462a      	mov	r2, r5
 8008b46:	4601      	mov	r1, r0
 8008b48:	4620      	mov	r0, r4
 8008b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b4e:	f000 b817 	b.w	8008b80 <_kill_r>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d00a      	beq.n	8008b6c <_raise_r+0x4c>
 8008b56:	1c59      	adds	r1, r3, #1
 8008b58:	d103      	bne.n	8008b62 <_raise_r+0x42>
 8008b5a:	2316      	movs	r3, #22
 8008b5c:	6003      	str	r3, [r0, #0]
 8008b5e:	2001      	movs	r0, #1
 8008b60:	e7e7      	b.n	8008b32 <_raise_r+0x12>
 8008b62:	2400      	movs	r4, #0
 8008b64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b68:	4628      	mov	r0, r5
 8008b6a:	4798      	blx	r3
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e7e0      	b.n	8008b32 <_raise_r+0x12>

08008b70 <raise>:
 8008b70:	4b02      	ldr	r3, [pc, #8]	; (8008b7c <raise+0xc>)
 8008b72:	4601      	mov	r1, r0
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	f7ff bfd3 	b.w	8008b20 <_raise_r>
 8008b7a:	bf00      	nop
 8008b7c:	20000088 	.word	0x20000088

08008b80 <_kill_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	; (8008ba0 <_kill_r+0x20>)
 8008b84:	2300      	movs	r3, #0
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	602b      	str	r3, [r5, #0]
 8008b8e:	f7f8 faeb 	bl	8001168 <_kill>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d102      	bne.n	8008b9c <_kill_r+0x1c>
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	b103      	cbz	r3, 8008b9c <_kill_r+0x1c>
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200005b0 	.word	0x200005b0

08008ba4 <_getpid_r>:
 8008ba4:	f7f8 bad8 	b.w	8001158 <_getpid>

08008ba8 <__sread>:
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	460c      	mov	r4, r1
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	f000 f894 	bl	8008cdc <_read_r>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	bfab      	itete	ge
 8008bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bba:	89a3      	ldrhlt	r3, [r4, #12]
 8008bbc:	181b      	addge	r3, r3, r0
 8008bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bc2:	bfac      	ite	ge
 8008bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bc6:	81a3      	strhlt	r3, [r4, #12]
 8008bc8:	bd10      	pop	{r4, pc}

08008bca <__swrite>:
 8008bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bce:	461f      	mov	r7, r3
 8008bd0:	898b      	ldrh	r3, [r1, #12]
 8008bd2:	05db      	lsls	r3, r3, #23
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	4616      	mov	r6, r2
 8008bda:	d505      	bpl.n	8008be8 <__swrite+0x1e>
 8008bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be0:	2302      	movs	r3, #2
 8008be2:	2200      	movs	r2, #0
 8008be4:	f000 f868 	bl	8008cb8 <_lseek_r>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	4632      	mov	r2, r6
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfe:	f000 b817 	b.w	8008c30 <_write_r>

08008c02 <__sseek>:
 8008c02:	b510      	push	{r4, lr}
 8008c04:	460c      	mov	r4, r1
 8008c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0a:	f000 f855 	bl	8008cb8 <_lseek_r>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	bf15      	itete	ne
 8008c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c1e:	81a3      	strheq	r3, [r4, #12]
 8008c20:	bf18      	it	ne
 8008c22:	81a3      	strhne	r3, [r4, #12]
 8008c24:	bd10      	pop	{r4, pc}

08008c26 <__sclose>:
 8008c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2a:	f000 b813 	b.w	8008c54 <_close_r>
	...

08008c30 <_write_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d07      	ldr	r5, [pc, #28]	; (8008c50 <_write_r+0x20>)
 8008c34:	4604      	mov	r4, r0
 8008c36:	4608      	mov	r0, r1
 8008c38:	4611      	mov	r1, r2
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	602a      	str	r2, [r5, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f7f8 fac9 	bl	80011d6 <_write>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d102      	bne.n	8008c4e <_write_r+0x1e>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <_write_r+0x1e>
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	200005b0 	.word	0x200005b0

08008c54 <_close_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d06      	ldr	r5, [pc, #24]	; (8008c70 <_close_r+0x1c>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	f7f8 fad5 	bl	800120e <_close>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_close_r+0x1a>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_close_r+0x1a>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	200005b0 	.word	0x200005b0

08008c74 <_fstat_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4d07      	ldr	r5, [pc, #28]	; (8008c94 <_fstat_r+0x20>)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	4611      	mov	r1, r2
 8008c80:	602b      	str	r3, [r5, #0]
 8008c82:	f7f8 fad0 	bl	8001226 <_fstat>
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	d102      	bne.n	8008c90 <_fstat_r+0x1c>
 8008c8a:	682b      	ldr	r3, [r5, #0]
 8008c8c:	b103      	cbz	r3, 8008c90 <_fstat_r+0x1c>
 8008c8e:	6023      	str	r3, [r4, #0]
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	bf00      	nop
 8008c94:	200005b0 	.word	0x200005b0

08008c98 <_isatty_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d06      	ldr	r5, [pc, #24]	; (8008cb4 <_isatty_r+0x1c>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f8 facf 	bl	8001246 <_isatty>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_isatty_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_isatty_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	200005b0 	.word	0x200005b0

08008cb8 <_lseek_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d07      	ldr	r5, [pc, #28]	; (8008cd8 <_lseek_r+0x20>)
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	4608      	mov	r0, r1
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	602a      	str	r2, [r5, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f7f8 fac8 	bl	800125c <_lseek>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_lseek_r+0x1e>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_lseek_r+0x1e>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	200005b0 	.word	0x200005b0

08008cdc <_read_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d07      	ldr	r5, [pc, #28]	; (8008cfc <_read_r+0x20>)
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	602a      	str	r2, [r5, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	f7f8 fa56 	bl	800119c <_read>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_read_r+0x1e>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_read_r+0x1e>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	200005b0 	.word	0x200005b0

08008d00 <_init>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr

08008d0c <_fini>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	bf00      	nop
 8008d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d12:	bc08      	pop	{r3}
 8008d14:	469e      	mov	lr, r3
 8008d16:	4770      	bx	lr
